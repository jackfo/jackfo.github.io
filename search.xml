<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[zookeeper选举机制]]></title>
      <url>/2018/01/18/zookeeper/2018-01-11/</url>
      <content type="html"><![CDATA[<h1><span id="znode">znode</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zookeeper集群自身维护了一套数据结构。这个存储结构是一个树形结构，其上的每一个节点，我们称之为“znode”</p>
<p>lookForLeader方法:</p>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2018/01/16/ofbiz/2018-01-16/</url>
      <content type="html"><![CDATA[<p>#</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLite源码解析-操作数据库]]></title>
      <url>/2018/01/13/sqlite/2018-01-14/</url>
      <content type="html"><![CDATA[<h1><span id="sqlite-ji-ben-cao-zuo-fang-shi">SQLite基本操作方式</span></h1><p><img src="/media/15159406152380.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQLite的基本操作方式同大多数关系型数据库是一样的执行sqlite3_open打开数据库,若返回结果是SQLITE_OK即0则表示打开成功,利用sqlite3_exec执行相应的sql语句,返回函数同样是执行状态,SQLITE_OK表示执行成功,最终利用sqlite3_close关闭数据库</p>
<h1><span id="sqlite-da-kai-shu-ju-ku">SQLite打开数据库</span></h1><p><img src="/media/15160713612756.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQLite打开数据库可以通过三种方式sqlite3_open、sqlite3_open_v2、sqlite3_open16他们的具体实现都是调用openDatabase,只有具体的参数有所不同，openDatabase的具体过程中进行了初始化和创建校对规则，以及加载相应的数据驱动。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SQLITE_API <span class="keyword">int</span> <span class="title">sqlite3_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *zFilename, sqlite3 **ppDb )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openDatabase(zFilename, ppDb, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SQLITE_API <span class="keyword">int</span> <span class="title">sqlite3_open_v2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> *filename,   <span class="comment">/* Database filename (UTF-8) */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  sqlite3 **ppDb,         <span class="comment">/* OUT: SQLite db handle  返回一个数据库连接对象*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> flags,              <span class="comment">/* Flags */</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> *zVfs        <span class="comment">/* Name of VFS module to use 数据库连接应该使用的操作系统接口的sqlite3_vfs对象的名称*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> openDatabase(filename, ppDb, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)flags, zVfs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SQLITE_API <span class="keyword">int</span> <span class="title">sqlite3_open16</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *zFilename, sqlite3 **ppDb)</span></span></span><br></pre></td></tr></table></figure>
<h1><span id="sqlite-zhi-xing-sql-yu-ju">SQLite执行sql语句</span></h1><p><img src="/media/15160855294626.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlite3<em>exec()函数一次可以执行多条SQL命令。执行完成后返回一个SQLITE</em> success/failure代码，还会将错误信息写到*pzErrMsg中。首先进行安全检查以及检查sql语句是为空，在获取线程锁，调用sqlite3Error将errCode赋值为SQLITE_OK之后调用sqlte3_prepare_v2编译一条语句，通过sqlite3_step进行具体执行，如果SQL是查询，查询结果中的每一行都会调用xCallback()函数。pArg为传递给xCallback()的第一个参数。如果xCallback==NULL，即使对查询命令也没有回叫调用。</p>
<h2><span id="sqlte3-prepare-v2">sqlte3_prepare_v2</span></h2><p><img src="/media/15160908511420.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它调用sqlite3GetToken对SQL语句zSql进行分词，然后调用sqlite3Parser进行语法分析。而sqlite3Parser在语法规则发生规约时调用相应的opcode生成子例程，生成opcode。</p>
<h1><span id="sqlite-guan-bi-shu-ju-ku">SQLite关闭数据库</span></h1>]]></content>
      
        <categories>
            
            <category> SQLite </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLite网址大全]]></title>
      <url>/2018/01/13/sqlite/2018-01-14-1/</url>
      <content type="html"><![CDATA[<p>SQLite API手册<br><a href="http://www.yfvb.com/help/sqlite3/" target="_blank" rel="noopener">http://www.yfvb.com/help/sqlite3/</a> </p>
<p>SQLite源码分析<br><a href="http://huili.github.io/sqlite/sqliteintro.html" target="_blank" rel="noopener">http://huili.github.io/sqlite/sqliteintro.html</a></p>
]]></content>
      
        <categories>
            
            <category> SQLite </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLite简介]]></title>
      <url>/2018/01/13/sqlite/2018-01-13/</url>
      <content type="html"><![CDATA[<h1><span id="sqlite-de-zu-cheng">SQLite的组成</span></h1><blockquote>
<p> parser<br> tokenize<br> virtual machine </p>
</blockquote>
<h1><span id="sqlite-de-shu-ju-jie-gou">SQLite的数据结构</span></h1><p><img src="/media/15158182618673.jpg" alt=""></p>
<h2><span id="connections-he-statements">Connections和Statements</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection和statement是执行SQL命令涉及的两个主要数据结构，几乎所有通过API进行的操作都要用到它们。一个连接(Connection)代表在一个独立的事务环境下的一个连接A (connection represents a single connection to a database as well as a single transaction context)。每一个statement都和一个connection关联，它通常表示一个编译过的SQL语句，在内部，它以VDBE字节码表示。Statement包括执行一个命令所需要一切，包括保存VDBE程序执行状态所需的资源，指向硬盘记录的B-树游标，以及参数等等</p>
<h2><span id="b-tree-he-pager">B-tree和pager</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个connection可以有多个database对象—一个主要的数据库以及附加的数据库，每一个数据库对象有一个B-tree对象，一个B-tree有一个pager对象(这里的对象不是面向对象的“对象”，只是为了说清楚问题)。<br>　　Statement最终都是通过connection的B-tree和pager从数据库读或者写数据，通过B-tree的游标(cursor)遍历存储在页面(page)中的记录。游标在访问页面之前要把数所从disk加载到内存，而这就是pager的任务。任何时候，如果B-tree需要页面，它都会请求pager从disk读取数据，然后把页面(page)加载到页面缓冲区(page cache)，之后，B-tree和与之关联的游标就可以访问位于page中的记录了。<br>　　如果cursor改变了page，为了防止事务回滚，pager必须采取特殊的方式保存原来的page。总的来说，pager负责读写数据库，管理内存缓存和页面（page），以及管理事务，锁和崩溃恢复(这些在事务一节会详细介绍)。<br>　　总之，关于connection和transaction，你必须知道两件事：<br>　　(1)对数据库的任何操作，一个连接存在于一个事务下。<br>　　(2)一个连接决不会同时存在多个事务下。</p>
]]></content>
      
        <categories>
            
            <category> SQLite </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 源码分析一 zookeeper启动]]></title>
      <url>/2018/01/11/zookeeper/2018-01-04/</url>
      <content type="html"><![CDATA[<h1><span id="zookeeper-qi-dong-lei">zookeeper启动类</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zookeeper的启动方式是调用目录下的zkServer.sh start 由此我们应该到这个文件下找相应的启动入口，最终我找到的<code>org.apache.zookeeper.server.quorum.QuorumPeerMain</code></p>
<p>#z ookeeper的启动流程</p>
<p><img src="/media/15156493675289.jpg" alt=""></p>
<p>   zookeeper的启动通过调用zkServer.sh start启动，这个过程实际上是以QuorumPeerMain的main方法为函数入口,具体步骤如下:</p>
<blockquote>
<p>   1调用初始化方法<br>   1.1初始化过程中实例化QuorumPeerConfig解析配置文件<br>   1.2创建文件清理器DatadirCleanupManager并启动<br>   1.3判断启动方式，验证条件如果是有参数或者解析配置文件过程中给config的Server句柄具有相应的集群服务则通过运行配置文件启动，否则就是一个伪分布式直接通过ZooKeeperServerMain主函数启动服务</p>
<p>   2.正常退出程序</p>
</blockquote>
<h2><span id="runfromconfig-li-yong-pei-zhi-wen-jian-qi-dong-guo-cheng">runFromConfig利用配置文件启动过程</span></h2><p>位置: QuorumPeerMain.java runFromConfig<br><img src="/media/15156549203100.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行配置文件的过程中，主要将quorumPeer启动。具体步骤如下:<br>1.注册JMX,作用是可以通过jconsole或者浏览器来管理各个对象<br>2.创建ServerCnxnFactory这个server工厂,默认是NIOServerCnxnFactory,可以在配置文件中进行配置, 属性名是zookeeper.serverCnxnFactory, 在zookeeper中还提供另一种工程NettyServerCnxnFactory<br>3.根据传入的地址通过configure方法打开socket通道，绑定ip地址,并注册相应的选择键<br>4.实例化QuorumPeer并启动-待补录</p>
<h3><span id="qi-dong-quorumpeer">启动QuorumPeer</span></h3><p>QuorumPeerMain.java<br><img src="/media/15156591376460.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp; 1.加载基础数据<br>&nbsp;&nbsp; 2.创建相应的服务工厂<br>&nbsp;&nbsp; 3.startLeaderElection开始选举<br>&nbsp;&nbsp; 4.调用start启动当前线程即本实例方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1 利用JMX注册MbeanServer jmxQuorumBean和LocalPeerBean，RemotePeerBean 这里是根据myId来进行注册，myId是在加载属性实例化QuorumPeer的时候注入。id是QuorumServer的属性，其在解析属性的过程中解析<code>server.0=SY-001:2888:3888</code> 这个0就是解析的id所以如果myid 和这个id相等则采用LocalPeerBean, myid和这个id定义不同则是RemotePeerBean， 可以看出其实定义的主zookeeper节点<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2在循环的过程中有四种 LOOKING, FOLLOWING, LEADING, OBSERVING针对当前状态执行相应的指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOOKING，竞选状态。这里是进行选举算法，将票投给谁setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">FOLLOWING，随从状态，同步leader状态，参与投票。</span><br><span class="line">OBSERVING，观察状态,同步leader状态，不参与投票。</span><br><span class="line">LEADING，领导者状态。</span><br></pre></td></tr></table></figure>
<h3><span id="quorumpeer-join">quorumPeer.join</span></h3><p>QuorumPeerMain.java</p>
<p>主要目的是为了让quorumPeer启动完毕,才继续向下执行。</p>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成5--搭建maven私服(nexus)]]></title>
      <url>/2018/01/04/linux/2018-01-04-4/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-nexus">安装nexus</span></h1>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成4--tomcat部署svnadmin]]></title>
      <url>/2018/01/04/linux/2018-01-04-3/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-tomcat-bu-shu-svnadmin">安装tomcat部署svnadmin</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将svnadmin.war包部署到tomcat的服务器上解压,编辑配置文件</p>
<p>vim /usr/local/svn-tomcat/webapps/svnadmin/WEB-INF/jdbc.properties</p>
<p>#<br>tail -f -n 500 /usr/local/dubbo-tomcat/logs/catalina.out</p>
<p><img src="/media/15150434074438.jpg" alt=""></p>
<p><img src="/media/15150436764591.jpg" alt=""></p>
<p><img src="/media/15150437923463.jpg" alt=""></p>
<p><img src="/media/15150438046816.jpg" alt=""></p>
<p><img src="/media/15150438178537.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成3--安装jsvnadmin管理平台]]></title>
      <url>/2018/01/04/linux/2018-01-04-2/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-mysql">安装mysql</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>
<h1><span id="qi-dong">启动</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<h1><span id="cha-kan">查看</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep mysqld</span><br></pre></td></tr></table></figure>
<h1><span id="she-zhi-kai-ji-qi-dong">设置开机启动</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure>
<h1><span id="she-zhi-mysql-mi-ma">设置mysql密码</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password root</span><br></pre></td></tr></table></figure>
<h1><span id="jin-xing-yuan-cheng-fang-wen-fu-quan">进行远程访问赋权</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;Sql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成2--linux下安装svn]]></title>
      <url>/2018/01/04/linux/2018-01-04-1/</url>
      <content type="html"><![CDATA[<h1><span id="xia-zai">下载</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mod_dav_svn subversion</span><br></pre></td></tr></table></figure>
<h1><span id="chong-qi-apache-fu-wu">重启Apache服务</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里重启的是持续集成1中的httpd服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启命令: service httpd restart</span><br><span class="line">查看命令: ls /etc/httpd/modules/ | grep svn</span><br><span class="line">查看版本: svn --version</span><br></pre></td></tr></table></figure>
<h1><span id="chuang-jian-svn-ku">创建svn库</span></h1><p>创建文件夹命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /svn/</span><br><span class="line">```编辑subversion.conf文件</span><br></pre></td></tr></table></figure>
<p>vim /etc/httpd/conf.d/subversion.conf</p>
<p><location svn=""><br>DAV svn<br>SVNListParentPath on SVNParentPath /svn<br>AuthType Basic<br>AuthName “Subversion repositories” AuthUserFile /svn/passwd.http AuthzSVNAccessFile /svn/authz Require valid-user<br></location><br>RedirectMatch ^(/svn)$ $1/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建/svn/passwd.http 和 /svn/authz 文件</span><br></pre></td></tr></table></figure></p>
<p>touch /svn/passwd.http<br>touch /svn/authz<br>service httpd restart  重启apache服务<br>```</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 架构介绍]]></title>
      <url>/2018/01/04/zookeeper/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="zookeeper-jie-shao">zookeeper介绍</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。其具体功能如下:</p>
<blockquote>
<ol>
<li>文件系统</li>
<li>通知机制</li>
</ol>
</blockquote>
<h1><span id="zookeeper-dian-xing-de-ying-yong-chang-jing">ZooKeeper典型的应用场景</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 从设计模式角度来看，是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式</p>
<h2><span id="tong-yi-ming-ming-fu-wu-name-service">统一命名服务（Name Service）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分布式应用中，通常需要有一套完整的命名规则，既能够产生唯一的名称又便于人识别和记住,而<code>Name Service</code>已经是 Zookeeper 内置的功能，所以你只要调用<code>Zookeeper</code>的 API就能实现。如调用<code>create</code>接口就可以很容易创建一个目录节点。</p>
<h2><span id="pei-zhi-guan-li-configuration-management">配置管理（Configuration Management）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。像这样的配置信息完全可以交给 Zookeeper 来管理，将配置信息保存在 Zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。<br><img src="/media/15150300003976.jpg" alt=""></p>
<h2><span id="ji-qun-guan-li-group-membership">集群管理（Group Membership）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 能够很容易的实现集群管理的功能，如有多台 Server 组成一个服务集群，那么必须要一个“总管”知道当前集群中每台机器的服务状态，一旦有机器不能提供服务，集群中其它集群必须知道，从而做出调整重新分配服务策略。同样当增加集群的服务能力时，就会增加一台或多台Server，同样也必须让“总管”知道。Zookeeper 不仅能够帮你维护当前的集群中机器的服务状态，而且能够帮你选出一个“总管”，让这个总管来管理集群，这就是 Zookeeper 的另一个功能 Leader Election</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它们的实现方式都是在 Zookeeper 上创建一个 EPHEMERAL 类型的目录节点，然后每个 Server 在它们创建目录节点的父目录节点上调用getChildren(String path,boolean watch) 方法并设置 watch 为 true，由于是 EPHEMERAL 目录节点，当创建它的 Server 死去，这个目录节点也随之被删除，所以 Children 将会变化，这时 getChildren上的 Watch 将会被调用，所以其它 Server 就知道已经有某台 Server 死去了。新增 Server 也是同样的原理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 如何实现 Leader Election，也就是选出一个 Master Server。和前面的一样每台 Server 创建一个 EPHEMERAL 目录节点，不同的是它还是一个 SEQUENTIAL 目录节点，所以它是个 <code>EPHEMERAL_SEQUENTIAL</code> 目录节点。之所以它是 <code>EPHEMERAL_SEQUENTIAL</code> 目录节点，是因为我们可以给每台 Server 编号，我们可以选择当前是最小编号的 Server 为 Master，假如这个最小编号的 Server 死去，由于是 EPHEMERAL 节点，死去的 Server 对应的节点也被删除，所以当前的节点列表中又出现一个最小编号的节点，我们就选择这个节点为当前 Master。这样就实现了动态选择 Master，避免了传统意义上单 Master 容易出现单点故障的问题<br><img src="/media/15150303401429.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> InetSocketAddress <span class="title">findLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       InetSocketAddress addr = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">// Find the leader by id</span></span><br><span class="line">       Vote current = self.getCurrentVote();</span><br><span class="line">       <span class="keyword">for</span> (QuorumServer s : self.getView().values()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.id == current.getId()) &#123;</span><br><span class="line">               addr = s.addr;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (addr == <span class="keyword">null</span>) &#123;</span><br><span class="line">           LOG.warn(<span class="string">"Couldn't find the leader with id = "</span></span><br><span class="line">                   + current.getId());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> addr;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="gong-xiang-suo-locks">共享锁（Locks）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享锁在同一个进程中很容易实现，但是在跨进程或者在不同 Server 之间就不好实现了。Zookeeper 却很容易实现这个功能，实现方式也是需要获得锁的 Server 创建一个 EPHEMERAL_SEQUENTIAL 目录节点，然后调用 getChildren方法获取当前的目录节点列表中最小的目录节点是不是就是自己创建的目录节点，如果正是自己创建的，那么它就获得了这个锁，如果不是那么它就调用 exists(String path, boolean watch) 方法并监控 Zookeeper 上目录节点列表的变化，一直到自己创建的节点是列表中最小编号的目录节点，从而获得锁，释放锁很简单，只要删除前面它自己所创建的目录节点就行了。<br><img src="/media/15150305099219.jpg" alt=""></p>
<h2><span id="dui-lie-guan-li">队列管理</span></h2><p>参考链接:</p>
<p>ZooKeeper学习第一期—Zookeeper简单介绍<br><a href="https://www.cnblogs.com/wuxl360/p/5817471.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuxl360/p/5817471.html</a></p>
<p>Zookeeper的功能以及工作原理<br><a href="https://www.cnblogs.com/felixzh/p/5869212.html" target="_blank" rel="noopener">https://www.cnblogs.com/felixzh/p/5869212.html</a></p>
<p>分布式服务框架Zookeeper(IBM)<br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/</a></p>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql一些常用sql语句]]></title>
      <url>/2018/01/03/mysql/2018-01-03/</url>
      <content type="html"><![CDATA[<h1><span id="e1">E1</span></h1><p>获取当前时间<br><code>select now&amp;#40; &amp;#4</code></p>
<p>#E2<br>获取当前时间戳</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT UNIX_TIMESTAMP</span><br><span class="line">SELECT UNIX_TIMESTAMP*1000 毫秒级</span><br><span class="line">SELECT UNIX_TIMESTAMP*1000*1000 微秒级</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下安装httpd]]></title>
      <url>/2018/01/01/linux/2018-01-04/</url>
      <content type="html"><![CDATA[<p>下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd httpd-devel</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure>
<p>修改端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">ServerName localhost:80</span><br></pre></td></tr></table></figure>
<p>然后就可以根据ip进行访问</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机vm-tools安装]]></title>
      <url>/2018/01/01/linux/2018-01-01-1/</url>
      <content type="html"><![CDATA[<h1><span id="xu-ni-ji-vm-tools-an-zhuang">虚拟机vm-tools安装</span></h1><p>##centos下</p>
<p>###点击vm fusion下安装VMware Tools<br><img src="/media/15147837057928.jpg" alt=""></p>
<p>###解压</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在点击上面安装之后会出现一个CD文件，里面存在VmwareTools-10* 的包 这是一个tar.gz的压缩包，现在我们通过<code>tar -zxvf 文件名tar.gz</code>来进行解压（可以自行存放位置）<br><img src="/media/15147840239457.jpg" alt=""></p>
<p>###安装</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转到上面解压文件的目录vmware-tools-distrib 下，运行./vmware-install.pl 在安装的过程中不断点击enter 直到安装完成，之后调用reboot重新启动就完成了</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 环境安装]]></title>
      <url>/2018/01/01/zookeeper/2017-12-30/</url>
      <content type="html"><![CDATA[<h1><span id="jie-ya">解压</span></h1><p><code>tar -zvxf  zookeeper-3.4.5.tar.gz -C /usr/local</code></p>
<p>#配置环境变量<br><code>vim /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME =/usr/local/zookeeper-3.4.5</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p><code>source /etc/profile</code></p>
<p>#修改配置文件</p>
<p>相对路径:/ZOOKEEPER_HOME/conf/zoo.cfg</p>
<p>修改</p>
<blockquote>
<p>1.datadir=/ZOOKEEPER_HOME/data</p>
<p>2.server0=ip地址<br>。。。。。。</p>
</blockquote>
<p>ZOOKEEPER_HOME下面创建data文件并创建脚本文件myid</p>
<p>#启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux修改ip为静态ip]]></title>
      <url>/2018/01/01/linux/2018-01-01-3/</url>
      <content type="html"><![CDATA[<p>#修改网卡信息</p>
<p><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;   #注意：原值为dhcp</span><br><span class="line">HWADDR=&quot;00:0c:29:ba:18:25&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br></pre></td></tr></table></figure>
<p>以下是修改为静态时需要加<br>IPADDR=192.168.1.200<br>GATEWAY=192.168.1.1<br>NETMASK=255.255.255.0</p>
<p>重启网卡<code>service network restart</code></p>
<p>#设置DNS</p>
<p>vim /ect/resolv.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux卸载openJDK安装sun下jdk]]></title>
      <url>/2018/01/01/linux/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="xie-zai-openjdk">卸载openJDK</span></h1><h2><span id="cha-kan-xiang-ying-openjdk-de-xin-xi">查看相应openJDK的信息</span></h2><p><code>rpm -qa | grep java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tzdata-java-2014g-1.el6.noarch</span><br><span class="line">java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</span><br><span class="line">java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el6_5.x86_64</span><br></pre></td></tr></table></figure>
<h2><span id="shan-chu-xiang-ying-de-wen-jian">删除相应的文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el6_5.x86_64</span><br><span class="line">rpm -e --nodeps tzdata-java-2014g-1.el6.noarch</span><br></pre></td></tr></table></figure>
<h2><span id="an-zhuang-jdk">安装JDK</span></h2><p>找到相应的jdk资源，将其解压到指定目录</p>
<h2><span id="pei-zhi-huan-jing">配置环境</span></h2><p>打开环境变量存储文件<code>vi /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.7</span><br><span class="line">JRE_HOME=/usr/java/jdk1.7/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>
<p>编译环境变量存储文件<code>source /etc/profile</code></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware Fusion实现虚拟机拷贝]]></title>
      <url>/2018/01/01/linux/2018-01-01-2/</url>
      <content type="html"><![CDATA[<p>参考链接:<a href="http://www.linuxidc.com/Linux/2017-06/144720.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2017-06/144720.htm</a></p>
<p>#拷贝<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击需要拷贝的文件,然后进行复制-粘贴,如下:<br><img src="/media/15147860425142.jpg" alt=""></p>
<p>#打开<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开相应的虚拟机<br><img src="/media/15147863090317.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击已拷贝<br><img src="/media/15147864065101.jpg" alt=""></p>
<p>#修改hostname</p>
<p><code>vi /etc/sysconfig/network</code></p>
<p>将”HOSTNAME=”后的内容改成机器名，比如centos.04，保存退出</p>
<p><code>vi /etc/hosts</code></p>
<p>在最后添加一行 127.0.0.1 centos.04，保存退出</p>
<p>如果要马上生效，可再输入hostname centos.04，否则要重启才能生效</p>
<p><code>shutdown -h now关机</code> 注意最好执行这个命令，下面生成mac地址需要关机</p>
<p>#给新虚拟机的网卡，生成一个新mac地址<br>在设置里面点击网络适配器生成一个新的mac地址<br><img src="/media/15147869521873.jpg" alt=""></p>
<p>#修改网卡信息</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>vi /etc/udev/rules.d/70-persistent-net.rules</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编辑这个文件，它记录了当前机器上的所有网卡信息根据刚才新生成的mac地址，找到对应的行，把网卡名称改成 eth0，其它的全删除</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把uuid随便改一个数字，保证它跟原来的系统不同即可，然后把HWADDR改成新生成的mac地址，保存退出</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Working principle of the Netty]]></title>
      <url>/2017/12/20/netty/netty3/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Netty </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Huffman Coding Greedy Algorithm]]></title>
      <url>/2017/12/17/arithmetic/huffmancoding/</url>
      <content type="html"><![CDATA[<h1><span id="what-is-huffman-coding">What is Huffman Coding</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Huffman coding is Data Compression Algorithm,Based on lengths of assigned codes based on frequencies, Variable Length Codes are known as Prefix Codes</p>
<h2><span id="the-goal">The Goal</span></h2><p>Try to reduce the total number of bits used without losing any information</p>
<h2><span id="the-process-of-huffman-coding">The process of Huffman coding</span></h2><blockquote>
<ol>
<li>Scan text to be compressed and tally         occurrence of all characters.</li>
<li>Sort or prioritize characters based on     number of occurrences in text.</li>
<li>Build Huffman code tree based on             prioritized list.</li>
<li>Perform a traversal of tree to determine     all code words.</li>
<li>Scan text again and create new file         using the Huffman codes.</li>
</ol>
</blockquote>
<h2><span id="the-schematic-diagram">The Schematic diagram</span></h2><p><img src="/media/15135245970872.jpg" alt=""></p>
<p><img src="/media/15135246224737.jpg" alt=""></p>
<h2><span id="code-process">Code process</span></h2><p><img src="/media/15135250930243.jpg" alt=""></p>
<p>#The code of Huffman<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now, we specific display Huffman code. By code, we analysis of its process step by step.</p>
<p>##The structure of Node<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In its structure, We define the frequency to statistic the number of occurrences of the characters.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String chars = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> frequence = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node parent;</span><br><span class="line">    <span class="keyword">private</span> Node leftNode;</span><br><span class="line">    <span class="keyword">private</span> Node rightNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frequence - node.frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChars</span><span class="params">(String chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chars = chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrequence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrequence</span><span class="params">(<span class="keyword">int</span> frequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frequence = frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Node parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(Node leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(Node rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="statistic-frequency-of-every-character">statistic frequency of every character</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, Our main purpose is to statistic frequency of every character. so we structure a HashMap to store data, when we get data from the HashMap by key, we add one to the number of it and store into The value of the current mapping as new value</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title">statistics</span><span class="params">(<span class="keyword">char</span>[] charArray)</span> </span>&#123;</span><br><span class="line">       Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c : charArray) &#123;</span><br><span class="line">           Character character = <span class="keyword">new</span> Character(c);</span><br><span class="line">           <span class="keyword">if</span> (map.containsKey(character)) &#123;</span><br><span class="line">               map.put(character, map.get(character) + <span class="number">1</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               map.put(character, <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="build-a-tree">build a tree</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PriorityQueue will Retrieves and removes the head of this queue, or returns null if this queue is empty. PriorityQueue maintain a heap what you can poll the smallest element every time actually. so we will obtain the two minimum elements and build Node, By this way, we will get a complete binary tree.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The idea of algorithm: transfer statistical information to Node and stored in a priority queue. each time it pop-up two minimum frequency nodes the queue to build a new parent node. The frequency of characters is the sum of two pop-up Node.he first pop-up as the left child node, the back one as the right child node, and the newly built parent node inside the queue. Repeat the above action N-1 times. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tree <span class="title">buildTree</span><span class="params">(Map&lt;Character, Integer&gt; statistics,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  List&lt;Node&gt; leafs)</span> </span>&#123;</span><br><span class="line">        Character[] keys = statistics.keySet().toArray(<span class="keyword">new</span> Character[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Node&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Character character : keys) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setChars(character.toString());</span><br><span class="line">            node.setFrequence(statistics.get(character));</span><br><span class="line">            priorityQueue.add(node);</span><br><span class="line">            leafs.add(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = priorityQueue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Node node1 = priorityQueue.poll();</span><br><span class="line">            Node node2 = priorityQueue.poll();</span><br><span class="line"></span><br><span class="line">            Node sumNode = <span class="keyword">new</span> Node();</span><br><span class="line">            sumNode.setChars(node1.getChars()+node2.getChars());</span><br><span class="line">            sumNode.setFrequence(node1.getFrequence()+node2.getFrequence());</span><br><span class="line"></span><br><span class="line">            sumNode.setLeftNode(node1);</span><br><span class="line">            sumNode.setRightNode(node2);</span><br><span class="line"></span><br><span class="line">            node1.setParent(sumNode);</span><br><span class="line">            node2.setParent(sumNode);</span><br><span class="line"></span><br><span class="line">            priorityQueue.add(sumNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Tree tree = <span class="keyword">new</span> Tree();</span><br><span class="line">        tree.setRoot(priorityQueue.poll());</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="encode">encode</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, we will invoke <code>buildTree</code> to let the Node produce associated. searching up from the leaf node of current character, if the character is the parent node of the left node, add 0 before the coded character , otherwise if it is right node, add 1, until the root node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String originalStr,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;Character, Integer&gt; statistics)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (originalStr == <span class="keyword">null</span> || originalStr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span>[] charArray = originalStr.toCharArray();</span><br><span class="line">		List&lt;Node&gt; leafNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		buildTree(statistics, leafNodes);</span><br><span class="line">		Map&lt;Character, String&gt; encodInfo = buildEncodingInfo(leafNodes);</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c : charArray) &#123;</span><br><span class="line">			Character character = <span class="keyword">new</span> Character(c);</span><br><span class="line">			buffer.append(encodInfo.get(character));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="decode">decode</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Huffman coding algorithm can ensure any binary code is not going to be another code prefix, decoding is simple, each in turn to take out the binary, search down from the root, 1 to the right, 0 to the left, to the leaf node (hit), return a root node continue to repeat the action</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String binaryStr, Map&lt;Character, Integer&gt; statistics)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (binaryStr == <span class="keyword">null</span> || binaryStr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] binaryCharArray = binaryStr.toCharArray();</span><br><span class="line">    LinkedList&lt;Character&gt; binaryList = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">int</span> size = binaryCharArray.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        binaryList.addLast(<span class="keyword">new</span> Character(binaryCharArray[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Node&gt; leafNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">    Tree tree = buildTree(statistics, leafNodes);</span><br><span class="line"></span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (binaryList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Node node = tree.getRoot();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            Character c = binaryList.removeFirst();</span><br><span class="line">            <span class="keyword">if</span> (c.charValue() == <span class="string">'0'</span>) &#123;</span><br><span class="line">                node = node.getLeftNode();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.getRightNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!node.isLeaf());</span><br><span class="line"></span><br><span class="line">        buffer.append(node.getChars());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="the-test-result">The Test Result</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String oriStr = <span class="string">"Huffman codes compress data very effectively"</span>;</span><br><span class="line"></span><br><span class="line">       Map&lt;Character, Integer&gt; statistics = statistics(oriStr.toCharArray());</span><br><span class="line">       String encodedBinariStr = encode(oriStr, statistics);</span><br><span class="line">       String decodedStr = decode(encodedBinariStr, statistics);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Original sstring: "</span> + oriStr+<span class="string">"\n"</span>);</span><br><span class="line">       System.out.println(<span class="string">"Huffman encoed binary string: "</span> + encodedBinariStr+<span class="string">"\n"</span>);</span><br><span class="line">       System.out.println(<span class="string">"decoded string from binariy string: "</span> + decodedStr);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Original sstring: Huffman codes compress data very effectively</span><br><span class="line"></span><br><span class="line">Huffman encoed binary string: 11111011010101001011100100011011001111000010111011011001011110000101110011011100111011001100101111101100000011000011111101010011000001110101001010111000001111111111101011101000000</span><br><span class="line"></span><br><span class="line">decoded string from binariy string: Huffman codes compress data very effectively</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EightQueen]]></title>
      <url>/2017/12/17/arithmetic/2017-12-18/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The N queens puzzle is the problem of placing N chess queens on an N×N chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal.For example, below is one of the solution for famous 8 Queen problem.<br><img src="/media/15135270924160.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Backtracking Algorithm for N-Queen is already discussed here. In backtracking solution we backtrack when we hit a dead end. In Branch and Bound solution, after building a partial solution, we figure out that there is no point going any deeper as we are going to hit a dead end.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Let’s begin by describing backtracking solution. “The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes, then we backtrack and return false.”</p>
<p><img src="/media/15135271584568.jpg" alt=""></p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.For the 1st Queen, there are total 8 possibilities as we can place 1st Queen in any row of first column. Let’s place Queen 1 on row 3.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.After placing 1st Queen, there are 7 possibilities left for the 2nd Queen. But wait, we don’t really have 7 possibilities. We cannot place Queen 2 on rows 2, 3 or 4 as those cells are under attack from Queen 1. So, Queen 2 has only 8 – 3 = 5 valid positions left.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.After picking a position for Queen 2, Queen 3 has even fewer options as most of the cells in its column are under attack from the first 2 Queens.</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We need to figure out an efficient way of keeping track of which cells are under attack. In previous solution we kept an 8­-by­-8 Boolean matrix and update it each time we placed a queen, but that required linear time to update as we need to check for safe cells.</p>
<p>Basically, we have to ensure 4 things:</p>
<blockquote>
<ol>
<li>No two queens share a column.</li>
<li>No two queens share a row.</li>
<li>No two queens share a top-right to left-bottom diagonal.</li>
<li>No two queens share a top-left to bottom-right diagonal</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Number 1 is automatic because of the way we store the solution. For number 2, 3 and 4, we can perform updates in O(1) time. The idea is to keep three Boolean arrays that tell us which rows and which diagonals are occupied.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lets do some pre-processing first. Let’s create two N x N matrix one for / diagonal and other one for \ diagonal. Let’s call them slashCode and backslashCode respectively. The trick is to fill them in such a way that two queens sharing a same /­diagonal will have the same value in matrix slashCode, and if they share same \­diagonal, they will have the same value in backslashCode matrix.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For an N x N matrix, fill slashCode and backslashCode matrix using below formula –</p>
<pre><code>cols[N] != cols[N-1]

cols[N] != cols[N-1]-1

cols[N]!=cols[N-1]+1
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//累计方案总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXQUEEN = <span class="number">8</span>;<span class="comment">//皇后个数，同时也是棋盘行列总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] cols = <span class="keyword">new</span> <span class="keyword">int</span>[MAXQUEEN]; <span class="comment">//定义cols数组，表示8列棋子摆放情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queen8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//核心函数</span></span><br><span class="line">      getArrangement(<span class="number">0</span>);</span><br><span class="line">      System.out.print(<span class="string">"/n"</span>);</span><br><span class="line">      System.out.println(MAXQUEEN+<span class="string">"皇后问题有"</span>+num+<span class="string">"种摆放方法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">getArrangement</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="comment">//遍历该列所有不合法的行，并用rows数组记录，不合法即rows[i]=true</span></span><br><span class="line">     <span class="keyword">boolean</span>[] rows = <span class="keyword">new</span> <span class="keyword">boolean</span>[MAXQUEEN];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        rows[cols[i]]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> d = n-i;</span><br><span class="line">        <span class="keyword">if</span>(cols[i]-d &gt;= <span class="number">0</span>)rows[cols[i]-d]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(cols[i]+d &lt;= MAXQUEEN-<span class="number">1</span>)rows[cols[i]+d]=<span class="keyword">true</span>; </span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXQUEEN;i++)&#123;</span><br><span class="line">       <span class="comment">//判断该行是否合法  </span></span><br><span class="line">       <span class="keyword">if</span>(rows[i])<span class="keyword">continue</span>;</span><br><span class="line">       <span class="comment">//设置当前列合法棋子所在行数</span></span><br><span class="line">       cols[n] = i;</span><br><span class="line">       <span class="comment">//当前列不为最后一列时</span></span><br><span class="line">       <span class="keyword">if</span>(n&lt;MAXQUEEN-<span class="number">1</span>)&#123;</span><br><span class="line">         getArrangement(n+<span class="number">1</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累计方案个数</span></span><br><span class="line">         num++;</span><br><span class="line">         <span class="comment">//打印棋盘信息</span></span><br><span class="line">         printChessBoard();</span><br><span class="line">       &#125; </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printChessBoard</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       System.out.print(<span class="string">"第"</span>+num+<span class="string">"种走法 /n"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXQUEEN;i++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXQUEEN;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i==cols[j])&#123;</span><br><span class="line">             System.out.print(<span class="string">"0 "</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span></span><br><span class="line">             System.out.print(<span class="string">"+ "</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print(<span class="string">"/n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Queen8 queen = <span class="keyword">new</span> Queen8();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第1种走法 </span><br><span class="line">0 + + + + + + + </span><br><span class="line">+ + + + + + 0 + </span><br><span class="line">+ + + + 0 + + + </span><br><span class="line">+ + + + + + + 0 </span><br><span class="line">+ 0 + + + + + + </span><br><span class="line">+ + + 0 + + + + </span><br><span class="line">+ + + + + 0 + + </span><br><span class="line">+ + 0 + + + + + </span><br><span class="line">第2种走法 </span><br><span class="line">0 + + + + + + + </span><br><span class="line">+ + + + + + 0 + </span><br><span class="line">+ + + 0 + + + + </span><br><span class="line">+ + + + + 0 + + </span><br><span class="line">+ + + + + + + 0 </span><br><span class="line">+ 0 + + + + + + </span><br><span class="line">+ + + + 0 + + + </span><br><span class="line">+ + 0 + + + + + </span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A example of Netty]]></title>
      <url>/2017/12/12/netty/netty1/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-netty">The introduce of Netty</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; we often use an HTTP client library to retrieve information from a web server and to invoke a remote procedure call via web services. Netty is an NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients. It greatly simplifies and streamlines network programming such as TCP and UDP socket server development.</p>
<h1><span id="a-example-of-netty">A example of Netty</span></h1><h2><span id="the-main-class">The Main class</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, we introduce a simple process for a netty service. At first, we create multithreaded event loop that handles I/O operation and add them into corresponding server and add corresponding channel to transmit message. In this channel, we will create corresponding handle to receive the message, In this process, some handle can encode or decode the message. In the end, it will wait the message from client. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscardServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//bossGroup will accept an incoming connection</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="comment">//workerGroup handles the traffic of the accepted connection once the bossGroup accepts the connection</span></span><br><span class="line">        <span class="comment">//and registers the accepted the connection to the worker</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//ServerBootstrap is a helper class that sets up a server. you can set up the server using channel</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//we specify to use the NioServerSocketChannel class which is used to a new channel to accept incoming connection</span></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    <span class="comment">//the handler specified here will always be evaluated by a newly channel</span></span><br><span class="line">                    <span class="comment">//The ChannelInitializer's purpose is to help user configure a new channel and add some handler which can implement network application</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DiscardServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">//you can set some socket option by this way</span></span><br><span class="line">                    <span class="comment">//option() is for the NioServerSocketChannel that accepts incoming connections.</span></span><br><span class="line">                    <span class="comment">//childOption() is for the Channels accepted by the parent ServerChannel, which is NioServerSocketChannel in this case.</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind and start to accept incoming connections.</span></span><br><span class="line">            ChannelFuture f = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"before closeFuture.."</span>);</span><br><span class="line">            <span class="comment">// Wait until the server socket is closed.</span></span><br><span class="line">            <span class="comment">// In this example, this does not happen, but you can do that to gracefully</span></span><br><span class="line">            <span class="comment">// shut down your server.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">            System.out.println(<span class="string">"after closeFuture.."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            port = <span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> DiscardServer(port).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">## The corresponding handle</span><br><span class="line"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; In <span class="keyword">this</span> handle,  we override the channelRead method from the <span class="class"><span class="keyword">interface</span> <span class="title">of</span> <span class="title">ChannelInboundHandler</span> <span class="title">to</span> <span class="title">receive</span> <span class="title">the</span> <span class="title">message</span> <span class="title">and</span> <span class="title">do</span> <span class="title">some</span> <span class="title">operation</span>.</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">```<span class="title">java</span></span></span><br><span class="line"><span class="class">/***</span></span><br><span class="line"><span class="class"> *</span></span><br><span class="line"><span class="class"> * <span class="title">ChannelInboundHandlerAdapter</span> <span class="title">is</span> <span class="title">a</span> <span class="title">implementation</span> <span class="title">for</span> <span class="title">ChannelHandlerAdapter</span> (<span class="title">abstract</span> <span class="title">class</span>) <span class="title">and</span> <span class="title">ChannelInboundHandler</span>(<span class="title">interface</span>)</span></span><br><span class="line"><span class="class"> * <span class="title">ChannelInboundHandler</span> <span class="title">provides</span> <span class="title">various</span> <span class="title">event</span> <span class="title">handler</span> <span class="title">methods</span> <span class="title">that</span> <span class="title">you</span> <span class="title">can</span> <span class="title">override</span></span></span><br><span class="line"><span class="class"> * <span class="title">For</span> <span class="title">now</span>, <span class="title">it</span> <span class="title">is</span> <span class="title">just</span> <span class="title">enough</span> <span class="title">to</span> <span class="title">extend</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="title">rather</span> <span class="title">than</span> <span class="title">to</span> <span class="title">implement</span> <span class="title">the</span> <span class="title">handler</span> <span class="title">interface</span> <span class="title">by</span> <span class="title">yourself</span>.</span></span><br><span class="line"><span class="class"> *</span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DiscardServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * we override the channelRead method from the interface of ChannelInboundHandler</span></span><br><span class="line"><span class="comment">     * Invoked when the current channel has read a message from the peer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx this variable provide various operations that enable you to trigger various I/O operations and event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg receive the message from channel</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">char</span> temp ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctx.write(<span class="string">"you message:"</span>);</span><br><span class="line">            <span class="keyword">while</span> (in.isReadable()) &#123;</span><br><span class="line">                temp = (<span class="keyword">char</span>)in.readByte();</span><br><span class="line">                System.out.print(temp);</span><br><span class="line"></span><br><span class="line">                ctx.write(temp);</span><br><span class="line">                System.out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The exceptionCaught() event handler method s called with a Throwable</span></span><br><span class="line"><span class="comment">     * when an exception was raised by Netty due to an I/O error or by a handler implementation due to the exception thrown while processing events</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Close the connection when an exception is raised.</span></span><br><span class="line">        System.out.println(<span class="string">"channelRead..."</span>);</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##The result of this example<br><img src="/media/15130934221050.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Netty </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PriorityQueue]]></title>
      <url>/2017/12/12/Jdk/PriorityQueue/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-priorityqueue">The introduce of PriorityQueue</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An unbounded priority queue based on a priority heap. The elements of the priority queue are ordered according to their natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements. A priority queue relying on natural ordering also does not permit insertion of non-comparable objects </p>
<p>#The family of PriorityQueue<br><img src="/media/15134842324567.jpg" alt=""></p>
<p>#The structure of PriorityQueue</p>
<p><img src="/media/15134842759960.jpg" alt=""></p>
<p>#The method of PriorityQueue</p>
]]></content>
      
        <categories>
            
            <category> jdk </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QuickSort]]></title>
      <url>/2017/12/11/arithmetic/quickSort/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.</p>
<blockquote>
<p>1.Always pick first element as pivot.<br>2.Always pick last element as pivot (implemented below)<br>3.Pick a random element as pivot.<br>4.Pick median as pivot.</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time.</p>
<h1><span id="pseudo-code-for-recursive-quicksort-function">Pseudo Code for recursive QuickSort function :</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* low  --&gt; Starting index,  high  --&gt; Ending index */</span><br><span class="line">quickSort(arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    if (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        /* pi is partitioning index, arr[p] is now</span><br><span class="line">           at right place */</span><br><span class="line">        pi = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr, low, pi - 1);  // Before pi</span><br><span class="line">        quickSort(arr, pi + 1, high); // After pi</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/media/15135258671875.jpg" alt=""></p>
<h1><span id="partition-algorithm">Partition Algorithm</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There can be many ways to do partition, following pseudo code adopts the method given in CLRS book. The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* low  --&gt; Starting index,  high  --&gt; Ending index */</span><br><span class="line">quickSort(arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    if (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        /* pi is partitioning index, arr[p] is now</span><br><span class="line">           at right place */</span><br><span class="line">        pi = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr, low, pi - 1);  // Before pi</span><br><span class="line">        quickSort(arr, pi + 1, high); // After pi</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="pseudo-code-for-partition">Pseudo code for partition()</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* This function takes last element as pivot, places</span><br><span class="line">   the pivot element at its correct position in sorted</span><br><span class="line">    array, and places all smaller (smaller than pivot)</span><br><span class="line">   to left of pivot and all greater elements to right</span><br><span class="line">   of pivot */</span><br><span class="line">partition (arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    // pivot (Element to be placed at right position)</span><br><span class="line">    pivot = arr[high];  </span><br><span class="line"> </span><br><span class="line">    i = (low - 1)  // Index of smaller element</span><br><span class="line"></span><br><span class="line">    for (j = low; j &lt;= high- 1; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        // If current element is smaller than or</span><br><span class="line">        // equal to pivot</span><br><span class="line">        if (arr[j] &lt;= pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;    // increment index of smaller element</span><br><span class="line">            swap arr[i] and arr[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap arr[i + 1] and arr[high])</span><br><span class="line">    return (i + 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="illustration-of-partition">Illustration of partition()</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">arr[] = &#123;10, 80, 30, 90, 40, 50, 70&#125;</span><br><span class="line">Indexes:  0   1   2   3   4   5   6 </span><br><span class="line"></span><br><span class="line">low = 0, high =  6, pivot = arr[h] = 70</span><br><span class="line">Initialize index of smaller element, i = -1</span><br><span class="line"></span><br><span class="line">Traverse elements from j = low to high-1</span><br><span class="line">j = 0 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 0 </span><br><span class="line">arr[] = &#123;10, 80, 30, 90, 40, 50, 70&#125; // No change as i and j </span><br><span class="line">                                     // are same</span><br><span class="line"></span><br><span class="line">j = 1 : Since arr[j] &gt; pivot, do nothing</span><br><span class="line">// No change in i and arr[]</span><br><span class="line"></span><br><span class="line">j = 2 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 1</span><br><span class="line">arr[] = &#123;10, 30, 80, 90, 40, 50, 70&#125; // We swap 80 and 30 </span><br><span class="line"></span><br><span class="line">j = 3 : Since arr[j] &gt; pivot, do nothing</span><br><span class="line">// No change in i and arr[]</span><br><span class="line"></span><br><span class="line">j = 4 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 2</span><br><span class="line">arr[] = &#123;10, 30, 40, 90, 80, 50, 70&#125; // 80 and 40 Swapped</span><br><span class="line">j = 5 : Since arr[j] &lt;= pivot, do i++ and swap arr[i] with arr[j] </span><br><span class="line">i = 3 </span><br><span class="line">arr[] = &#123;10, 30, 40, 50, 80, 90, 70&#125; // 90 and 50 Swapped </span><br><span class="line"></span><br><span class="line">We come out of loop because j is now equal to high-1.</span><br><span class="line">Finally we place pivot at correct position by swapping</span><br><span class="line">arr[i+1] and arr[high] (or pivot) </span><br><span class="line">arr[] = &#123;10, 30, 40, 50, 70, 90, 80&#125; // 80 and 70 Swapped </span><br><span class="line"></span><br><span class="line">Now 70 is at its correct place. All elements smaller than</span><br><span class="line">70 are before it and all elements greater than 70 are after</span><br><span class="line">it.</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java program for implementation of QuickSort</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/* This function takes last element as pivot,</span></span><br><span class="line"><span class="comment">       places the pivot element at its correct</span></span><br><span class="line"><span class="comment">       position in sorted array, and places all</span></span><br><span class="line"><span class="comment">       smaller (smaller than pivot) to left of</span></span><br><span class="line"><span class="comment">       pivot and all greater elements to right</span></span><br><span class="line"><span class="comment">       of pivot */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[high]; </span><br><span class="line">        <span class="keyword">int</span> i = (low-<span class="number">1</span>); <span class="comment">// index of smaller element</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=low; j&lt;high; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// If current element is smaller than or</span></span><br><span class="line">            <span class="comment">// equal to pivot</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt;= pivot)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// swap arr[i] and arr[j]</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// swap arr[i+1] and arr[high] (or pivot)</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i+<span class="number">1</span>];</span><br><span class="line">        arr[i+<span class="number">1</span>] = arr[high];</span><br><span class="line">        arr[high] = temp;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* The main function that implements QuickSort()</span></span><br><span class="line"><span class="comment">      arr[] --&gt; Array to be sorted,</span></span><br><span class="line"><span class="comment">      low  --&gt; Starting index,</span></span><br><span class="line"><span class="comment">      high  --&gt; Ending index */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* pi is partitioning index, arr[pi] is </span></span><br><span class="line"><span class="comment">              now at right place */</span></span><br><span class="line">            <span class="keyword">int</span> pi = partition(arr, low, high);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Recursively sort elements before</span></span><br><span class="line">            <span class="comment">// partition and after partition</span></span><br><span class="line">            sort(arr, low, pi-<span class="number">1</span>);</span><br><span class="line">            sort(arr, pi+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* A utility function to print array of size n */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Driver program</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"> </span><br><span class="line">        QuickSort ob = <span class="keyword">new</span> QuickSort();</span><br><span class="line">        ob.sort(arr, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"sorted array"</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorted array:</span><br><span class="line">1 5 7 8 9 10</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO Selector]]></title>
      <url>/2017/12/11/NIO/nio4/</url>
      <content type="html"><![CDATA[<p>#The Selector, SelectableChannel, and SelectionKey Classes</p>
<h2><span id="selector">Selector</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Selector class manages information about a set of registered channel and their readies state. Channels are registered with selectors, and a selector can be asked to update readies state of channels. When doing so, the invoking thread can optionally indicate that it would prefer to be suspended until one of the registered channel is ready.</p>
<p>##</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux基本指令]]></title>
      <url>/2017/12/11/linux/2018-01-01/</url>
      <content type="html"><![CDATA[<h1><span id="jie-ya">解压</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf 文件名</span><br></pre></td></tr></table></figure>
<h1><span id="yi-dong">移动</span></h1><p>文件移动命令mv<br>    命令格式：mv [-fiv] source destination<br>    参数说明：<br>    -f:force，强制直接移动而不询问<br>    -i:若目标文件(destination)已经存在，就会询问是否覆盖<br>    -u:若目标文件已经存在，且源文件比较新，才会更新<br>    如将/test1目录下的file1复制到/test3 目录，并将文件名改为file2,可输入以下命令：<br>    mv /test1/file1 /test3/file2</p>
<h1><span id="chong-ming-ming">重命名</span></h1><h1><span id="guan-ji">关机</span></h1><p>poweroff 立刻关机<br>shutdown -h now 立刻关机<br>shutdown -h 10 10分钟后自动关机</p>
<h1><span id="guan-bi-fang-huo-qiang">关闭防火墙</span></h1><p>关闭命令：  service iptables stop<br>永久关闭防火墙：chkconfig iptables off<br>永久关闭需要两条语句都运行</p>
<h1><span id="guan-bi-duan-kou">关闭端口</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO channel]]></title>
      <url>/2017/12/11/NIO/nio3/</url>
      <content type="html"><![CDATA[<h1><span id="java-nio-channel">java NIO channel</span></h1><p>&emsp;&emsp; When it comes to NIO, the first New concept we approach is channel, we operate data by using it instead of stream in traditional IO.</p>
<h1><span id="the-introduce-of-channel">The introduce of channel</span></h1><h2><span id="what-is-channel">What is channel?</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channels is the second invocation of java NIO, they used to transmit data to the corresponding entity in both sides of the channel. Channels are gateways through which the native I/O services of the operating system can be accessed with a minimum of overhead, and buffers are the internal endpoints used by channels to send and receive data.</p>
<h2><span id="the-feature-of-channel">The feature of channel</span></h2><blockquote>
<p>1.channel both can read data also can write data<br>2.channel can read or write data from asynchronous<br>3.channel must have a buffer to transmit data</p>
</blockquote>
<h2><span id="the-family-of-channel">The family of channel</span></h2><p>java.nio.channels.Channel 接口：</p>
<blockquote>
<pre><code>|--FileChannel
|--SocketChannel
|--ServerSocketChannel
|--DatagramChannel
</code></pre></blockquote>
<p><img src="/media/15129757112556.jpg" alt=""></p>
<h1><span id="the-use-of-channel">The use of channel</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the above, we know about what is channel roughly. Now, we tell channel by using it.</p>
<h2><span id="copy-file-by-channel">Copy file by channel</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//Getting channel</span></span><br><span class="line">		FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">		FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>);</span><br><span class="line">			fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"2.txt"</span>);</span><br><span class="line">			</span><br><span class="line">			inChannel = fis.getChannel();</span><br><span class="line">			outChannel = fos.getChannel();</span><br><span class="line">			<span class="comment">//allocate specified size buffer</span></span><br><span class="line">			ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//Getting data from channel, and storage it in buffer </span></span><br><span class="line">			<span class="keyword">while</span>(inChannel.read(buf) != -<span class="number">1</span>)&#123;</span><br><span class="line">				buf.flip(); <span class="comment">//Flips this buffer</span></span><br><span class="line">				<span class="comment">//write the data in the buffer into the channel</span></span><br><span class="line">				outChannel.write(buf);</span><br><span class="line">				<span class="comment">//clear buffer, The position is set to zero, the limit is set to the capacity</span></span><br><span class="line">				buf.clear(); </span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//handle corresponding exception</span></span><br><span class="line">		&#125;</span><br><span class="line">				</span><br><span class="line">	&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; above the code, we get corresponding stream from File stream, then we write data to FileOutputStream. Now, we detail some of these method. `FileChannelImpl.open` will create corresponding instance.</span><br><span class="line"></span><br><span class="line"># A set of method of channel</span><br><span class="line">## getChannel()</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `getChannel`method will Returns the unique FileChannel object associated with <span class="keyword">this</span> file input stream.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The initial &#123;<span class="doctag">@link</span> java.nio.channels.FileChannel#position()</span></span><br><span class="line"><span class="comment">     * position&#125; of the returned channel will be equal to the</span></span><br><span class="line"><span class="comment">     * number of bytes read from the file so far.  Reading bytes from this</span></span><br><span class="line"><span class="comment">     * stream will increment the channel's position.  Changing the channel's</span></span><br><span class="line"><span class="comment">     * position, either explicitly or by reading, will change this stream's</span></span><br><span class="line"><span class="comment">     * file position.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the file channel associated with this file input stream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileChannel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                channel = FileChannelImpl.open(fd, path, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> channel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="read-bytebuffer-dst">read(ByteBuffer dst)</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <code>read</code> is abstract method, it will read a sequence of bytes from this channel into the given buffer. Bytes are read starting at this channel’s current file position, and then file position is updated with the number of bytes actually read.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public int read(ByteBuffer dst) throws IOException &#123;</span><br><span class="line">       ensureOpen();</span><br><span class="line">       if (!readable)</span><br><span class="line">           throw new NonReadableChannelException();</span><br><span class="line">       synchronized (positionLock) &#123;</span><br><span class="line">           int n = 0;</span><br><span class="line">           int ti = -1;</span><br><span class="line">           try &#123;</span><br><span class="line">               begin();</span><br><span class="line">               ti = threads.add();</span><br><span class="line">               if (!isOpen())</span><br><span class="line">                   return 0;</span><br><span class="line">               do &#123;</span><br><span class="line">                   n = IOUtil.read(fd, dst, -1, nd);</span><br><span class="line">              &#125; while ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen());</span><br><span class="line">               return IOStatus.normalize(n);</span><br><span class="line">           &#125; finally &#123;</span><br><span class="line">               threads.remove(ti);</span><br><span class="line">               end(n &gt; 0);</span><br><span class="line">               assert IOStatus.check(n);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="write-bytebuffer-src">write(ByteBuffer src)</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Writes a sequence of bytes to this channel from given buffer. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      ensureOpen();</span><br><span class="line">      <span class="keyword">if</span> (!writable)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> NonWritableChannelException();</span><br><span class="line">      <span class="keyword">synchronized</span> (positionLock) &#123;</span><br><span class="line">          <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">int</span> ti = -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              begin();</span><br><span class="line">              ti = threads.add();</span><br><span class="line">              <span class="keyword">if</span> (!isOpen())</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">do</span> &#123;</span><br><span class="line">                  n = IOUtil.write(fd, src, -<span class="number">1</span>, nd);</span><br><span class="line">              &#125; <span class="keyword">while</span> ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen());</span><br><span class="line">              <span class="keyword">return</span> IOStatus.normalize(n);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              threads.remove(ti);</span><br><span class="line">              end(n &gt; <span class="number">0</span>);</span><br><span class="line">              <span class="keyword">assert</span> IOStatus.check(n);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO buffer]]></title>
      <url>/2017/12/10/NIO/nio2/</url>
      <content type="html"><![CDATA[<h1><span id="java-nio-buffer">java NIO buffer</span></h1><p>&emsp;&emsp; A buffer Object is a container of a fixed amount of data, it acts as a block or staging area, where data can be stored and later retrieved.<strong>Buffers work hand in glove with channels</strong>, Channels are portals through which i/o transfers take place, and buffers are the sources or targets of those data transfers.</p>
<h2><span id="the-family-of-buffer-in-java-nio">The family of buffer in java nio</span></h2><p><img src="/media/15129174785464.jpg" alt=""></p>
<p>&emsp;&emsp; From the system diagram, we can find each of the basic data types has their own corresponding buffer class. as follows:</p>
<hr>
<blockquote>
<p>ByteBuffer<br>shortBuffer<br>CharBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer<br>MappedByteBuffer</p>
</blockquote>
<h2><span id="attributes">Attributes</span></h2><p>&emsp;&emsp; Buffer is mainly has four attributes</p>
<p><strong>Capacity:</strong>  The maximum number of data elements the buffer can hold. The capacity is set when the buffer is created and can never be changed.</p>
<p><strong>Limit:</strong>  The first element of the buffer that should not be read or written. In other words, the count of live elements in the buffer.</p>
<p><strong>Position:</strong>The index of next element to be read or written. The position is updated automatically by <code>get()</code> and <code>put()</code> methods.</p>
<p><strong>Mark:</strong> A remembered position,<code>Mark()</code> and reset() are used together. when we use <code>Mark()</code>, we will record the position so that calling <code>reset()</code> sets <code>position = mark</code></p>
<p>The following relationship between these four attributes always holds:</p>
<p style="text-align: center">0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</p>

<p><img src="/media/15129175076144.jpg" alt=""></p>
<h2><span id="buffer-interface">Buffer interface</span></h2><p><img src="/media/15129175281981.jpg" alt=""></p>
<h2><span id="the-usage-of-buffer">The Usage of Buffer</span></h2><p>&emsp;&emsp; Now, i show how to use it and explain the source code through it’s the implementation class — ByteBuffer</p>
<h3><span id="the-constructor-of-it">The constructor of it</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer(int mark, int pos, int lim, int cap, byte[] hb, int offset)</span><br><span class="line"> &#123;</span><br><span class="line">     super(mark, pos, lim, cap);</span><br><span class="line">     this.hb = hb;</span><br><span class="line">     this.offset = offset;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">     // Creates a new buffer with the given mark, position, limit, and capacity</span><br><span class="line"> ByteBuffer(int mark, int pos, int lim, int cap) &#123;         this(mark, pos, lim, cap, null, 0);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> &emsp;&emsp;&emsp;  we can find the core of it invoke the superclass, at first we see the parent class constructor. it easy to find the superclass is <code>Buffer</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Buffer(<span class="keyword">int</span> mark, <span class="keyword">int</span> pos, <span class="keyword">int</span> lim, <span class="keyword">int</span> cap) &#123;      </span><br><span class="line">        <span class="keyword">if</span> (cap &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Negative capacity: "</span> + cap);</span><br><span class="line">        <span class="keyword">this</span>.capacity = cap;</span><br><span class="line">        limit(lim);</span><br><span class="line">        position(pos);</span><br><span class="line">        <span class="keyword">if</span> (mark &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mark &gt; pos)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"mark &gt; position: ("</span></span><br><span class="line">                                                   + mark + <span class="string">" &gt; "</span> + pos + <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">this</span>.mark = mark;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this buffer's limit.  If the position is larger than the new limit</span></span><br><span class="line"><span class="comment">     * then it is set to the new limit.  If the mark is defined and larger than</span></span><br><span class="line"><span class="comment">     * the new limit then it is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  newLimit</span></span><br><span class="line"><span class="comment">     *         The new limit value; must be non-negative</span></span><br><span class="line"><span class="comment">     *         and no larger than this buffer's capacity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the preconditions on &lt;tt&gt;newLimit&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(<span class="keyword">int</span> newLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((newLimit &gt; capacity) || (newLimit &lt; <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        limit = newLimit;</span><br><span class="line">        <span class="keyword">if</span> (position &gt; limit) position = limit;</span><br><span class="line">        <span class="keyword">if</span> (mark &gt; limit) mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this buffer's position.  If the mark is defined and larger than the</span></span><br><span class="line"><span class="comment">     * new position then it is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  newPosition</span></span><br><span class="line"><span class="comment">     *         The new position value; must be non-negative</span></span><br><span class="line"><span class="comment">     *         and no larger than the current limit</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the preconditions on &lt;tt&gt;newPosition&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((newPosition &gt; limit) || (newPosition &lt; <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        position = newPosition;</span><br><span class="line">        <span class="keyword">if</span> (mark &gt; position) mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this constructor, Main purpose is to give the corresponding handle to set the appropriate attribute values through the way of refs, these attributes was introduced in the above. Each method of them has corresponding judgment whether the property value whether meet the conditions. if not, it will throws corresponding exception.</p>
<h3><span id="allocate-a-specify-memory-space">allocate a specify memory space</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//allocate a specify memory space</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">0</span><br><span class="line">1024</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the beginning of allocate a memory space to buffer, we can find the property value of <code>position</code> is 0, property values of <code>limit</code> and <code>capacity</code> is the value of the incoming.</p>
<h3><span id="buffer-after-five-put-s">Buffer after five put( )s</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"Hello"</span>;</span><br><span class="line">      <span class="comment">//put data in the buffer</span></span><br><span class="line">buf.put(str.getBytes());</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">5</span><br><span class="line">1024</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Follow the above code, I convert a string into a byte array and store it the <code>buf</code> instance. From the result, we can find the <code>position</code> has some change, limit and capacity don’t have any change. The model is shown.<br><img src="/media/15129175579354.jpg" alt=""></p>
<h3><span id="switch-to-read-data-mode">Switch to Read data mode</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Continuing to follow the above code, we begin to read the data which we put in the above. At first we switch to read data mode by calling the <code>flip()</code> method. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf.flip();</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">5</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Flips this buffer. The <code>limit</code> is set to the current <code>position</code> and then the <code>position</code> is set to zero. If the mark is defined then it is discarded.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; After invoking the <code>flip()</code>, we begin to read the data in the buffer. </p>
<h3><span id="read-data-from-buffer">Read data from buffer</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line">buf.get(dst);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(dst, <span class="number">0</span>, dst.length));</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  From the code, we can find we build a byte array to read data from buffer. after reading it, The property value of position changed. The principle of it is after we invoke the <code>get()</code> method It can read the Reads the byte at this buffer’s current position, and then increments the position. The process of <code>get()</code> method is in its implementation class.</p>
<h3><span id="rewinds-this-buffer">Rewinds this buffer</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      position = <span class="number">0</span>;</span><br><span class="line">      mark = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The position is set to zero and the mark is discarded. Invoking this method before a sequence of channel-write or get operations, assuming that the limit has already been set appropriately.</p>
<h3><span id="clears-this-buffer">Clears this buffer</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The position is set to zero, the limit is set to the capacity, and the mark is discarded.This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="hasremaining">hasRemaining()</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tells whether there are any elements between the current position and the limit. if true, there is at least one element remaining in this buffer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final boolean hasRemaining() &#123;</span><br><span class="line">      return position &lt; limit;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="the-compare-buffers">The Compare Buffers</span></h2><h3><span id="direct-byte-buffers">Direct byte buffers</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Direct byte buffers are usually the best choice for I/O operations. By design, they support the most efficient I/O mechanism available to the JVM.Direct buffers are optimal for I/O, but they may be more expensive to create than non direct byte buffers. The memory used by direct buffers is allocated by calling through to native, operating system-specific code, by passing the standard JVM heap. Setting up and tearing down direct buffers could be significantly more expensive than heap-resident buffers, depending on the host operating system and JVM implementation. The memory-storage areas of direct buffers are not subject to garbage collection because they are outside the standard JVM heap.      </p><p style="text-align: right;">—reference O’reilly java NIO </p><br><img src="/media/15129175838229.jpg" alt=""><p></p>
<h4><span id="the-method-of-creation">The Method of creation</span></h4><p><code>static ByteBuffer allocateDirect(int capacity)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new direct byte buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment"> * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment"> * initialized to zero.  Whether or not it has a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #hasArray backing array&#125; is unspecified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment"> *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(int cap) &#123;                   // package-private</span><br><span class="line"></span><br><span class="line">    super(-1, 0, cap, cap);</span><br><span class="line">    boolean pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    int ps = Bits.pageSize();</span><br><span class="line">    long size = Math.max(1L, (long)cap + (pa ? ps : 0));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    long base = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; catch (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        throw x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (byte) 0);</span><br><span class="line">    if (pa &amp;&amp; (base % ps != 0)) &#123;</span><br><span class="line">        // Round up to page boundary</span><br><span class="line">        address = base + ps - (base &amp; (ps - 1));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(this, new Deallocator(base, size, cap));</span><br><span class="line">    att = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="non-direct-byte-buffers">Non direct byte buffers</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Non direct byte buffers can be passed to channels, but doing so may incur a performance penalty. It’s usually not possible for a non direct buffer to be the target of a native I/O operation. If you pass a non direct ByteBuffer object to a channel for write, the channel may implicitly do the following on each call:</p>
<blockquote>
<ol>
<li>Create a temporary direct ByteBuffer object.</li>
<li>Copy the content of the non direct buffer to the temporary buffer.</li>
<li>Perform the low-level I/O operation using the temporary buffer.</li>
<li>The temporary buffer object goes out of scope and is eventually garbage collected. </li>
</ol>
</blockquote>
<p style="text-align: right;">—reference O‘reilly java NIO </p>


<p><img src="/media/15129176007588.jpg" alt=""></p>
<h4><span id="the-method-of-creation">The Method of creation</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Allocates a new byte buffer.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment">  * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment">  * initialized to zero.  It will have a &#123;<span class="doctag">@link</span> #array backing array&#125;,</span></span><br><span class="line"><span class="comment">  * and its &#123;<span class="doctag">@link</span> #arrayOffset array offset&#125; will be zero.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment">  *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">  *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(capacity, capacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HeapByteBuffer(int cap, int lim) &#123;           </span><br><span class="line"></span><br><span class="line">    super(-1, 0, lim, cap, new byte[cap], 0);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeapByteBuffer(byte[] buf, int off, int len) &#123;</span><br><span class="line"></span><br><span class="line">    super(-1, off, off + len, buf.length, buf, 0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected HeapByteBuffer(byte[] buf,</span><br><span class="line">                               int mark, int pos, int lim, int cap,</span><br><span class="line">                               int off) &#123;</span><br><span class="line">    super(mark, pos, lim, cap, buf, off);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We can see it invoke superclass’s constructor, so its data will store in the Heap.</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The introduce of NIO]]></title>
      <url>/2017/12/09/NIO/nio1/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-nio">The introduce of NIO</span></h1><h2><span id="what-is-nio">What is NIO？</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  java.nio (non-blocking I/O) is a collection of Java programming language APIs that offer features for intensive I/O operations. It was introduced with the J2SE 1.4 release of Java by Sun Microsystems to complement an existing standard I/O   </p>
<p style="text-align: right;">—reference wiki</p>

<h2><span id="the-compare-between-nio-and-io">The compare between NIO and IO</span></h2><table>
<thead>
<tr>
<th>IO</th>
<th>NIO</th>
</tr>
</thead>
<tbody>
<tr>
<td>Stream Oriented</td>
<td>Buffer Oriented</td>
</tr>
<tr>
<td>Blocking IO</td>
<td>Non Blocking IO</td>
</tr>
<tr>
<td></td>
<td>Selectors</td>
</tr>
</tbody>
</table>
<h2><span id="the-function-of-nio">The function of NIO</span></h2><p>&emsp;&emsp; When it comes to NIO, we should what is IO. In the traditional IO, we read or store data in the form of stream, so it is easy to cause obstruction that we difficult calls in multiple threads.But in NIO,The problem has a good way to solve it, the way is that we convey information by channel. in the channel, we can construct the corresponding buffer to transfer data. so we can say it is base on <strong>Buffer Oriented</strong>.</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(九) 多租户]]></title>
      <url>/2017/07/30/ofbiz/ofbiz9/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">   * 设置完整的delegator  其可能形式有 default 或者defalut#tenantDelegatorName</span></span><br><span class="line"><span class="comment">   * 针对于第一种情况 delegatorBaseName =="default" delegatorTenantId=null</span></span><br><span class="line"><span class="comment">   * 针对第二种情况 delegatorBaseName =="default"  delegatorTenantId="tenantDelegatorName"</span></span><br><span class="line"><span class="comment">   * 为什么存在第二种情况，是因为在多租户中要实现数据独立，所以获取基础delagtor 和租户delegator,注意这时并未创建实例更没有建立数据库连接</span></span><br><span class="line"><span class="comment">   * 其再获取了默认的delegator中的信息之后，如果存在delegatorBaseName 则将 uri username password进行覆盖</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDelegatorNames</span><span class="params">(String delegatorFullName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.delegatorFullName = delegatorFullName;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> hashSymbolIndex = delegatorFullName.indexOf(<span class="string">'#'</span>);</span><br><span class="line">      <span class="keyword">if</span> (hashSymbolIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.delegatorBaseName = delegatorFullName;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.delegatorBaseName = delegatorFullName.substring(<span class="number">0</span>, hashSymbolIndex);</span><br><span class="line">          <span class="keyword">this</span>.delegatorTenantId = delegatorFullName.substring(hashSymbolIndex + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多租户 根据默认baseDelegator获取域名对应TenantId 拼接DelegatorName获取其实例</span></span><br><span class="line"><span class="keyword">if</span> (useMultitenant) &#123;</span><br><span class="line">            <span class="comment">// get tenant delegator by domain name，获取服务名</span></span><br><span class="line">            String serverName = httpRequest.getServerName();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            	</span><br><span class="line">                <span class="comment">// if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute</span></span><br><span class="line">                Delegator delegator = getDelegator(config.getServletContext());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Use base delegator for fetching data from entity of entityGroup com.hanlin.fadp.tenant </span></span><br><span class="line">                Delegator baseDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName());</span><br><span class="line">                GenericValue tenantDomainName = EntityQuery.use(baseDelegator).from(<span class="string">"TenantDomainName"</span>).where(<span class="string">"domainName"</span>, serverName).queryOne();</span><br><span class="line">                String tenantId = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(UtilValidate.isNotEmpty(tenantDomainName)) &#123;</span><br><span class="line">                    tenantId = tenantDomainName.getString(<span class="string">"tenantId"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(UtilValidate.isEmpty(tenantId)) &#123;</span><br><span class="line">                    tenantId = (String) httpRequest.getAttribute(<span class="string">"userTenantId"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(UtilValidate.isEmpty(tenantId)) &#123;</span><br><span class="line">                    tenantId = (String) httpRequest.getParameter(<span class="string">"userTenantId"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (UtilValidate.isNotEmpty(tenantId)) &#123;</span><br><span class="line">                    <span class="comment">// if the request path is a root mount then redirect to the initial path</span></span><br><span class="line">                    <span class="keyword">if</span> (UtilValidate.isNotEmpty(requestPath) &amp;&amp; requestPath.equals(contextUri)) &#123;</span><br><span class="line">                        GenericValue tenant = EntityQuery.use(baseDelegator).from(<span class="string">"Tenant"</span>).where(<span class="string">"tenantId"</span>, tenantId).queryOne();</span><br><span class="line">                        String initialPath = tenant.getString(<span class="string">"initialPath"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (UtilValidate.isNotEmpty(initialPath) &amp;&amp; !<span class="string">"/"</span>.equals(initialPath)) &#123;</span><br><span class="line">                            ((HttpServletResponse)response).sendRedirect(initialPath);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// make that tenant active, setup a new delegator and a new dispatcher</span></span><br><span class="line">                    String tenantDelegatorName = delegator.getDelegatorBaseName() + <span class="string">"#"</span> + tenantId;</span><br><span class="line">                    httpRequest.getSession().setAttribute(<span class="string">"delegatorName"</span>, tenantDelegatorName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// after this line the delegator is replaced with the new per-tenant delegator</span></span><br><span class="line">                    delegator = DelegatorFactory.getDelegator(tenantDelegatorName);</span><br><span class="line">                    config.getServletContext().setAttribute(<span class="string">"delegator"</span>, delegator);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// clear web context objects</span></span><br><span class="line">                    config.getServletContext().setAttribute(<span class="string">"security"</span>, <span class="keyword">null</span>);</span><br><span class="line">                    config.getServletContext().setAttribute(<span class="string">"dispatcher"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 初始化security，根据delegatorName先从缓存中获取，如果缓存中不存在对应的security，则实例化一个</span></span><br><span class="line"><span class="comment">                     * 由于该过滤器是每次请求都会经过，所以根据域名不同，获取的security就有所不同，这样就可以实现共用一套用户表在不同租户中权限不同</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    Security security = getSecurity();</span><br><span class="line">                    <span class="comment">// initialize the services dispatcher</span></span><br><span class="line">                    LocalDispatcher dispatcher = getDispatcher(config.getServletContext());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// set web context objects</span></span><br><span class="line">                    request.setAttribute(<span class="string">"dispatcher"</span>, dispatcher);</span><br><span class="line">                    request.setAttribute(<span class="string">"security"</span>, security);</span><br><span class="line">                    </span><br><span class="line">                    request.setAttribute(<span class="string">"userTenantId"</span>, tenantId);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// NOTE DEJ20101130: do NOT always put the delegator name in the user's session because the user may </span></span><br><span class="line">                <span class="comment">// have logged in and specified a tenant, and even if no Tenant record with a matching domainName field </span></span><br><span class="line">                <span class="comment">// is found this will change the user's delegator back to the base one instead of the one for the </span></span><br><span class="line">                <span class="comment">// tenant specified on login </span></span><br><span class="line">                <span class="comment">// httpRequest.getSession().setAttribute("delegatorName", delegator.getDelegatorName());</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (GenericEntityException e) &#123;</span><br><span class="line">                Debug.logWarning(e, <span class="string">"Unable to get Tenant没有获取这个租户"</span>, <span class="keyword">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(八) 创建表]]></title>
      <url>/2017/07/30/ofbiz/ofbiz8/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.检验实体是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.检验视图实体是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.获取数据库连接</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.根据对应的ModelEntity来创建表 其中modelEntities是关系表的集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createTable</span><span class="params">(ModelEntity entity, Map&lt;String, ModelEntity&gt; modelEntities, <span class="keyword">boolean</span> addFks)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (entity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ModelEntity was null and is required to create a table ModelEntity是空，不能创建表"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (entity <span class="keyword">instanceof</span> ModelViewEntity) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ERROR: Cannot create table for a view entity 不能为视图实体创建表"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = getConnection();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        String errMsg = <span class="string">"在建表过程中Unable to establish a connection with the database for helperName ["</span> + <span class="keyword">this</span>.helperInfo.getHelperFullName() + <span class="string">"]... Error was: "</span> + e.toString();</span><br><span class="line">        Debug.logError(e, errMsg, <span class="keyword">module</span>);</span><br><span class="line">        <span class="keyword">return</span> errMsg;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (GenericEntityException e) &#123;</span><br><span class="line">        String errMsg = <span class="string">"在建表过程中 Unable to establish a connection with the database for helperName ["</span> + <span class="keyword">this</span>.helperInfo.getHelperFullName() + <span class="string">"]... Error was: "</span> + e.toString();</span><br><span class="line">        Debug.logError(e, errMsg, <span class="keyword">module</span>);</span><br><span class="line">        <span class="keyword">return</span> errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sqlBuf = <span class="keyword">new</span> StringBuilder(<span class="string">"CREATE TABLE "</span>);</span><br><span class="line">    sqlBuf.append(entity.getTableName(<span class="keyword">this</span>.datasourceInfo));</span><br><span class="line">    sqlBuf.append(<span class="string">" ("</span>);</span><br><span class="line">    Iterator&lt;ModelField&gt; fieldIter = entity.getFieldsIterator();</span><br><span class="line">    <span class="keyword">while</span> (fieldIter.hasNext()) &#123;</span><br><span class="line">        ModelField field = fieldIter.next();</span><br><span class="line">        ModelFieldType type = modelFieldTypeReader.getModelFieldType(field.getType());</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Field type ["</span> + type + <span class="string">"] not found for field ["</span> + field.getName() + <span class="string">"] of entity ["</span> + entity.getEntityName() + <span class="string">"], not creating table."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlBuf.append(field.getColName());</span><br><span class="line">        sqlBuf.append(<span class="string">" "</span>);</span><br><span class="line">        sqlBuf.append(type.getSqlType());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"String"</span>.equals(type.getJavaType()) || <span class="string">"java.lang.String"</span>.equals(type.getJavaType())) &#123;</span><br><span class="line">            <span class="comment">// if there is a characterSet, add the CHARACTER SET arg here</span></span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.datasourceInfo.getCharacterSet())) &#123;</span><br><span class="line">                sqlBuf.append(<span class="string">" CHARACTER SET "</span>);</span><br><span class="line">                sqlBuf.append(<span class="keyword">this</span>.datasourceInfo.getCharacterSet());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if there is a collate, add the COLLATE arg here</span></span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.datasourceInfo.getCollate())) &#123;</span><br><span class="line">                sqlBuf.append(<span class="string">" COLLATE "</span>);</span><br><span class="line">                sqlBuf.append(<span class="keyword">this</span>.datasourceInfo.getCollate());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field.getIsNotNull() || field.getIsPk()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.datasourceInfo.getAlwaysUseConstraintKeyword()) &#123;</span><br><span class="line">                sqlBuf.append(<span class="string">" CONSTRAINT NOT NULL, "</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sqlBuf.append(<span class="string">" NOT NULL, "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sqlBuf.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String pkName = makePkConstraintName(entity, <span class="keyword">this</span>.datasourceInfo.getConstraintNameClipLength());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.datasourceInfo.getUsePkConstraintNames()) &#123;</span><br><span class="line">        sqlBuf.append(<span class="string">"CONSTRAINT "</span>);</span><br><span class="line">        sqlBuf.append(pkName);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlBuf.append(<span class="string">" PRIMARY KEY ("</span>);</span><br><span class="line">    entity.colNameString(entity.getPkFieldsUnmodifiable(), sqlBuf, <span class="string">""</span>);</span><br><span class="line">    sqlBuf.append(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addFks) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> This is kind of a bad idea anyway since ordering table creations is crazy, if not impossible</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// go through the relationships to see if any foreign keys need to be added</span></span><br><span class="line">        Iterator&lt;ModelRelation&gt; relationsIter = entity.getRelationsIterator();</span><br><span class="line">        <span class="keyword">while</span> (relationsIter.hasNext()) &#123;</span><br><span class="line">            ModelRelation modelRelation = relationsIter.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"one"</span>.equals(modelRelation.getType())) &#123;</span><br><span class="line">                ModelEntity relModelEntity = modelEntities.get(modelRelation.getRelEntityName());</span><br><span class="line">                <span class="keyword">if</span> (relModelEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Debug.logError(<span class="string">"Error adding foreign key: ModelEntity was null for related entity name "</span> + modelRelation.getRelEntityName(), <span class="keyword">module</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (relModelEntity <span class="keyword">instanceof</span> ModelViewEntity) &#123;</span><br><span class="line">                    Debug.logError(<span class="string">"Error adding foreign key: related entity is a view entity for related entity name "</span> + modelRelation.getRelEntityName(), <span class="keyword">module</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String fkConstraintClause = makeFkConstraintClause(entity, modelRelation, relModelEntity, <span class="keyword">this</span>.datasourceInfo.getConstraintNameClipLength(), <span class="keyword">this</span>.datasourceInfo.getFkStyle(), <span class="keyword">this</span>.datasourceInfo.getUseFkInitiallyDeferred());</span><br><span class="line">                <span class="keyword">if</span> (UtilValidate.isNotEmpty(fkConstraintClause)) &#123;</span><br><span class="line">                    sqlBuf.append(<span class="string">", "</span>);</span><br><span class="line">                    sqlBuf.append(fkConstraintClause);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlBuf.append(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if there is a tableType, add the TYPE arg here</span></span><br><span class="line">    <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.datasourceInfo.getTableType())) &#123;</span><br><span class="line">     <span class="comment">// jaz:20101229 - This appears to be only used by mysql and now mysql has</span></span><br><span class="line">        <span class="comment">// deprecated (and in 5.5.x removed) the use of the TYPE keyword. This is</span></span><br><span class="line">        <span class="comment">// changed to ENGINE which is supported starting at 4.1</span></span><br><span class="line">        sqlBuf.append(<span class="string">" ENGINE "</span>);</span><br><span class="line">        <span class="comment">//sqlBuf.append(" TYPE ");</span></span><br><span class="line">        sqlBuf.append(<span class="keyword">this</span>.datasourceInfo.getTableType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if there is a characterSet, add the CHARACTER SET arg here</span></span><br><span class="line">    <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.datasourceInfo.getCharacterSet())) &#123;</span><br><span class="line">        sqlBuf.append(<span class="string">" CHARACTER SET "</span>);</span><br><span class="line">        sqlBuf.append(<span class="keyword">this</span>.datasourceInfo.getCharacterSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if there is a collate, add the COLLATE arg here</span></span><br><span class="line">    <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.datasourceInfo.getCollate())) &#123;</span><br><span class="line">        sqlBuf.append(<span class="string">" COLLATE "</span>);</span><br><span class="line">        sqlBuf.append(<span class="keyword">this</span>.datasourceInfo.getCollate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Debug.verboseOn()) Debug.logVerbose(<span class="string">"[createTable] sql="</span> + sqlBuf.toString(), <span class="keyword">module</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt = connection.createStatement();</span><br><span class="line">        stmt.executeUpdate(sqlBuf.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SQL Exception while executing the following:\n"</span> + sqlBuf.toString() + <span class="string">"\nError was: "</span> + e.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(七) 检查数据源]]></title>
      <url>/2017/07/30/ofbiz/ofbiz7/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check the datasource to make sure the entity definitions are correct, optionally adding missing entities or fields on the server</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> modelEntities Map of entityName names and ModelEntity values</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> messages List to put any result messages in</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> addMissing Flag indicating whether or not to add missing entities and fields on the server</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 检查数据源确保实体正确定义,选择性添加没有的实体和字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkDataSource</span><span class="params">(Map&lt;String, ModelEntity&gt; modelEntities, List&lt;String&gt; messages, <span class="keyword">boolean</span> addMissing)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        genericDAO.checkDb(modelEntities, messages, addMissing);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>值得一提helper的实例化的是GenericHelperDAO 所以checkDb调用的是GenericHeleper中的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>  郑小康</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.从缓存中获取helperFullName的GenericHelper</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 2.如果为空根据helperBaseName(localmysql)获取Datasource标签实例</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 3.根据Datasource标签的helperClass,创造构造器,构建对应实例</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 4.以HelperFullName为k 实例为v存入到缓存</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 5.返回当前实例化的GenericHelper</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GenericHelper <span class="title">getHelper</span><span class="params">(GenericHelperInfo helperInfo)</span> </span>&#123;</span><br><span class="line">       GenericHelper helper = helperCache.get(helperInfo.getHelperFullName());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123; <span class="comment">// don't want to block here</span></span><br><span class="line">           <span class="keyword">synchronized</span> (GenericHelperFactory.class) &#123;</span><br><span class="line">               <span class="comment">// must check if null again as one of the blocked threads can still enter</span></span><br><span class="line">               helper = helperCache.get(helperInfo.getHelperFullName());</span><br><span class="line">               <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Datasource datasourceInfo = EntityConfig.getDatasource(helperInfo.getHelperBaseName());</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (datasourceInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find datasource definition with name "</span> + helperInfo.getHelperBaseName());</span><br><span class="line">                       &#125;</span><br><span class="line">                       String helperClassName = datasourceInfo.getHelperClass();</span><br><span class="line">                       Class&lt;?&gt; helperClass = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (UtilValidate.isNotEmpty(helperClassName)) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">                               helperClass = loader.loadClass(helperClassName);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                               Debug.logWarning(e, <span class="keyword">module</span>);</span><br><span class="line">                               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class \""</span> + helperClassName + <span class="string">"\": "</span> + e.getMessage());</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       Class&lt;?&gt;[] paramTypes = <span class="keyword">new</span> Class&lt;?&gt;[] &#123;GenericHelperInfo.class&#125;;</span><br><span class="line">                       Object[] params = <span class="keyword">new</span> Object[] &#123;helperInfo&#125;;</span><br><span class="line"></span><br><span class="line">                       java.lang.reflect.Constructor&lt;?&gt; helperConstructor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (helperClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               helperConstructor = helperClass.getConstructor(paramTypes);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                               Debug.logWarning(e, <span class="keyword">module</span>);</span><br><span class="line">                               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class \""</span> + helperClassName + <span class="string">"\": "</span> + e.getMessage());</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           helper = (GenericHelper) helperConstructor.newInstance(params);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                           Debug.logWarning(e, <span class="keyword">module</span>);</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class \""</span> + helperClassName + <span class="string">"\": "</span> + e.getMessage());</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                           Debug.logWarning(e, <span class="keyword">module</span>);</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class \""</span> + helperClassName + <span class="string">"\": "</span> + e.getMessage());</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (java.lang.reflect.InvocationTargetException e) &#123;</span><br><span class="line">                           Debug.logWarning(e, <span class="keyword">module</span>);</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class \""</span> + helperClassName + <span class="string">"\": "</span> + e.getMessage());</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (helper != <span class="keyword">null</span>)</span><br><span class="line">                           helperCache.put(helperInfo.getHelperFullName(), helper);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">                       Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error loading GenericHelper class: "</span> + e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> helper;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(六) GenericHelper的初始化创建]]></title>
      <url>/2017/07/30/ofbiz/ofbiz6/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.根据groupName获取GenericHelperInfo</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 2.获取GenericHelperInfo的helperBaseName</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 3.如果HelperFullName不为空,则进行下面的操作 HelperFullName可能是default,也可能是default#tenantId</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 4.根据helperBaseName(localmysql),获取对应的ModelFieldTypeReader 字段类型阅读器,这个是为了在建表的时候的创建对应字段类型</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 5.根据helperInfo通过GenericHelperFactory工厂获取GenericHelper,实际是GenericHelperDAO</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 6.根据helperBaseName获取对应的Datasource标签实例</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 7.根据GenericHelper所构建的实例,调用其checkDataSource检查数据源,向其中添加未添加的表和字段</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeOneGenericHelper</span><span class="params">(String groupName)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//根据groupName获取GenericHelperInfo</span></span><br><span class="line">       GenericHelperInfo helperInfo = <span class="keyword">this</span>.getGroupHelperInfo(groupName);</span><br><span class="line">       <span class="keyword">if</span> (helperInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (Debug.infoOn()) &#123;</span><br><span class="line">               Debug.logInfo(<span class="string">"Delegator \""</span> + delegatorFullName + <span class="string">"\" NOT initializing helper for entity group \""</span> + groupName + <span class="string">"\" because the group is not associated to this delegator."</span>, <span class="keyword">module</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       String helperBaseName = helperInfo.getHelperBaseName();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (Debug.infoOn()) &#123;</span><br><span class="line">           Debug.logInfo(<span class="string">"Delegator \""</span> + delegatorFullName + <span class="string">"\" initializing helper \""</span> + helperBaseName + <span class="string">"\" for entity group \""</span> + groupName + <span class="string">"\"."</span>, <span class="keyword">module</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (UtilValidate.isNotEmpty(helperInfo.getHelperFullName())) &#123;</span><br><span class="line">           <span class="comment">// pre-load field type defs, the return value is ignored</span></span><br><span class="line">           ModelFieldTypeReader.getModelFieldTypeReader(helperBaseName);</span><br><span class="line">           <span class="comment">// get the helper and if configured, do the datasource check</span></span><br><span class="line">           GenericHelper helper = GenericHelperFactory.getHelper(helperInfo);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Datasource datasource = EntityConfig.getDatasource(helperBaseName);</span><br><span class="line">               <span class="keyword">if</span> (datasource.getCheckOnStart()) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (Debug.infoOn()) &#123;</span><br><span class="line">                       Debug.logInfo(<span class="string">"Doing database check as requested in entityengine.xml with addMissing="</span> + datasource.getAddMissingOnStart(), <span class="keyword">module</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   helper.checkDataSource(<span class="keyword">this</span>.getModelEntityMapByGroup(groupName), <span class="keyword">null</span>, datasource.getAddMissingOnStart());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (GenericEntityException e) &#123;</span><br><span class="line">               Debug.logWarning(e, e.getMessage(), <span class="keyword">module</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> Callable&lt;Void&gt; <span class="title">createHelperCallable</span><span class="params">(<span class="keyword">final</span> String groupName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               initializeOneGenericHelper(groupName);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(五) ModelGroupReader]]></title>
      <url>/2017/07/30/ofbiz/ofbiz5/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelGroupReader</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">module</span> = ModelGroupReader.class.getName();</span><br><span class="line">    <span class="comment">//缓存所有ModelGroupReader,其k是entity-group-reader属性值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UtilCache&lt;String, ModelGroupReader&gt; readers = UtilCache.createUtilCache(<span class="string">"entity.ModelGroupReader"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; groupCache = <span class="keyword">null</span>;<span class="comment">//以entityName为k groupName为v</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; groupNames = <span class="keyword">null</span>;<span class="comment">//delegator所有的组名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String modelName;<span class="comment">//entity-group-reader属性值</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ResourceHandler&gt; entityGroupResourceHandlers = <span class="keyword">new</span> LinkedList&lt;ResourceHandler&gt;();<span class="comment">//存放像entity-resource这样标签实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 1.获取当前delegatorName的delegator标签的DelegatorElement实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.获取delegator的entity-group-reader属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.根据属性值获取ModelGroupReader</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.如果没有获取到根据delegatorName和entity-group-reader属性值构造一个ModelGroupReader实例,具体过程就在本类中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModelGroupReader <span class="title">getModelGroupReader</span><span class="params">(String delegatorName)</span> <span class="keyword">throws</span> GenericEntityConfException </span>&#123;</span><br><span class="line">        DelegatorElement delegatorInfo = EntityConfig.getInstance().getDelegator(delegatorName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delegatorInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"不能发现叫做"</span> + delegatorName+<span class="string">"的delegator"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String tempModelName = delegatorInfo.getEntityGroupReader();</span><br><span class="line">        ModelGroupReader reader = readers.get(tempModelName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reader = readers.putIfAbsentAndGet(tempModelName, <span class="keyword">new</span> ModelGroupReader(delegatorName, tempModelName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 1. 赋值entity-group-reader的属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. 根据entity-group-reader的属性值获取其对应的EntityGroupReader实例,如果为空就抛出异常</span></span><br><span class="line"><span class="comment">     *    原因:其获取的是EntityConfig实例的中的属性,EntityGroupReader是在EntityConfig实例化是加载的属性标签的对象,所以没有是肯定有问题的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. 添加entityngine.xml中的句柄属性标签MainResourceHandler实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4. 获取component.xml文件中entity-resource标签类型为group,根据与entity-group-reader的属性值对应reader-name构建ComponentResourceHandler实例添加到entityGroupResourceHandlers这个集合</span></span><br><span class="line"><span class="comment">     *    作用是通过这个属性在对应文件中entityName所在的组,后续将其放入到对应的组中，与具体的数据源关联</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5. 获取delegator中与entity-group-reader的属性值对应的entity-resource中reader-name相同的标签实例</span></span><br><span class="line"><span class="comment">     *    根据entity-resource的路径获取文件下所有entity-group实例,将其以entityName为k,groupNam为v存入到具体的groupCache中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelGroupReader</span><span class="params">(String delegatorName, String modelName)</span> <span class="keyword">throws</span> GenericEntityConfException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.modelName = modelName;</span><br><span class="line">        EntityGroupReader entityGroupReaderInfo = EntityConfig.getInstance().getEntityGroupReader(modelName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entityGroupReaderInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Cound not find an entity-group-reader with the name "</span> + modelName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Resource resourceElement: entityGroupReaderInfo.getResourceList()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.entityGroupResourceHandlers.add(<span class="keyword">new</span> MainResourceHandler(EntityConfig.ENTITY_ENGINE_XML_FILENAME, resourceElement.getLoader(), resourceElement.getLocation()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get all of the component resource group stuff, ie specified in each fadp-component.xml file</span></span><br><span class="line">        <span class="keyword">for</span> (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos(<span class="string">"group"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (modelName.equals(componentResourceInfo.readerName)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.entityGroupResourceHandlers.add(componentResourceInfo.createResourceHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// preload caches...</span></span><br><span class="line">        getGroupCache(delegatorName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 如果groupCache为空则将当前delegator下,如果不为空才进行下面的操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.构建对应的groupCache和groupNames</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.加载所有资源句柄文件</span></span><br><span class="line"><span class="comment">     *   即根据与当前entity-group-reader的属性值相同的entity-resource中reader-name的entity-resource标签</span></span><br><span class="line"><span class="comment">     *   根据entity-resource的路径获取文件下所有entity-group实例,将其以entityName为k,groupNam为v存入到具体的groupCache中</span></span><br><span class="line"><span class="comment">     *   以entityName为k groupName为v 这样做的作用就是像getEntityGroupName等方法可以根据实体名获取对应的组名</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getGroupCache</span><span class="params">(String delegatorName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.groupCache == <span class="keyword">null</span>) &#123; <span class="comment">// don't want to block here</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ModelGroupReader.class) &#123;</span><br><span class="line">                <span class="comment">//再次检查groupCache是否为空,避免其它线程创建</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.groupCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//构造groupCache这个hashMap 和groupNames这个TreeSet</span></span><br><span class="line">                    <span class="keyword">this</span>.groupCache = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                    <span class="keyword">this</span>.groupNames = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//做一些时间的通知</span></span><br><span class="line">                    UtilTimer utilTimer = <span class="keyword">new</span> UtilTimer();</span><br><span class="line">                    utilTimer.timerString(<span class="string">"[ModelGroupReader.getGroupCache] Before getDocument"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//遍历所有entity-resource标签对应ComponentResourceHandler实例</span></span><br><span class="line">                    <span class="keyword">for</span> (ResourceHandler entityGroupResourceHandler: <span class="keyword">this</span>.entityGroupResourceHandlers) &#123;</span><br><span class="line">                        Document document = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//解析为文档元素</span></span><br><span class="line">                            document = entityGroupResourceHandler.getDocument();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (GenericConfigException e) &#123;</span><br><span class="line">                            Debug.logError(e, <span class="string">"Error loading entity group model"</span>, <span class="keyword">module</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//如果document为空,缓存置为空,并且返回</span></span><br><span class="line">                        <span class="keyword">if</span> (document == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.groupCache = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// utilTimer.timerString("[ModelGroupReader.getGroupCache] Before getDocumentElement");</span></span><br><span class="line">                        Element docElement = document.getDocumentElement();</span><br><span class="line">                        <span class="keyword">if</span> (docElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//移除空的文本节点</span></span><br><span class="line">                        docElement.normalize();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//以获取首个节点,而后进行遍历,处理所有entity-group节点将其组名加到groupNames这个集合,并以entityName为k,groupName为v存到对应groupCache中</span></span><br><span class="line">                        <span class="comment">//注意有一个检查,检查是否具有entityengine.xml对应的group-map的实例,如果没有加载就没有任何意义</span></span><br><span class="line">                        Node curChild = docElement.getFirstChild();</span><br><span class="line">                        <span class="keyword">if</span> (curChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            utilTimer.timerString(<span class="string">"[ModelGroupReader.getGroupCache] Before start of entity loop"</span>);</span><br><span class="line">                            <span class="keyword">do</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (curChild.getNodeType() == Node.ELEMENT_NODE &amp;&amp; <span class="string">"entity-group"</span>.equals(curChild.getNodeName())) &#123;</span><br><span class="line">                                    Element curEntity = (Element) curChild;</span><br><span class="line">                                    String entityName = UtilXml.checkEmpty(curEntity.getAttribute(<span class="string">"entity"</span>)).intern();</span><br><span class="line">                                    String groupName = UtilXml.checkEmpty(curEntity.getAttribute(<span class="string">"group"</span>)).intern();</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (groupName == <span class="keyword">null</span> || entityName == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (<span class="keyword">null</span> == EntityConfig.getInstance().getDelegator(delegatorName).getGroupDataSource(groupName)) &#123;</span><br><span class="line">                                            Debug.logError(<span class="string">"The declared group name "</span> + groupName + <span class="string">" has no corresponding group-map in entityengine.xml: "</span>, <span class="keyword">module</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (GenericEntityConfException e) &#123;</span><br><span class="line">                                        Debug.logWarning(e, <span class="string">"Exception thrown while getting group name: "</span>, <span class="keyword">module</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">this</span>.groupNames.add(groupName);</span><br><span class="line">                                    <span class="keyword">this</span>.groupCache.put(entityName, groupName);</span><br><span class="line"></span><br><span class="line">                                    i++;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">while</span> ((curChild = curChild.getNextSibling()) != <span class="keyword">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Debug.logWarning(<span class="string">"[ModelGroupReader.getGroupCache] No child nodes found."</span>, <span class="keyword">module</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    utilTimer.timerString(<span class="string">"[ModelGroupReader.getGroupCache] FINISHED - Total Entity-Groups: "</span> + i + <span class="string">" FINISHED"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.groupCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 方法作用:根据entityName和delegatorBaseName获取其对应的组名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.根据方法获取groupCache</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.根据entityName获取组名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.如果组名为空,获取delegator标签实体，获取其默认组名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.返回组名</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEntityGroupName</span><span class="params">(String entityName, String delegatorBaseName)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; gc = getGroupCache(delegatorBaseName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String groupName = gc.get(entityName);</span><br><span class="line">            <span class="keyword">if</span> (groupName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                DelegatorElement delegatorInfo = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    delegatorInfo = EntityConfig.getInstance().getDelegator(delegatorBaseName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (GenericEntityConfException e) &#123;</span><br><span class="line">                    Debug.logWarning(e, <span class="string">"Exception thrown while getting delegator config: "</span>, <span class="keyword">module</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (delegatorInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not find DelegatorInfo for delegatorBaseName ["</span> + delegatorBaseName + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                groupName = delegatorInfo.getDefaultGroupName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> groupName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.确保delegatorName是默认的delegatorName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.调用getGroupCache方法的作用确保将对应的groupCache给加载到类属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.根据delegator的default-group-name获取所有其下面默认group-name标签实例的name,将其添加到一个HashSet集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.向该集合中添加已经通过getGroupCache方法加载的存放过entityName的groupNames集合</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGroupNames</span><span class="params">(String delegatorBaseName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delegatorBaseName.indexOf(<span class="string">'#'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            delegatorBaseName = delegatorBaseName.substring(<span class="number">0</span>, delegatorBaseName.indexOf(<span class="string">'#'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        getGroupCache(delegatorBaseName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.groupNames == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Set&lt;String&gt; newSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newSet.add(EntityConfig.getInstance().getDelegator(delegatorBaseName).getDefaultGroupName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GenericEntityConfException e) &#123;</span><br><span class="line">            Debug.logWarning(e, <span class="string">"Exception thrown while getting delegator config: "</span>, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        newSet.addAll(<span class="keyword">this</span>.groupNames);</span><br><span class="line">        <span class="keyword">return</span> newSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.构造一个Set根据delegatorBaseName和groupName,向该set注入该组里面所有的实体名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.遍历groupCache,将组名相同的entityName添加到enames这个HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.返回对应的enames</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getEntityNamesByGroup</span><span class="params">(String delegatorBaseName, String groupName)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; gc = getGroupCache(delegatorBaseName);</span><br><span class="line">        Set&lt;String&gt; enames = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (groupName == <span class="keyword">null</span> || groupName.length() &lt;= <span class="number">0</span>) <span class="keyword">return</span> enames;</span><br><span class="line">        <span class="keyword">if</span> (UtilValidate.isEmpty(gc)) <span class="keyword">return</span> enames;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry: gc.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (groupName.equals(entry.getValue())) enames.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enames;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(四) ModelReader的作用]]></title>
      <url>/2017/07/30/ofbiz/ofbiz4/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelReader</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">module</span> = ModelReader.class.getName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UtilCache&lt;String, ModelReader&gt; readers = UtilCache.createUtilCache(<span class="string">"entity.ModelReader"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, ModelEntity&gt; entityCache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> numEntities = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> numViewEntities = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> numFields = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> numRelations = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> numAutoRelations = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String modelName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**实体资源句柄文件集合*/</span></span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;ResourceHandler&gt; entityResourceHandlers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**实体资源句柄文件为key,其下面entityName的集合为v*/</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;ResourceHandler, Collection&lt;String&gt;&gt; resourceHandlerEntities;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**entityName为k 实体资源句柄文件 为v*/</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, ResourceHandler&gt; entityResourceHandlerMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.根据delegatorName获取对应DelegatorElement标签实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.获取Delegator的entity-model-reader属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.根据entity-model-reader属性值获取ModelReader实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.如果ModelReader实例为空,则创建其对应的ModelReader,并获取所有实体缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5.以entity-model-reader属性值为k ModelReader实例为v存放到readers这个UtilCache中去</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 6.返回当前ModelReader实例</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModelReader <span class="title">getModelReader</span><span class="params">(String delegatorName)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        DelegatorElement delegatorInfo = EntityConfig.getInstance().getDelegator(delegatorName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delegatorInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Could not find a delegator with the name "</span> + delegatorName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String tempModelName = delegatorInfo.getEntityModelReader();</span><br><span class="line">        ModelReader reader = readers.get(tempModelName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> ModelReader(tempModelName);</span><br><span class="line">            <span class="comment">// preload caches...</span></span><br><span class="line">            reader.getEntityCache();</span><br><span class="line">            reader = readers.putIfAbsentAndGet(tempModelName, reader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.赋值entity-model-reader的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.根据entity-model-reader的属性值获取其对应的EntityModelReader实例,如果为空就抛出异常</span></span><br><span class="line"><span class="comment">     *    原因:其获取的是EntityConfig实例的中的属性,EntityModelReader是在EntityConfig实例化是加载的属性标签的对象,所以没有是肯定有问题的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.添加entityngine.xml中的句柄属性标签MainResourceHandler实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.获取*****-component.xml文件中entity-resource标签类型为model,根据与entity-model-reader的属性值对应reader-name构建ComponentResourceHandler实例添加到entityModelResourceHandlers这个集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意:这个构造器主要是给entityResourceHandlers这个集合中添加了当前EntityModelReader 对应entity-resource对应的实例</span></span><br><span class="line"><span class="comment">     *     它是一个私有构造器,通过getModelReader方法来创建对应实例,后续操作在getModelReader这个静态方法中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ModelReader</span><span class="params">(String modelName)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.modelName = modelName;</span><br><span class="line">        entityResourceHandlers = <span class="keyword">new</span> LinkedList&lt;ResourceHandler&gt;();</span><br><span class="line">        resourceHandlerEntities = <span class="keyword">new</span> HashMap&lt;ResourceHandler, Collection&lt;String&gt;&gt;();</span><br><span class="line">        entityResourceHandlerMap = <span class="keyword">new</span> HashMap&lt;String, ResourceHandler&gt;();</span><br><span class="line"></span><br><span class="line">        EntityModelReader entityModelReaderInfo = EntityConfig.getInstance().getEntityModelReader(modelName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entityModelReaderInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Cound not find an entity-model-reader with the name "</span> + modelName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get all of the main resource model stuff, ie specified in the entityengine.xml file</span></span><br><span class="line">        <span class="keyword">for</span> (Resource resourceElement : entityModelReaderInfo.getResourceList()) &#123;</span><br><span class="line">            ResourceHandler handler = <span class="keyword">new</span> MainResourceHandler(EntityConfig.ENTITY_ENGINE_XML_FILENAME, resourceElement.getLoader(), resourceElement.getLocation());</span><br><span class="line">            entityResourceHandlers.add(handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get all of the component resource model stuff, ie specified in each fadp-component.xml file</span></span><br><span class="line">        <span class="keyword">for</span> (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos(<span class="string">"model"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (modelName.equals(componentResourceInfo.readerName)) &#123;</span><br><span class="line">                entityResourceHandlers.add(componentResourceInfo.createResourceHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>  郑小康</span></span><br><span class="line"><span class="comment">     * 1.判断节点元素是否是entity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.获取entity-name的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.获取entity的redefinition属性,这个属性的作用是说明这个实体不能被覆盖,即entity节点元素不能定义两遍</span></span><br><span class="line"><span class="comment">     *   但这仅仅是一个警告,定义了后面的就会覆盖钱买呢</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.获取当前资源句柄文件的实体名集合,为空则实例化一个LinkedList集合</span></span><br><span class="line"><span class="comment">     *   将当前实体名添加到集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5.以entityName为k entityResourceHandler为v存放在entityResourceHandlerMap,这样做的好处是根据entityName获取其资源句柄文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 6.实体不为空,构造对应的modelEntity或者ModelViewEntity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 7.将实体的资源句柄文件路径添加到当前modelEntity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 8.返回当前modelEntity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意:这里只是构造modelEntity,并没有在数据库建表</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ModelEntity <span class="title">buildEntity</span><span class="params">(ResourceHandler entityResourceHandler, Element curEntityElement, <span class="keyword">int</span> i, ModelInfo def)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isEntity = <span class="string">"entity"</span>.equals(curEntityElement.getNodeName());</span><br><span class="line">        String entityName = UtilXml.checkEmpty(curEntityElement.getAttribute(<span class="string">"entity-name"</span>)).intern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取entity的redefinition属性,这个属性的作用是</span></span><br><span class="line">        <span class="keyword">boolean</span> redefinedEntity = <span class="string">"true"</span>.equals(curEntityElement.getAttribute(<span class="string">"redefinition"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前entityResourceHandler的resourceHandlerEntityNames,里面存放的是这个句柄文件中存在entity,在这里获取的目的是将当前构建的entity的entityName添加进去</span></span><br><span class="line">        Collection&lt;String&gt; resourceHandlerEntityNames = resourceHandlerEntities.get(entityResourceHandler);</span><br><span class="line">        <span class="keyword">if</span> (resourceHandlerEntityNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">            resourceHandlerEntityNames = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">            resourceHandlerEntities.put(entityResourceHandler, resourceHandlerEntityNames);</span><br><span class="line">        &#125;</span><br><span class="line">        resourceHandlerEntityNames.add(entityName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查缓存中是包含 如果缓存中包含,且它不允许重定义(entity属性中默认是false) 这样就会报一些井盖</span></span><br><span class="line">        <span class="keyword">if</span> (entityCache.containsKey(entityName) &amp;&amp; !redefinedEntity) &#123;</span><br><span class="line">            Debug.logWarning(<span class="string">"实体 "</span> + entityName + <span class="string">" 被再次定义,其将覆盖原有的"</span>, <span class="keyword">module</span>);</span><br><span class="line">            Debug.logWarning(<span class="string">"Entity "</span> + entityName + <span class="string">" 被发现在资源句柄文件 "</span> +</span><br><span class="line">                entityResourceHandler + <span class="string">", 但是已经被定义在 "</span> + entityResourceHandlerMap.get(entityName).toString(), <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以entityName为k entityResourceHandler为v存放在entityResourceHandlerMap,这样做的好处是根据entityName获取其资源句柄文件</span></span><br><span class="line">        entityResourceHandlerMap.put(entityName, entityResourceHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造对应的modelEntity或者ModelViewEntity</span></span><br><span class="line">        ModelEntity modelEntity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isEntity) &#123;</span><br><span class="line">            modelEntity = createModelEntity(curEntityElement, <span class="keyword">null</span>, def);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modelEntity = createModelViewEntity(curEntityElement, <span class="keyword">null</span>, def);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取句柄资源文件的路径</span></span><br><span class="line">        String resourceLocation = entityResourceHandler.getLocation();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resourceLocation = entityResourceHandler.getURL().toExternalForm();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GenericConfigException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="string">"Could not get resource URL"</span>, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果modelEntity不为空,将实体的路径注入到modelEntity</span></span><br><span class="line">        <span class="keyword">if</span> (modelEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            modelEntity.setLocation(resourceLocation);</span><br><span class="line">            <span class="comment">// utilTimer.timerString("  After entityCache.put -- " + i + " --");</span></span><br><span class="line">            <span class="keyword">if</span> (isEntity) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Debug.verboseOn()) Debug.logVerbose(<span class="string">"-- [Entity]: #"</span> + i + <span class="string">": "</span> + entityName, <span class="keyword">module</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Debug.verboseOn()) Debug.logVerbose(<span class="string">"-- [ViewEntity]: #"</span> + i + <span class="string">": "</span> + entityName, <span class="keyword">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Debug.logWarning(<span class="string">"-- -- ENTITYGEN ERROR:getModelEntity: Could not create "</span> +</span><br><span class="line">                <span class="string">"entity for entityName: "</span> + entityName, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 1.检查entityCache是否为空,如果不为空直接返回当前缓存,如果为空才向下执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.再次检查,避免其他线程在这个过程创建entityCache</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.对类属性进行初始化 numEntities:实体数量   numViewEntities:视图实体数量     numFields:字段数量</span></span><br><span class="line"><span class="comment">     *                    numRelations:        numAutoRelations                numAutoRelations:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.创建tempViewEntityList&lt;ModelViewEntity&gt;:临时视图模型实体集合  tempExtendEntityElementList&lt;Element&gt; 扩展实体元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5.遍历所有资源句柄文件,包括entity-model-reader中孩子标签Resource 和对应的组件下entity-resource</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 6.根据entityResourceHandler的路径,获取其对应的文档的Document实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 7.从首个节点开始,首先构造ModelInfo,获取当前entity的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 8.节点有三种 entity view-entity extend-entity</span></span><br><span class="line"><span class="comment">     *   如果是实体或者视图实体,调用buildEntity,构造对应的ModelEntity</span></span><br><span class="line"><span class="comment">     *   视图实体:构造后,添加到tempViewEntityList集合</span></span><br><span class="line"><span class="comment">     *   实体:构造后以entityName为k modelEntity为v放入到entityCache</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   如果是extend-entity,直接将节点元素添加到对应的tempExtendEntityElementList集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 9.从缓存中获取extend-entity的name相同的ModelEntity,然后对这个ModelEntity进行扩展字段,并且其会覆盖原有entity的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 10.将视图实体添加到对应的成员ModelEntity,这样就可以通过ModelEntity获取其下面所有ModelViewEntity</span></span><br><span class="line"><span class="comment">     *    并将视图以entityName为k ModelViewEntity为v存放到缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 11.检查出某些视图存在有些成员实体不存在，列举出来,这些ModelViewEntity并没有加到entitycache中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 12构建关系,主要是给当前实体添加其存在的关系集合,关系的实体中也添加这个ModelRelation到CopyOnWriteArrayList&lt;ModelRelation&gt; relations</span></span><br><span class="line"><span class="comment">     *   CopyOnWrite容器即写时复制的容器。</span></span><br><span class="line"><span class="comment">     *   读取的时候拷贝一个副本,进行读取</span></span><br><span class="line"><span class="comment">     *   写入的需要加锁,对副本进行写入之后,再将原容器的引用指向新的容器</span></span><br><span class="line"><span class="comment">     *   这样的好处是可以进行并发的读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, ModelEntity&gt; <span class="title">getEntityCache</span><span class="params">()</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entityCache == <span class="keyword">null</span>) &#123; <span class="comment">// don't want to block here</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ModelReader.class) &#123;</span><br><span class="line">                <span class="comment">// must check if null again as one of the blocked threads can still enter</span></span><br><span class="line">                <span class="keyword">if</span> (entityCache == <span class="keyword">null</span>) &#123; <span class="comment">// now it's safe</span></span><br><span class="line">                    numEntities = <span class="number">0</span>;</span><br><span class="line">                    numViewEntities = <span class="number">0</span>;</span><br><span class="line">                    numFields = <span class="number">0</span>;</span><br><span class="line">                    numRelations = <span class="number">0</span>;</span><br><span class="line">                    numAutoRelations = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    entityCache = <span class="keyword">new</span> HashMap&lt;String, ModelEntity&gt;();</span><br><span class="line">                    List&lt;ModelViewEntity&gt; tempViewEntityList = <span class="keyword">new</span> LinkedList&lt;ModelViewEntity&gt;();</span><br><span class="line">                    List&lt;Element&gt; tempExtendEntityElementList = <span class="keyword">new</span> LinkedList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">                    UtilTimer utilTimer = <span class="keyword">new</span> UtilTimer();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (ResourceHandler entityResourceHandler: entityResourceHandlers) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// utilTimer.timerString("Before getDocument in file " + entityFileName);</span></span><br><span class="line">                        Document document = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            document = entityResourceHandler.getDocument();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (GenericConfigException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Error getting document from resource handler 获取entitymodel.xml文件失败"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (document == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Could not get document for "</span> + entityResourceHandler.toString());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// utilTimer.timerString("Before getDocumentElement in " + entityResourceHandler.toString());</span></span><br><span class="line">                        Element docElement = document.getDocumentElement();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (docElement == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        docElement.normalize();</span><br><span class="line">                        Node curChild = docElement.getFirstChild();</span><br><span class="line"></span><br><span class="line">                        ModelInfo def = ModelInfo.createFromElements(ModelInfo.DEFAULT, docElement);</span><br><span class="line">                        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (curChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            utilTimer.timerString(<span class="string">"Before start of entity loop in "</span> + entityResourceHandler.toString());</span><br><span class="line">                            <span class="keyword">do</span> &#123;</span><br><span class="line">                                <span class="keyword">boolean</span> isEntity = <span class="string">"entity"</span>.equals(curChild.getNodeName());</span><br><span class="line">                                <span class="keyword">boolean</span> isViewEntity = <span class="string">"view-entity"</span>.equals(curChild.getNodeName());</span><br><span class="line">                                <span class="keyword">boolean</span> isExtendEntity = <span class="string">"extend-entity"</span>.equals(curChild.getNodeName());</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> ((isEntity || isViewEntity) &amp;&amp; curChild.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                                    i++;</span><br><span class="line">                                    ModelEntity modelEntity = buildEntity(entityResourceHandler, (Element) curChild, i, def);</span><br><span class="line">                                    <span class="comment">// put the view entity in a list to get ready for the second pass to populate fields...</span></span><br><span class="line">                                    <span class="keyword">if</span> (isViewEntity) &#123;</span><br><span class="line">                                        tempViewEntityList.add((ModelViewEntity) modelEntity);</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        entityCache.put(modelEntity.getEntityName(), modelEntity);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isExtendEntity &amp;&amp; curChild.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                                    tempExtendEntityElementList.add((Element) curChild);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">while</span> ((curChild = curChild.getNextSibling()) != <span class="keyword">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Debug.logWarning(<span class="string">"No child nodes found."</span>, <span class="keyword">module</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        utilTimer.timerString(<span class="string">"Finished "</span> + entityResourceHandler.toString() + <span class="string">" - Total Entities: "</span> + i + <span class="string">" FINISHED"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//从缓存中获取extend-entity的name相同的ModelEntity,然后对这个ModelEntity进行扩展字段,并且其会覆盖原有entity的属性</span></span><br><span class="line">                    <span class="keyword">for</span> (Element extendEntityElement: tempExtendEntityElementList) &#123;</span><br><span class="line">                        String entityName = UtilXml.checkEmpty(extendEntityElement.getAttribute(<span class="string">"entity-name"</span>));</span><br><span class="line">                        ModelEntity modelEntity = entityCache.get(entityName);</span><br><span class="line">                        <span class="keyword">if</span> (modelEntity == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"Entity to extend does not exist: "</span> + entityName);</span><br><span class="line">                        modelEntity.addExtendEntity(<span class="keyword">this</span>, extendEntityElement);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果视图不为空,获取视图的大小</span></span><br><span class="line">                    <span class="keyword">while</span> (!tempViewEntityList.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> startSize = tempViewEntityList.size();</span><br><span class="line">                        <span class="comment">//对视图进行迭代</span></span><br><span class="line">                        Iterator&lt;ModelViewEntity&gt; mveIt = tempViewEntityList.iterator();</span><br><span class="line">TEMP_VIEW_LOOP:</span><br><span class="line">                        <span class="keyword">while</span> (mveIt.hasNext()) &#123;</span><br><span class="line">                            ModelViewEntity curViewEntity = mveIt.next();</span><br><span class="line">                            <span class="comment">//遍历当前视图的所有ModelMemberEntity(member-entity)成员,如果在缓存中不存在就不执行,存在则继续执行</span></span><br><span class="line">                            <span class="keyword">for</span> (ModelViewEntity.ModelMemberEntity mve: curViewEntity.getAllModelMemberEntities()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!entityCache.containsKey(mve.getEntityName())) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span> TEMP_VIEW_LOOP;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            mveIt.remove();</span><br><span class="line">                            <span class="comment">//注入视图实体所有字段</span></span><br><span class="line">                            curViewEntity.populateFields(<span class="keyword">this</span>);</span><br><span class="line">                            <span class="comment">//加视图实体添加到其下面所有成员实体ModelEntity下,以为这可以根据ModelEntity查询其所有视图实体</span></span><br><span class="line">                            <span class="keyword">for</span> (ModelViewEntity.ModelMemberEntity mve: curViewEntity.getAllModelMemberEntities()) &#123;</span><br><span class="line">                                ModelEntity me = entityCache.get(mve.getEntityName());</span><br><span class="line">                                me.addViewEntity(curViewEntity);</span><br><span class="line">                            &#125;</span><br><span class="line">                            entityCache.put(curViewEntity.getEntityName(), curViewEntity);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//这段代码的作用是标识tempViewEntityList集合中的成员是都存在不包含在entityCache</span></span><br><span class="line">                        <span class="keyword">if</span> (tempViewEntityList.size() == startSize) &#123;</span><br><span class="line">                            <span class="comment">// Oops, the remaining views reference other entities</span></span><br><span class="line">                            <span class="comment">// that can't be found, or they reference other views</span></span><br><span class="line">                            <span class="comment">// that have some reference problem.</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//这段代码的作用是在上面遍历tempViewEntityList,有些MemberEntity在缓存中不存在</span></span><br><span class="line">                    <span class="comment">//检查不存在的memberEntity添加到perViewMissingEntities这个SET集合,并将其给输出</span></span><br><span class="line">                    <span class="keyword">if</span> (!tempViewEntityList.isEmpty()) &#123;</span><br><span class="line">                        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"View entities reference non-existant members:\n"</span>);</span><br><span class="line">                        Set&lt;String&gt; allViews = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                        <span class="keyword">for</span> (ModelViewEntity curViewEntity: tempViewEntityList) &#123;</span><br><span class="line">                            allViews.add(curViewEntity.getEntityName());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (ModelViewEntity curViewEntity: tempViewEntityList) &#123;</span><br><span class="line">                            Set&lt;String&gt; perViewMissingEntities = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                            Iterator&lt;ModelViewEntity.ModelMemberEntity&gt; mmeIt = curViewEntity.getAllModelMemberEntities().iterator();</span><br><span class="line">                            <span class="keyword">while</span> (mmeIt.hasNext()) &#123;</span><br><span class="line">                                ModelViewEntity.ModelMemberEntity mme = mmeIt.next();</span><br><span class="line">                                String memberEntityName = mme.getEntityName();</span><br><span class="line">                                <span class="keyword">if</span> (!entityCache.containsKey(memberEntityName)) &#123;</span><br><span class="line">                                    <span class="comment">// this member is not a real entity</span></span><br><span class="line">                                    <span class="comment">// check to see if it is a view</span></span><br><span class="line">                                    <span class="keyword">if</span> (!allViews.contains(memberEntityName)) &#123;</span><br><span class="line">                                        <span class="comment">// not a view, it's a real missing entity</span></span><br><span class="line">                                        perViewMissingEntities.add(memberEntityName);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (String perViewMissingEntity: perViewMissingEntities) &#123;</span><br><span class="line">                                sb.append(<span class="string">"\t["</span>).append(curViewEntity.getEntityName()).append(<span class="string">"] missing member entity ["</span>).append(perViewMissingEntity).append(<span class="string">"]\n"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(sb.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">                     * 1.遍历当前ModelReader下所有实体名</span></span><br><span class="line"><span class="comment">                     * 2.获取对应ModelEntity</span></span><br><span class="line"><span class="comment">                     * 3.将其关系进行迭代处理</span></span><br><span class="line"><span class="comment">                     * 4.如果类型是one 或者one-nofk(不是AutoRelation) 获取其关系ModelEntity</span></span><br><span class="line"><span class="comment">                     * 5.将所有key-map的name添加到curEntityKeyFields集合</span></span><br><span class="line"><span class="comment">                     * 6.实例化ModelRelation</span></span><br><span class="line"><span class="comment">                     * 7.如果是自关联,将ModelRealation添加到当前实体</span></span><br><span class="line"><span class="comment">                     *   如果不是在相关实体加入ModelRealation</span></span><br><span class="line"><span class="comment">                     * */</span></span><br><span class="line">                    TreeSet&lt;String&gt; orderedMessages = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (String curEntityName: <span class="keyword">new</span> TreeSet&lt;String&gt;(<span class="keyword">this</span>.getEntityNames())) &#123;</span><br><span class="line">                        ModelEntity curModelEntity = <span class="keyword">this</span>.getModelEntity(curEntityName);</span><br><span class="line">                        <span class="keyword">if</span> (curModelEntity <span class="keyword">instanceof</span> ModelViewEntity) &#123;</span><br><span class="line">                            <span class="comment">// for view-entities auto-create relationships for all member-entity relationships that have all corresponding fields in the view-entity</span></span><br><span class="line"></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// for entities auto-create many relationships for all type one relationships</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// just in case we add a new relation to the same entity, keep in a separate list and add them at the end</span></span><br><span class="line">                            List&lt;ModelRelation&gt; newSameEntityRelations = <span class="keyword">new</span> LinkedList&lt;ModelRelation&gt;();</span><br><span class="line"></span><br><span class="line">                            Iterator&lt;ModelRelation&gt; relationsIter = curModelEntity.getRelationsIterator();</span><br><span class="line">                            <span class="keyword">while</span> (relationsIter.hasNext()) &#123;</span><br><span class="line">                                ModelRelation modelRelation = relationsIter.next();</span><br><span class="line">                                <span class="keyword">if</span> ((<span class="string">"one"</span>.equals(modelRelation.getType()) || <span class="string">"one-nofk"</span>.equals(modelRelation.getType())) &amp;&amp; !modelRelation.isAutoRelation()) &#123;</span><br><span class="line">                                    ModelEntity relatedEnt = <span class="keyword">null</span>;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                    	<span class="comment">/** 得到参考的 RelEntityName. */</span></span><br><span class="line">                                        relatedEnt = <span class="keyword">this</span>.getModelEntity(modelRelation.getRelEntityName());</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (GenericModelException e) &#123;</span><br><span class="line"><span class="comment">//                                    	 com.hanlin.fadp.petrescence.datasource.FindMissedEntity.addMissed(modelRelation.getRelEntityName());</span></span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> GenericModelException(<span class="string">"Error getting related entity ["</span> + modelRelation.getRelEntityName() + <span class="string">"] definition from entity ["</span> + curEntityName + <span class="string">"]"</span>, e);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (relatedEnt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        <span class="comment">// create the new relationship even if one exists so we can show what we are looking for in the info message</span></span><br><span class="line">                                        <span class="comment">// don't do relationship to the same entity, unless title is "Parent", then do a "Child" automatically</span></span><br><span class="line">                                        String title = modelRelation.getTitle();</span><br><span class="line">                                        <span class="keyword">if</span> (curModelEntity.getEntityName().equals(relatedEnt.getEntityName()) &amp;&amp; <span class="string">"Parent"</span>.equals(title)) &#123;</span><br><span class="line">                                            title = <span class="string">"Child"</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        String description = <span class="string">""</span>;</span><br><span class="line">                                        String type = <span class="string">""</span>;</span><br><span class="line">                                        String relEntityName = curModelEntity.getEntityName();</span><br><span class="line">                                        String fkName = <span class="string">""</span>;</span><br><span class="line">                                        ArrayList&lt;ModelKeyMap&gt; keyMaps = <span class="keyword">new</span> ArrayList&lt;ModelKeyMap&gt;();</span><br><span class="line">                                        <span class="keyword">boolean</span> isAutoRelation = <span class="keyword">true</span>;</span><br><span class="line">                                        Set&lt;String&gt; curEntityKeyFields = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                                        <span class="keyword">for</span> (ModelKeyMap curkm : modelRelation.getKeyMaps()) &#123;</span><br><span class="line">                                            keyMaps.add(<span class="keyword">new</span> ModelKeyMap(curkm.getRelFieldName(), curkm.getFieldName()));</span><br><span class="line">                                            curEntityKeyFields.add(curkm.getFieldName());</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        keyMaps.trimToSize();</span><br><span class="line">                                        <span class="comment">// decide whether it should be one or many by seeing if the key map represents the complete pk of the relEntity</span></span><br><span class="line">                                        <span class="keyword">if</span> (curModelEntity.containsAllPkFieldNames(curEntityKeyFields)) &#123;</span><br><span class="line">                                            <span class="comment">// always use one-nofk, we don't want auto-fks getting in for these automatic ones</span></span><br><span class="line">                                            type = <span class="string">"one-nofk"</span>;</span><br><span class="line">                                            <span class="comment">// to keep it clean, remove any additional keys that aren't part of the PK</span></span><br><span class="line">                                            List&lt;String&gt; curPkFieldNames = curModelEntity.getPkFieldNames();</span><br><span class="line">                                            Iterator&lt;ModelKeyMap&gt; nrkmIter = keyMaps.iterator();</span><br><span class="line">                                            <span class="keyword">while</span> (nrkmIter.hasNext()) &#123;</span><br><span class="line">                                                ModelKeyMap nrkm =nrkmIter.next();</span><br><span class="line">                                                String checkField = nrkm.getRelFieldName();</span><br><span class="line">                                                <span class="keyword">if</span> (!curPkFieldNames.contains(checkField)) &#123;</span><br><span class="line">                                                    nrkmIter.remove();</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            type= <span class="string">"many"</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        ModelRelation newRel = ModelRelation.create(relatedEnt, description, type, title, relEntityName, fkName, keyMaps, isAutoRelation);</span><br><span class="line"></span><br><span class="line">                                        ModelRelation existingRelation = relatedEnt.getRelation(title + curModelEntity.getEntityName());</span><br><span class="line">                                        <span class="keyword">if</span> (existingRelation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            numAutoRelations++;</span><br><span class="line">                                            <span class="keyword">if</span> (curModelEntity.getEntityName().equals(relatedEnt.getEntityName())) &#123;</span><br><span class="line">                                                newSameEntityRelations.add(newRel);</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                relatedEnt.addRelation(newRel);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (newRel.equals(existingRelation)) &#123;</span><br><span class="line">                                                <span class="comment">// don't warn if the target title+entity = current title+entity</span></span><br><span class="line">                                                <span class="keyword">if</span> (Debug.infoOn() &amp;&amp; !(title + curModelEntity.getEntityName()).equals(modelRelation.getTitle() + modelRelation.getRelEntityName())) &#123;</span><br><span class="line">                                                    <span class="comment">//String errorMsg = "Relation already exists to entity [] with title [" + targetTitle + "],from entity []";</span></span><br><span class="line">                                                    String message = <span class="string">"Entity ["</span> + relatedEnt.getPackageName() + <span class="string">":"</span> + relatedEnt.getEntityName() + <span class="string">"] already has identical relationship to entity ["</span> +</span><br><span class="line">                                                            curModelEntity.getEntityName() + <span class="string">"] title ["</span> + title + <span class="string">"]; would auto-create: type ["</span> +</span><br><span class="line">                                                            newRel.getType() + <span class="string">"] and fields ["</span> + newRel.keyMapString(<span class="string">","</span>, <span class="string">""</span>) + <span class="string">"]"</span>;</span><br><span class="line">                                                    orderedMessages.add(message);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                String message = <span class="string">"Existing relationship with the same name, but different specs found from what would be auto-created for Entity ["</span> + relatedEnt.getEntityName() + <span class="string">"] and relationship to entity ["</span> +</span><br><span class="line">                                                        curModelEntity.getEntityName() + <span class="string">"] title ["</span> + title + <span class="string">"]; would auto-create: type ["</span> +</span><br><span class="line">                                                        newRel.getType() + <span class="string">"] and fields ["</span> + newRel.keyMapString(<span class="string">","</span>, <span class="string">""</span>) + <span class="string">"]"</span>;</span><br><span class="line">                                                Debug.logVerbose(message, <span class="keyword">module</span>);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        String errorMsg = <span class="string">"Could not find related entity ["</span></span><br><span class="line">                                                + modelRelation.getRelEntityName() + <span class="string">"], no reverse relation added."</span>;</span><br><span class="line">                                        Debug.logWarning(errorMsg, <span class="keyword">module</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (newSameEntityRelations.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (ModelRelation newRel: newSameEntityRelations) &#123;</span><br><span class="line">                                    curModelEntity.addRelation(newRel);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (Debug.infoOn()) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (String message : orderedMessages) &#123;</span><br><span class="line">                            Debug.logInfo(message, <span class="keyword">module</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Debug.logInfo(<span class="string">"Finished loading entities; #Entities="</span> + numEntities + <span class="string">" #ViewEntities="</span> + numViewEntities + <span class="string">" #Fields="</span> + numFields + <span class="string">" #Relationships="</span> + numRelations + <span class="string">" #AutoRelationships="</span> + numAutoRelations, <span class="keyword">module</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entityCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  rebuilds the resourceHandlerEntities Map of Collections based on the current</span></span><br><span class="line"><span class="comment">     *  entityResourceHandlerMap Map, must be done whenever a manual change is made to the</span></span><br><span class="line"><span class="comment">     *  entityResourceHandlerMap Map after the initial load to make them consistent again.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  Map&lt;ResourceHandler, Collection&lt;String&gt;&gt; resourceHandlerEntities</span></span><br><span class="line"><span class="comment">     *  Map&lt;String, ResourceHandler&gt; entityResourceHandlerMap</span></span><br><span class="line"><span class="comment">     *  依据entityResourceHandlerMap来更新resourceHandlerEntities</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">FIXME:</span>暂时不理解为什么会出现这种情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rebuildResourceHandlerEntities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        resourceHandlerEntities = <span class="keyword">new</span> HashMap&lt;ResourceHandler, Collection&lt;String&gt;&gt;();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, ResourceHandler&gt;&gt; entityResourceIter = entityResourceHandlerMap.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (entityResourceIter.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, ResourceHandler&gt; entry = entityResourceIter.next();</span><br><span class="line">            <span class="comment">// add entityName to appropriate resourceHandlerEntities collection</span></span><br><span class="line">            Collection&lt;String&gt; resourceHandlerEntityNames = resourceHandlerEntities.get(entry.getValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (resourceHandlerEntityNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">                resourceHandlerEntityNames = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">                resourceHandlerEntities.put(entry.getValue(), resourceHandlerEntityNames);</span><br><span class="line">            &#125;</span><br><span class="line">            resourceHandlerEntityNames.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**获取当前模型阅读器的resourceHandler迭代器*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;ResourceHandler&gt; <span class="title">getResourceHandlerEntitiesKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resourceHandlerEntities == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> resourceHandlerEntities.keySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getResourceHandlerEntities</span><span class="params">(ResourceHandler resourceHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resourceHandlerEntities == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> resourceHandlerEntities.get(resourceHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEntityToResourceHandler</span><span class="params">(String entityName, String loaderName, String location)</span> </span>&#123;</span><br><span class="line">        entityResourceHandlerMap.put(entityName, <span class="keyword">new</span> MainResourceHandler(EntityConfig.ENTITY_ENGINE_XML_FILENAME, loaderName, location));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceHandler <span class="title">getEntityResourceHandler</span><span class="params">(String entityName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityResourceHandlerMap.get(entityName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Gets an Entity object based on a definition from the specified XML Entity descriptor file.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityName The entityName of the Entity definition to use.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> An Entity object describing the specified entity of the specified descriptor file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelEntity <span class="title">getModelEntity</span><span class="params">(String entityName)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entityName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Tried to find entity definition for a null entityName"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, ModelEntity&gt; ec = getEntityCache();</span><br><span class="line">        <span class="keyword">if</span> (ec == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"ERROR: Unable to load Entity Cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ModelEntity modelEntity = ec.get(entityName);</span><br><span class="line">        <span class="keyword">if</span> (modelEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String errMsg = <span class="string">"Could not find definition for entity name "</span> + entityName;</span><br><span class="line">            <span class="comment">// Debug.logError(new Exception("Placeholder"), errMsg, module);</span></span><br><span class="line"><span class="comment">//            com.hanlin.fadp.petrescence.datasource.FindMissedEntity.addMissed(entityName);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericModelException(errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelEntity <span class="title">getModelEntityNoCheck</span><span class="params">(String entityName)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, ModelEntity&gt; ec = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec = getEntityCache();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GenericEntityException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="string">"Error getting entity cache"</span>, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ec == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ModelEntity modelEntity = ec.get(entityName);</span><br><span class="line">        <span class="keyword">return</span> modelEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates a Iterator with the entityName of each Entity defined in the specified XML Entity Descriptor file.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A Iterator of entityName Strings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">getEntityNamesIterator</span><span class="params">()</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = getEntityNames();</span><br><span class="line">        <span class="keyword">if</span> (collection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> collection.iterator();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates a Set with the entityName of each Entity defined in the specified XML Entity Descriptor file.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A Set of entityName Strings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getEntityNames</span><span class="params">()</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        Map&lt;String, ModelEntity&gt; ec = getEntityCache();</span><br><span class="line">        <span class="keyword">if</span> (ec == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityConfException(<span class="string">"ERROR: Unable to load Entity Cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ec.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get all entities, organized by package */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, TreeSet&lt;String&gt;&gt; getEntitiesByPackage(Set&lt;String&gt; packageFilterSet, Set&lt;String&gt; entityFilterSet) <span class="keyword">throws</span> GenericEntityException &#123;</span><br><span class="line">        Map&lt;String, TreeSet&lt;String&gt;&gt; entitiesByPackage = <span class="keyword">new</span> HashMap&lt;String, TreeSet&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put the entityNames TreeSets in a HashMap by packageName</span></span><br><span class="line">        Iterator&lt;String&gt; ecIter = <span class="keyword">this</span>.getEntityNames().iterator();</span><br><span class="line">        <span class="keyword">while</span> (ecIter.hasNext()) &#123;</span><br><span class="line">            String entityName = ecIter.next();</span><br><span class="line">            ModelEntity entity = <span class="keyword">this</span>.getModelEntity(entityName);</span><br><span class="line">            String packageName = entity.getPackageName();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(packageFilterSet)) &#123;</span><br><span class="line">                <span class="comment">// does it match any of these?</span></span><br><span class="line">                <span class="keyword">boolean</span> foundMatch = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (String packageFilter: packageFilterSet) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (packageName.contains(packageFilter)) &#123;</span><br><span class="line">                        foundMatch = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!foundMatch) &#123;</span><br><span class="line">                    <span class="comment">//Debug.logInfo("Not including entity " + entityName + " becuase it is not in the package set: " + packageFilterSet, module);</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(entityFilterSet) &amp;&amp; !entityFilterSet.contains(entityName)) &#123;</span><br><span class="line">                <span class="comment">//Debug.logInfo("Not including entity " + entityName + " because it is not in the entity set: " + entityFilterSet, module);</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeSet&lt;String&gt; entities = entitiesByPackage.get(entity.getPackageName());</span><br><span class="line">            <span class="keyword">if</span> (entities == <span class="keyword">null</span>) &#123;</span><br><span class="line">                entities = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">                entitiesByPackage.put(entity.getPackageName(), entities);</span><br><span class="line">            &#125;</span><br><span class="line">            entities.add(entityName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entitiesByPackage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Util method to validate an entity name; if no entity is found with the name,</span></span><br><span class="line"><span class="comment">     *  characters are stripped from the beginning of the name until a valid entity name is found.</span></span><br><span class="line"><span class="comment">     *  It is intended to be used to determine the entity name from a relation name.</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span> A valid entityName or null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">validateEntityName</span><span class="params">(String entityName)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entityName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; allEntities = <span class="keyword">this</span>.getEntityNames();</span><br><span class="line">        <span class="keyword">while</span> (!allEntities.contains(entityName) &amp;&amp; entityName.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            entityName = entityName.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (entityName.length() &gt; <span class="number">0</span>? entityName: <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ModelEntity <span class="title">createModelEntity</span><span class="params">(Element entityElement, UtilTimer utilTimer, ModelInfo def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entityElement == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.numEntities++;</span><br><span class="line">        ModelEntity entity = <span class="keyword">new</span> ModelEntity(<span class="keyword">this</span>, entityElement, utilTimer, def);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ModelEntity <span class="title">createModelViewEntity</span><span class="params">(Element entityElement, UtilTimer utilTimer, ModelInfo def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entityElement == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.numViewEntities++;</span><br><span class="line">        ModelViewEntity entity = <span class="keyword">new</span> ModelViewEntity(<span class="keyword">this</span>, entityElement, utilTimer, def);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelRelation <span class="title">createRelation</span><span class="params">(ModelEntity entity, Element relationElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numRelations++;</span><br><span class="line">        ModelRelation relation = ModelRelation.create(entity, relationElement, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> relation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**增加当前ModelReader字段个数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementFieldCount</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numFields += amount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(二) delegator实例化具体方式]]></title>
      <url>/2017/07/30/ofbiz/ofbiz2/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 采用spi创建对应实例DelegatorFactoryImpl</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;A, R&gt; <span class="function">R <span class="title">getObjectFromFactory</span><span class="params">(Class&lt;? extends Factory&lt;R, A&gt;&gt; factoryInterface, A obj)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Iterator&lt;? extends Factory&lt;R, A&gt;&gt; it = ServiceLoader.load(factoryInterface).iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Factory&lt;R, A&gt; factory = it.next();</span><br><span class="line">            R instance = factory.getInstance(obj);</span><br><span class="line">            <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(factoryInterface.getClass().getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>   注：上下代码不是在一个类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment"> * 根据delegatorName创建一个GenericDelegator</span></span><br><span class="line"><span class="comment"> * 所以实际delegator引用的是一个GenericDelegator实例</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatorFactoryImpl</span> <span class="keyword">extends</span> <span class="title">DelegatorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">module</span> = DelegatorFactoryImpl.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Delegator <span class="title">getInstance</span><span class="params">(String delegatorName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Debug.infoOn()) Debug.logInfo(<span class="string">"Creating new delegator ["</span> + delegatorName + <span class="string">"] ("</span> + Thread.currentThread().getName() + <span class="string">")"</span>, <span class="keyword">module</span>);</span><br><span class="line">        <span class="comment">//Debug.logInfo(new Exception(), "Showing stack where new delegator is being created...", module);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GenericDelegator(delegatorName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GenericEntityException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="string">"Error creating delegator"</span>, <span class="keyword">module</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(三) GenericDelegator实例化的具体过程]]></title>
      <url>/2017/07/30/ofbiz/ofbiz3/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     * 1.设置delegatorFullName 基本delegatorName+"#"+tenantId 如果tenantId为空 则就是默认的delegatorName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.获取EntityConfig实例,并获取基本delegatorBaseName的delegator标签,并解析为对应的DelegatorElement实例</span></span><br><span class="line"><span class="comment">     * &lt;delegator name="default"  entity-model-reader="main" entity-group-reader="main"&gt;&lt;/delegator&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.判断delegatorTenantId是否为空,这是租户id</span></span><br><span class="line"><span class="comment">     *   第一种情况租户id不为空:获取默认的Delegator,用delegator查询Tenant表中当前tenantId的对应GenericValue</span></span><br><span class="line"><span class="comment">     *                      :获取对应租户的kekText <span class="doctag">FIXME:</span>暂时未应用 网上搜索说对数据库连接密码进行解密的操作</span></span><br><span class="line"><span class="comment">     *   第二种情况租户id为空 :获取delegator标签实例的key-encrypting-key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.获取ModelReader 检查了实体缓存之类的操作,获取所有ModelEntity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5.获取所有ModelGroupReader</span></span><br><span class="line"><span class="comment">     *   该类的主要操作是构造对应groupCache缓存,将entity-name为k,groupName为v这样存放,并提供一些获取方法,如获取所有组名,根据实体名获取组名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 6.缓存当前delegatorFullName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 7.对实体进行检查 有检查组里面是否有对应实体 实体名是否是保留字 建立视图一个字段是否被引用多次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 8.获取组名集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 9.遍历delegaot组,通过ThreadPoolExecutor线程池提交Future中任务,对每个组的实体创建到其组对应数据源的数据库</span></span><br><span class="line"><span class="comment">     *   调用Future的原因是,是因为建表很耗时间,所以采用异步执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">GenericDelegator</span><span class="params">(String delegatorFullName)</span> <span class="keyword">throws</span> GenericEntityException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setDelegatorNames(delegatorFullName);</span><br><span class="line">        <span class="comment">//获取基本的delegator中的信息</span></span><br><span class="line">        <span class="keyword">this</span>.delegatorInfo = EntityConfig.getInstance().getDelegator(delegatorBaseName);</span><br><span class="line"></span><br><span class="line">        String kekText;</span><br><span class="line">        <span class="comment">// before continuing, if there is a tenantId use the base delegator to see if it is valid</span></span><br><span class="line">        <span class="keyword">if</span> (UtilValidate.isNotEmpty(<span class="keyword">this</span>.delegatorTenantId)) &#123;</span><br><span class="line">            Delegator baseDelegator = DelegatorFactory.getDelegator(<span class="keyword">this</span>.delegatorBaseName);</span><br><span class="line">            GenericValue tenant = EntityQuery.use(baseDelegator).from(<span class="string">"Tenant"</span>).where(<span class="string">"tenantId"</span>, <span class="keyword">this</span>.delegatorTenantId).cache(<span class="keyword">true</span>).queryOne();</span><br><span class="line">            <span class="keyword">if</span> (tenant == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityException(<span class="string">"No Tenant record found for delegator ["</span> + <span class="keyword">this</span>.delegatorFullName + <span class="string">"] with tenantId ["</span> + <span class="keyword">this</span>.delegatorTenantId + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Y"</span>.equals(tenant.getString(<span class="string">"disabled"</span>))) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GenericEntityException(<span class="string">"No Tenant record found for delegator ["</span> + <span class="keyword">this</span>.delegatorFullName + <span class="string">"] with tenantId ["</span> + <span class="keyword">this</span>.delegatorTenantId + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            GenericValue kekValue = EntityQuery.use(baseDelegator).from(<span class="string">"TenantKeyEncryptingKey"</span>).where(<span class="string">"tenantId"</span>, getDelegatorTenantId()).cache(<span class="keyword">true</span>).queryOne();</span><br><span class="line">            <span class="keyword">if</span> (kekValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                kekText = kekValue.getString(<span class="string">"kekText"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                kekText = <span class="keyword">this</span>.delegatorInfo.getKeyEncryptingKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            kekText = <span class="keyword">this</span>.delegatorInfo.getKeyEncryptingKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.modelReader = ModelReader.getModelReader(delegatorBaseName);</span><br><span class="line">        <span class="keyword">this</span>.modelGroupReader = ModelGroupReader.getModelGroupReader(delegatorBaseName);</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Cache(delegatorFullName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对实体进行检查 有检查组里面是否有对应实体 实体名是否是保留字 建立视图一个字段是否被引用多次</span></span><br><span class="line">        List&lt;String&gt; warningList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        Debug.logInfo(<span class="string">"Doing entity definition check..."</span>, <span class="keyword">module</span>);</span><br><span class="line">        ModelEntityChecker.checkEntities(<span class="keyword">this</span>, warningList);</span><br><span class="line">        <span class="keyword">if</span> (warningList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Debug.logWarning(<span class="string">"=-=-=-=-= Found "</span> + warningList.size() + <span class="string">" warnings when checking the entity definitions:"</span>, <span class="keyword">module</span>);</span><br><span class="line">            <span class="keyword">for</span> (String warning: warningList) &#123;</span><br><span class="line">                Debug.logWarning(warning, <span class="keyword">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前delegator中的groupNames集合,遍历创建对应的GenericHelper,同时在数据库中创建未创建的表和字段</span></span><br><span class="line">        Set&lt;String&gt; groupNames = getModelGroupReader().getGroupNames(delegatorBaseName);</span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; futures = <span class="keyword">new</span> LinkedList&lt;Future&lt;Void&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String groupName: groupNames) &#123;</span><br><span class="line">            futures.add(ExecutionPool.GLOBAL_BATCH.submit(createHelperCallable(groupName)));</span><br><span class="line">        &#125;</span><br><span class="line">        ExecutionPool.getAllFutures(futures);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> doing some things before the ECAs and such to make sure it is in place just in case it is used in a service engine startup thing or something</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// setup the crypto class; this also after the delegator is in the cache otherwise we get infinite recursion</span></span><br><span class="line">        <span class="keyword">this</span>.crypto = <span class="keyword">new</span> EntityCrypto(<span class="keyword">this</span>, kekText);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz实体引擎(一) 获取Delegator]]></title>
      <url>/2017/07/30/ofbiz/ofbiz1/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatorFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Delegator</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">module</span> = DelegatorFactoryImpl.class.getName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Future&lt;Delegator&gt;&gt; delegators = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Future&lt;Delegator&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadGroup DELEGATOR_THREAD_GROUP = <span class="keyword">new</span> ThreadGroup(<span class="string">"DelegatorFactory"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService executor = ExecutionPool.getScheduledExecutor(DELEGATOR_THREAD_GROUP, <span class="string">"delegator-startup"</span>, Runtime.getRuntime().availableProcessors(), <span class="number">10</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 根据delegatorName调用getDelegatorFuture方法,获取当前delegator的 Future&lt;Delegator&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 而后调用get方法获取Delegator实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Delegator <span class="title">getDelegator</span><span class="params">(String delegatorName)</span> </span>&#123;</span><br><span class="line">        Future&lt;Delegator&gt; future = getDelegatorFuture(delegatorName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> future.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 郑小康</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 根据delegatorName获取Future&lt;Delegator&gt; 如果为空,新创建一个FutureTask&lt;Delegator&gt;将其加入到缓存中去</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将这个futureTask给提交到线程池,futureTask中存放的是DelegatorConfigurable实例对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Future&lt;Delegator&gt; <span class="title">getDelegatorFuture</span><span class="params">(String delegatorName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delegatorName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            delegatorName = <span class="string">"default"</span>;</span><br><span class="line">            <span class="comment">//Debug.logWarning(new Exception("Location where getting delegator with null name"), "Got a getGenericDelegator call with a null delegatorName, assuming default for the name.", module);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            Future&lt;Delegator&gt; future = delegators.get(delegatorName);</span><br><span class="line">            <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//Debug.logInfo("got delegator(future(" + delegatorName + ")) from cache", module);</span></span><br><span class="line">                <span class="keyword">return</span> future;</span><br><span class="line">            &#125;</span><br><span class="line">            FutureTask&lt;Delegator&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Delegator&gt;(<span class="keyword">new</span> DelegatorConfigurable(delegatorName));</span><br><span class="line">            <span class="comment">//Debug.logInfo("putting delegator(future(" + delegatorName + ")) into cache", module);</span></span><br><span class="line">            <span class="keyword">if</span> (delegators.putIfAbsent(delegatorName, futureTask) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            executor.submit(futureTask);</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatorConfigurable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Delegator</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String delegatorName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DelegatorConfigurable</span><span class="params">(String delegatorName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.delegatorName = delegatorName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取delegator的具体方法</span></span><br><span class="line"><span class="comment">         * 并做了分布式缓存和ECA Handler <span class="doctag">FIXME:</span>未研究</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Delegator <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Delegator delegator = UtilObject.getObjectFromFactory(DelegatorFactory.class, delegatorName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// setup the Entity ECA Handler</span></span><br><span class="line">                delegator.initEntityEcaHandler();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// setup the distributed CacheClear</span></span><br><span class="line">                delegator.initDistributedCacheClear();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> delegator;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz方法之FreeMarkerWorker的makeConfiguration]]></title>
      <url>/2017/06/26/ofbiz/ofbiz10/</url>
      <content type="html"><![CDATA[<h1><span id="dai-ma-zhan-shi">代码展示</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">makeConfiguration</span><span class="params">(BeansWrapper wrapper)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * freemarker.template.Configuration实例并调整其设置。</span></span><br><span class="line"><span class="comment">         * 一个Configuration实例是存储FreeMarker应用程序级别设置的中心。</span></span><br><span class="line"><span class="comment">         * 另外，它处理预先解析的模板（即 对象）的创建和 缓存Template</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Configuration newConfig = <span class="keyword">new</span> Configuration(version);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 对象包装器</span></span><br><span class="line"><span class="comment">         * wrapper == &gt;freemarker.ext.beans.BeansWrapper</span></span><br><span class="line"><span class="comment">         * 这是一个最原始的对象包装器，主要用来映射java</span></span><br><span class="line"><span class="comment">         * 虽然原始，但是也有使用的时候，比如collection-s和map-s被允许修改模板时执行</span></span><br><span class="line"><span class="comment">         * 参考资料 http://freemarker.org/docs/pgui_misc_beanwrapper.html</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setObjectWrapper(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 从beanswrapper返回TemplateHashModel。</span></span><br><span class="line"><span class="comment">         * getstaticmodels()可以用来访问静态方法和任意一类的字段创建哈希模型。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        TemplateHashModel staticModels = wrapper.getStaticModels();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         * 将TemplateHashModel通过Static注入 以后就可以直接通过Static进行访问</span></span><br><span class="line"><span class="comment">         * Shared variables共享变量是为所有模板定义的变量</span></span><br><span class="line"><span class="comment">         * 形式：statics["java.lang.System"].currentTimeMillis() 这是一种调用java方法的处理方式 ftl中的用法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setSharedVariable(<span class="string">"Static"</span>, staticModels);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * #assign ls = EntityQuery.use(delegator).from("DictType").()     ftl中的用法</span></span><br><span class="line"><span class="comment">         * 注入后就可以直接使用EntityQuery了</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newConfig.setSharedVariable(<span class="string">"EntityQuery"</span>, staticModels.get(<span class="string">"com.hanlin.fadp.entity.util.EntityQuery"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TemplateModelException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 当一个模板包含另一个模板时，它试图加载以相同的本地化环境加载模板。</span></span><br><span class="line"><span class="comment">         * 假定你的模板以本地化en_US来加载，那就意味着是U.S. English。当你包含另外一个模板：那么引擎实际上就会寻找一些模板，并按照这个顺序：</span></span><br><span class="line"><span class="comment">         * footer_en_US.ftl</span></span><br><span class="line"><span class="comment">         * footer_en.ftl</span></span><br><span class="line"><span class="comment">         * footer.ftl</span></span><br><span class="line"><span class="comment">         * 设置成为false就不会有这些问题</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setLocalizedLookup(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建StringUtil这个工具类共享变量</span></span><br><span class="line">        newConfig.setSharedVariable(<span class="string">"StringUtil"</span>, <span class="keyword">new</span> BeanModel(StringUtil.INSTANCE, wrapper));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 如果在这些内建的模版加载器中没有一个符合你的要求，</span></span><br><span class="line"><span class="comment">         * 那么你可以自己定制一个模版加载器，只需要实现freemarker.cache.TemplateLoader 接口就可以了，</span></span><br><span class="line"><span class="comment">         * 然后通过方法setTemplateLoader(TemplateLoader loader)把其传递给Configuration对象。</span></span><br><span class="line"><span class="comment">         * 主要业务处理不是很清楚</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setTemplateLoader(<span class="keyword">new</span> FlexibleTemplateLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 导入库也就是说，它创建一个新的空命名空间 然后执行path在该命名空间中使用参数给出的模板</span></span><br><span class="line"><span class="comment">         * 导入法则：</span></span><br><span class="line"><span class="comment">         * #import "/lib/example.ftl" as e</span></span><br><span class="line"><span class="comment">         * &lt;<span class="doctag">@e</span>.copyright date="1999-2002"/&gt;</span></span><br><span class="line"><span class="comment">         * 属性文件中的模板就是通过这种方式加载进去</span></span><br><span class="line"><span class="comment">         * 所以在调用的时候需要加入命令空间</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setAutoImports(UtilProperties.getProperties(<span class="string">"freemarkerImports"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 自定义类实现TemplateExceptionHandler</span></span><br><span class="line"><span class="comment">         * 当ftl渲染出现异常调用这个类的handleTemplateException</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        newConfig.setTemplateExceptionHandler(<span class="keyword">new</span> FreeMarkerWorker.OFBizTemplateExceptionHandler());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newConfig.setSetting(<span class="string">"datetime_format"</span>, <span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line">            newConfig.setSetting(<span class="string">"number_format"</span>, <span class="string">"0.##########"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">            Debug.logError(<span class="string">"Unable to set date/time and number formats in FreeMarker: "</span> + e, <span class="keyword">module</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transforms properties file set up as key=transform name, property=transform class name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 获取上下文加载器，当前加载器在webapp,随意加载其中config的freemarkerTransforms.properties所有值</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resources = loader.getResources(<span class="string">"freemarkerTransforms.properties"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Debug.logError(e, <span class="string">"Could not load list of freemarkerTransforms.properties"</span>, <span class="keyword">module</span>);</span><br><span class="line">            <span class="keyword">throw</span> UtilMisc.initCause(<span class="keyword">new</span> InternalError(e.getMessage()), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 创建其中资源文件值得实例并通过key用setSharedVariable设置进入共享变量</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL propertyURL = resources.nextElement();</span><br><span class="line">            Debug.logInfo(<span class="string">"loading properties: "</span> + propertyURL, <span class="keyword">module</span>);</span><br><span class="line">            Properties props = UtilProperties.getProperties(propertyURL);</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isEmpty(props)) &#123;</span><br><span class="line">                Debug.logError(<span class="string">"Unable to locate properties file "</span> + propertyURL, <span class="keyword">module</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                loadTransforms(loader, props, newConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newConfig;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="yong-li-shuo-ming">用例说明</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign displayApps = Static[&quot;org.ofbiz.webapp.control.LoginWorker&quot;].getAppBarWebInfos(security, userLogin, ofbizServerName, &quot;main&quot;)&gt;</span><br></pre></td></tr></table></figure>
<h1><span id="stringutil">StringUtil</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;&lt;@ofbizContentUrl&gt;$&#123;StringUtil.wrapString(shortcutIcon)&#125;&lt;/@ofbizContentUrl&gt;&quot; /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz方法之条件查询createConditionList]]></title>
      <url>/2017/06/26/ofbiz/ofbiz11/</url>
      <content type="html"><![CDATA[<h1><span id="fang-fa-dai-ma">方法代码</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Parses input parameters and returns an &lt;code&gt;EntityCondition&lt;/code&gt; list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameters</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fieldList</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> queryStringMap</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> delegator</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> returns an EntityCondition list</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">    * 第一步：获取所有字段信息 存入到Map&lt;String, ModelField&gt; fieldMap</span></span><br><span class="line"><span class="comment">    * 第二步：将上下文这个map进行遍历,这个map是传进来的参数</span></span><br><span class="line"><span class="comment">    *        由于是根据参数，一个字段最多具有三个条件 _op _fld0_op _fld1_op</span></span><br><span class="line"><span class="comment">    * 第三步: 调用createSingleCondition创造条件，添加到集合</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameters 获取传入的参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fieldList 传入当前实体所有字段</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> queryStringMap</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> delegator 操作数据库的实例</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context 获取上下文</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;EntityCondition&gt; <span class="title">createConditionList</span><span class="params">(Map&lt;String, ? extends Object&gt; parameters, List&lt;ModelField&gt; fieldList, Map&lt;String, Object&gt; queryStringMap, Delegator delegator, Map&lt;String, ?&gt; context)</span> </span>&#123;</span><br><span class="line">       Set&lt;String&gt; processed = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">       Set&lt;String&gt; keys = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">       Map&lt;String, ModelField&gt; fieldMap = <span class="keyword">new</span> LinkedHashMap&lt;String, ModelField&gt;();</span><br><span class="line">       <span class="keyword">for</span> (ModelField modelField : fieldList) &#123;</span><br><span class="line">           fieldMap.put(modelField.getName(), modelField);</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;EntityCondition&gt; result = <span class="keyword">new</span> LinkedList&lt;EntityCondition&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;String, ? extends Object&gt; entry : parameters.entrySet()) &#123;</span><br><span class="line">           String parameterName = entry.getKey(); <span class="comment">//获取上下文中的键值</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果已经有了这个键值在进程中就不在对它进行处理</span></span><br><span class="line">           <span class="keyword">if</span> (processed.contains(parameterName)) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           keys.clear();</span><br><span class="line">           String fieldName = parameterName;</span><br><span class="line">           Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">           String operation = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">boolean</span> ignoreCase = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 将参数名截断对应实体中的字段名，这样做的方式是先获取字段名</span></span><br><span class="line"><span class="comment">            * (如果包含fld0 fld1下面则需要再截断），</span></span><br><span class="line"><span class="comment">            * 下面进行连接，针对几种不同的情况进行处理</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">            <span class="keyword">if</span> (parameterName.endsWith(<span class="string">"_ic"</span>) || parameterName.endsWith(<span class="string">"_op"</span>)) &#123;</span><br><span class="line">               fieldName = parameterName.substring(<span class="number">0</span>, parameterName.length() - <span class="number">3</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterName.endsWith(<span class="string">"_value"</span>)) &#123;</span><br><span class="line">               fieldName = parameterName.substring(<span class="number">0</span>, parameterName.length() - <span class="number">6</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//_ic连接 是判断条件查找是否忽略大小写</span></span><br><span class="line">           String key = fieldName.concat(<span class="string">"_ic"</span>);</span><br><span class="line">           <span class="keyword">if</span> (parameters.containsKey(key)) &#123;</span><br><span class="line">               keys.add(key);</span><br><span class="line">               ignoreCase = <span class="string">"Y"</span>.equals(parameters.get(key));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取字段要进行的操作</span></span><br><span class="line">           key = fieldName.concat(<span class="string">"_op"</span>);</span><br><span class="line">           <span class="keyword">if</span> (parameters.containsKey(key)) &#123;</span><br><span class="line">               keys.add(key);</span><br><span class="line">               operation = (String) parameters.get(key);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取字段的值,如果具有_fld0 这些可能获取不到，后面会进一步截断获取</span></span><br><span class="line">           key = fieldName.concat(<span class="string">"_value"</span>);</span><br><span class="line">           <span class="keyword">if</span> (parameters.containsKey(key)) &#123;</span><br><span class="line">               keys.add(key);</span><br><span class="line">               fieldValue = parameters.get(key);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//主要是对时间进行处理，一个条件大于多少 小于多少</span></span><br><span class="line">           <span class="keyword">if</span> (fieldName.endsWith(<span class="string">"_fld0"</span>) || fieldName.endsWith(<span class="string">"_fld1"</span>)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (parameters.containsKey(fieldName)) &#123;</span><br><span class="line">                   keys.add(fieldName);</span><br><span class="line">               &#125;</span><br><span class="line">               fieldName = fieldName.substring(<span class="number">0</span>, fieldName.length() - <span class="number">5</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//将字段名，之所以这样不断截断是为了获取对应与实体中的真实字段名</span></span><br><span class="line">           <span class="keyword">if</span> (parameters.containsKey(fieldName)) &#123;</span><br><span class="line">               keys.add(fieldName);</span><br><span class="line">           &#125;</span><br><span class="line">           processed.addAll(keys);</span><br><span class="line">           ModelField modelField = fieldMap.get(fieldName);</span><br><span class="line">           <span class="keyword">if</span> (modelField == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//获取字段值</span></span><br><span class="line">           <span class="keyword">if</span> (fieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">               fieldValue = parameters.get(fieldName);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果值为空，则不进行任何操作</span></span><br><span class="line">           <span class="keyword">if</span> (ObjectType.isEmpty(fieldValue) &amp;&amp; !<span class="string">"empty"</span>.equals(operation)) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//将创建的条件加入list集合 即AND关系</span></span><br><span class="line">           result.add(createSingleCondition(modelField, operation, fieldValue, ignoreCase, delegator, context));</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (String mapKey : keys) &#123;</span><br><span class="line">               queryStringMap.put(mapKey, parameters.get(mapKey));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="fang-fa-shi-yong">方法使用</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;visitId_op&quot; class=&quot;selectBox&quot;&gt;      </span><br><span class="line">	&lt;option value=&quot;equals&quot;&gt;等于&lt;/option&gt; </span><br><span class="line">	&lt;option value=&quot;like&quot;&gt;开头字符&lt;/option&gt;      </span><br><span class="line">	&lt;option value=&quot;contains&quot; selected=&quot;selected&quot;&gt;包含&lt;/option&gt;   </span><br><span class="line">	&lt;option value=&quot;empty&quot;&gt;为空&lt;/option&gt;</span><br><span class="line">	&lt;option value=&quot;notEqual&quot;&gt;不等于&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz view渲染处理机制]]></title>
      <url>/2017/06/16/ofbiz/ofbiz12/</url>
      <content type="html"><![CDATA[<h1><span id="chu-shi-hua">初始化</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlServlet.java 这是一个servlet,其配置文件在web.xml里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;ControlServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;display-name&gt;ControlServlet&lt;/display-name&gt;</span><br><span class="line">        &lt;description&gt;MainControl Servlet&lt;/description&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.apache.ofbiz.webapp.control.ControlServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;ControlServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/control/*&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这也是为什么大多数请求都是组件名/control/* 首先在第一次请求时经过Servlet的init方法，该Servlet方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(config);</span><br><span class="line">    <span class="keyword">if</span> (Debug.infoOn()) &#123;</span><br><span class="line">        ServletContext servletContext = config.getServletContext();</span><br><span class="line">        String webappName = servletContext.getContextPath().length() != <span class="number">0</span> ?servletContext.getContextPath().substring(<span class="number">1</span>) : <span class="string">""</span>;</span><br><span class="line">        Debug.logInfo(<span class="string">"Loading webapp ["</span> + webappName + <span class="string">"],located at "</span> + servletContext.getRealPath(<span class="string">"/"</span>), <span class="keyword">module</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//配置默认脚本引擎，默认有beanshell和平台自定义的minilang脚本，可扩展其它脚本</span></span><br><span class="line">    configureBsf();</span><br><span class="line">    <span class="comment">// 初始化request处理句柄，实质就是加载controller.xml中handler节点中class属性值对应类的实例化和初始化</span></span><br><span class="line">    getRequestHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该方法中的getRequestHandler就是获取所有的handler节点，加载方式如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Title</span>: getRequestHandler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 获取request的处理句柄，request处理分两类，一类是view，</span></span><br><span class="line"><span class="comment">    * 另一类是event，对应controller.xml中handler节点的配置信息的获取</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: RequestHandler</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RequestHandler <span class="title">getRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> RequestHandler.getRequestHandler(getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Title</span>: getRequestHandler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 在上下文中新建一个requesthandler，命名为_REQUEST_HANDLER_，</span></span><br><span class="line"><span class="comment">    * 构造方法为private，此方法共外界获取实例，为单例模式使用，requesthandler配置来至</span></span><br><span class="line"><span class="comment">    * 处理controller.xml中handler节点的配置数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> servletContext</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: RequestHandler</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestHandler <span class="title">getRequestHandler</span><span class="params">(ServletContextservletContext)</span> </span>&#123;</span><br><span class="line">       RequestHandler rh = (RequestHandler)servletContext.getAttribute(<span class="string">"_REQUEST_HANDLER_"</span>);</span><br><span class="line">       <span class="keyword">if</span> (rh == <span class="keyword">null</span>) &#123;</span><br><span class="line">           rh = newRequestHandler(servletContext);</span><br><span class="line">           servletContext.setAttribute(<span class="string">"_REQUEST_HANDLER_"</span>, rh);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> rh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中的RequestHandler方法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">    * 第一步:将controller.xml的解析信息加入到缓存中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">RequestHandler</span><span class="params">(ServletContext context)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// init the ControllerConfig, but don't save it anywhere, just load itinto the cache</span></span><br><span class="line">       <span class="keyword">this</span>.controllerConfigURL = ConfigXMLReader.getControllerConfigURL(context);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将controller.xml的解析信息加入到缓存中</span></span><br><span class="line">           ConfigXMLReader.getControllerConfig(<span class="keyword">this</span>.controllerConfigURL);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (WebAppConfigurationException e) &#123;</span><br><span class="line">           <span class="comment">// <span class="doctag">FIXME:</span> controller.xml errors should throw an exception.</span></span><br><span class="line">           Debug.logError(e, <span class="string">"Exception thrown while parsing controller.xmlfile: "</span>, <span class="keyword">module</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//加载ViewHandler实现类的实例，其为controller.xml中handler的类型为view</span></span><br><span class="line">       <span class="keyword">this</span>.viewFactory = <span class="keyword">new</span> ViewFactory(context,<span class="keyword">this</span>.controllerConfigURL);</span><br><span class="line">       <span class="comment">//加载EventHandler实现类的实例，其为controller.xml中handler的类型为非view的情况</span></span><br><span class="line">       <span class="keyword">this</span>.eventFactory = <span class="keyword">new</span> EventFactory(context, <span class="keyword">this</span>.controllerConfigURL);</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">this</span>.forceHttpSession =<span class="string">"true"</span>.equalsIgnoreCase(context.getInitParameter(<span class="string">"forceHttpSession"</span>));</span><br><span class="line">       <span class="keyword">this</span>.trackServerHit =!<span class="string">"false"</span>.equalsIgnoreCase(context.getInitParameter(<span class="string">"track-serverhit"</span>));</span><br><span class="line">       <span class="keyword">this</span>.trackVisit =!<span class="string">"false"</span>.equalsIgnoreCase(context.getInitParameter(<span class="string">"track-visit"</span>));</span><br><span class="line">       <span class="keyword">this</span>.cookies = !<span class="string">"false"</span>.equalsIgnoreCase(context.getInitParameter(<span class="string">"cookies"</span>));</span><br><span class="line">       <span class="keyword">this</span>.charset = context.getInitParameter(<span class="string">"charset"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其具体存储方式如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> jack</span></span><br><span class="line"><span class="comment">    * 构建ViewHandler实现类的map，对handler节点的class属性值对应的类进行实例化和初始化，</span></span><br><span class="line"><span class="comment">    * 并设置key=default时，其value=com.hanlin.fadp.webapp.view.JspViewHandler的实例</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> controllerConfigURL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ViewFactory</span><span class="params">(ServletContext context, URL controllerConfigURL)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// load all the view handlers</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           Set&lt;Map.Entry&lt;String,String&gt;&gt; handlerEntries =ConfigXMLReader.getControllerConfig(controllerConfigURL).getViewHandlerMap().entrySet();</span><br><span class="line">           <span class="keyword">if</span> (handlerEntries != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; handlerEntry: handlerEntries) &#123;</span><br><span class="line">                                          <span class="comment">//将对应的handler给实例化</span></span><br><span class="line">                    ViewHandlerhandler = (ViewHandler) ObjectType.getInstance(handlerEntry.getValue());</span><br><span class="line">                   handler.setName(handlerEntry.getKey());</span><br><span class="line">                    handler.init(context);</span><br><span class="line">                    <span class="keyword">this</span>.handlers.put(handlerEntry.getKey(),handler);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// load the "default" type</span></span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.handlers.containsKey(<span class="string">"default"</span>)) &#123;</span><br><span class="line">                ViewHandler defaultHandler =(ViewHandler) ObjectType.getInstance(<span class="string">"com.hanlin.fadp.webapp.view.JspViewHandler"</span>);</span><br><span class="line">                defaultHandler.init(context);</span><br><span class="line">                <span class="keyword">this</span>.handlers.put(<span class="string">"default"</span>, defaultHandler);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> GeneralRuntimeException(e);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="xuan-ran-chu-li">渲染处理</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在经过多contoller文件的request 和response标签处理后，其中的response中对应type=“view”会到对应的view-map标签处理，最终处理如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Debug.verboseOn())Debug.logVerbose(<span class="string">"Rendering view ["</span> + nextPage + <span class="string">"] of type["</span> + viewMap.type + <span class="string">"]"</span>, <span class="keyword">module</span>);</span><br><span class="line">        ViewHandlervh = viewFactory.getViewHandler(viewMap.type);</span><br><span class="line">        vh.render(view,nextPage, viewMap.info, contentType, charset, req, resp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ViewHandlerException e) &#123;</span><br><span class="line">        Throwable throwable = e.getNested()!= <span class="keyword">null</span> ? e.getNested() : e;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">throw</span> newRequestHandlerException(e.getNonNestedMessage(), throwable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 标记的第一步是根据key获取上文初始化中的对应ViewHandler实例，这个key来自于view-map中的screen.具体操作如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewHandlergetViewHandler</span><span class="params">(String type)</span> <span class="keyword">throws</span> ViewHandlerException </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (UtilValidate.isEmpty(type)) &#123;</span><br><span class="line">         type = <span class="string">"default"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// get the view handler by type fromthe contextHandlers</span></span><br><span class="line">     ViewHandler handler =handlers.get(type);</span><br><span class="line">     <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> newViewHandlerException(<span class="string">"No handler found for type: "</span> + type);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> handler;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 标记的第二步是进行具体的渲染，针对于不同类型有不同实现类进行处理，在这里只是展示一下它的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Render the page.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name The name of the view.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> page The source of the view;could be a page, url, etc depending on the type of handler.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> info An info string attached tothis view</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> request The HttpServletRequestobject used when requesting this page.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> response The HttpServletResponseobject to be used to present the page.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> ViewHandlerException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(String name, Stringpage, String info, String contentType, String encoding, HttpServletRequestrequest, HttpServletResponse response)</span> <span class="keyword">throws</span> ViewHandlerException</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hashMap]]></title>
      <url>/2017/01/10/Jdk/2018-01-10/</url>
      <content type="html"><![CDATA[<h1><span id="hashmap-de-jian-jie">hashMap的简介</span></h1><p>1.HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>2.HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口</p>
<h1><span id="hashmap-de-guan-xi-jie-gou-tu">hashMap的关系结构图</span></h1><p><img src="/media/15155611215142.jpg" alt=""></p>
<h1><span id="hashmap-de-gou-zao-qi">hashMap的构造器</span></h1><p>■    HashMap():构建一个初始容量为16,负载因子为0.75的HashMap。<br>■    HashMap(int initialCapacity):构建一个初始容量为 initialCapacity，负栽因子为0.75的 HashMap.<br>■    HashMap(int initialCapacity, float loadFactor):以指定初始容量、指定的负栽因子创建一 个 HashMap.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">   * capacity and load factor.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">   *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                             initialCapacity);</span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">      <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">      threshold = initialCapacity;</span><br><span class="line">      init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">   * capacity and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  initialCapacity the initial capacity.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">   * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the</span></span><br><span class="line"><span class="comment">   * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with</span></span><br><span class="line"><span class="comment">   * default load factor (0.75) and an initial capacity sufficient to</span></span><br><span class="line"><span class="comment">   * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>   m the map whose mappings are to be placed in this map</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span>  NullPointerException if the specified map is null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span><br><span class="line">      inflateTable(threshold);</span><br><span class="line"></span><br><span class="line">      putAllForCreate(m);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>当创建一个HashMap时，系统会自动创建一个table数组来保存HashMap中的Entry。下 面是HashMap中一个构造器的代码</p>
<p>table = new Entry[capacity];</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hashMap has four Constructs,  at first we must know the   <code>public HashMap(int initialCapacity, float loadFactor)</code></p>
]]></content>
      
        <categories>
            
            <category> jdk </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring doGetBean源码解读]]></title>
      <url>/2017/01/07/spring/2018-01-07-2/</url>
      <content type="html"><![CDATA[<p>AbstractBeanFactory </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requiredType the required type of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment"> * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeCheckOnly whether the instance is obtained for a type check,</span></span><br><span class="line"><span class="comment"> * not for actual use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br></pre></td></tr></table></figure>
<p>1.name转化为规范形式beanname<br>2.根据beanname调用getSingleton获取相应的单例<br>3.如果2中没有获取则根据beanname获取RootBeanDefinition而后通过匿名内部类的方式创建其单例</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring ClassPathXmlApplicationContext代码解读]]></title>
      <url>/2017/01/07/spring/2018-01-07-1/</url>
      <content type="html"><![CDATA[<p><img src="/media/15153047375512.jpg" alt=""></p>
<h1><span id="shi-li-hua-classpathxmlapplicationcontext">实例化ClassPathXmlApplicationContext</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">				<span class="keyword">new</span> String[] &#123; <span class="string">"spring-context.xml"</span> &#125;);</span><br></pre></td></tr></table></figure>
<h2><span id="diao-yong-fu-ji-gou-zao-qi">调用父级构造器</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>(configLocations, refresh, <span class="keyword">null</span>);</span><br><span class="line">。。。。。。</span><br><span class="line"><span class="keyword">super</span>(parent);</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实例化的过程中不断调用父类构造器直到找到<code>AbstractApplicationContext</code>,调用this方法实例化<code>PathMatchingResourcePatternResolver</code>并注入作为句柄。并且该实例的<code>resourceLoader</code>句柄的值就是当前<code>ClassPathXmlApplicationContext</code>实例。这个时候<code>ClassPathXmlApplicationContext</code>中传入的父级上下文为空，所以父级上下文始终为空。</p>
<h2><span id="she-zhi-pei-zhi-wen-jian-lu-jing">设置配置文件路径</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setConfigLocations(configLocations);</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个代码中,主要做的事情是设置配置文件的路径。如上文中的<code>spring-context.xml</code>，最终将其存入configLocations这个String数组中。</p>
<h2><span id="refresh-fang-fa">refresh方法</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">	  refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体代码过程如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这里会重新设置容器启动时间和启动标志字段*/</span>  </span><br><span class="line">prepareRefresh();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通知子类刷新beanFactory，具体实现在AbstractRefreshableApplicationContext中， 注这里的默认实例</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">1</span>.如果当前Context持有beanFactory，则先destoryBeans，再关闭beanFactory </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">2</span>.createBeanFactory：用父容器创建一个DefaultListableBeanFactory，（这里如果父容器为ConfigurableApplicationContext，  则返回该context持有的beanFacotry，否则直接返回父BeanFactory。ps：这里可能就是context和beanFactory的区分点） </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">3</span>.customizeBeanFactory：根据参数设置是否允许子类定制DefaultListableBeanFactory。 </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">4</span>.loadBeanDefinitions：加载BeanDefinitions，具体实现在AbstractXmlApplicationContext中。（TODO：后面会详细扩展讲解） 并返回子类的beanFactory </span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 1.设置ClassLoader </p>
<p> 2.addPropertyEditorRegistrar，设置用户定义的propertyEditor注册器 </p>
<p> 3.addBeanPostProcessor，设置ApplicationContextAwareProcessor， 处理ApplicationContextAware实现接口的Bean。 </p>
<p> 4.ignoreDependencyInterface，设置不解析某些接口的依赖关系 </p>
<p> 5.registerResolvableDependency,设置特殊接口和bean的绑定关系 </p>
</blockquote>
<p> /<em>* 提供接口给子类修改beanFactory。 </em>/<br>                postProcessBeanFactory(beanFactory);  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 调用注册的BeanFactoryPostProcessor，按照实现的排序接口PriorityOrdered&gt;Ordered&gt;无接口 */</span>  </span><br><span class="line"></span><br><span class="line">     invokeBeanFactoryPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** 按照排序接口，依次注册BeanPostProcessor，后面会按照这个顺序调用 */</span>  </span><br><span class="line">     registerBeanPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 初始化messageSource,（MessageSource接口用于支持国际化）如果context中尤定义id为messageSource </span></span><br><span class="line"><span class="comment">   * 的MessageSource接口的bean（潜规则），则采用它来解析Message资源，否则采用父容器messageSource，这里会创建一个DelegatingMessageSource， </span></span><br><span class="line"><span class="comment">   * 避免为空的情况导致调用失败。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">     initMessageSource();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 初始化并注册ApplicationEventMulticaster，容器事情广播器，同样采用MessageSource类似的潜规则， </span></span><br><span class="line"><span class="comment">   * 如果容器中有名为applicationEventMulticaster且实现了ApplicationEventMulticaster接口的bean，则注册它， </span></span><br><span class="line"><span class="comment">   * 否则创建SimpleApplicationEventMulticaster，将它当作默认的广播器。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">     initApplicationEventMulticaster();  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** 给子类保留的接口，通知子类刷新 */</span>  </span><br><span class="line">      onRefresh();  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** 获取容器中定义的所有ApplicationListener，容器事件监听器，并注册 */</span>  </span><br><span class="line">      registerListeners();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 1.清除用于类型匹配的classLoader  </span></span><br><span class="line"><span class="comment">      * 2.冻结bean definitions中设置，不能再修改bean的配置 </span></span><br><span class="line"><span class="comment">      * 3.实例化非延迟加载的单例bean，包括由FactoryBean实例化的bean（TODO：需要进一步深挖） </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">      finishBeanFactoryInitialization(beanFactory);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** 广播ContextRefreshedEvent容器刷新事件。 */</span>  </span><br><span class="line">       finishRefresh(); </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用ClassPathXmlApplicationContext的start方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		getLifecycleProcessor().start();</span><br><span class="line">		publishEvent(<span class="keyword">new</span> ContextStartedEvent(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面展示它的具体实现方法.getLifecycleProcessor获取的默认的实例是，在其中会调用如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	startBeans(<span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">this</span>.running = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBeans</span><span class="params">(<span class="keyword">boolean</span> autoStartupOnly)</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Lifecycle&gt; lifecycleBeans = getLifecycleBeans();</span><br><span class="line">	Map&lt;Integer, LifecycleGroup&gt; phases = <span class="keyword">new</span> HashMap&lt;Integer, LifecycleGroup&gt;();</span><br><span class="line">	<span class="keyword">for</span> (Map.Entry&lt;String, ? extends Lifecycle&gt; entry : lifecycleBeans.entrySet()) &#123;</span><br><span class="line">		Lifecycle bean = entry.getValue();</span><br><span class="line">		<span class="keyword">if</span> (!autoStartupOnly || (bean <span class="keyword">instanceof</span> SmartLifecycle &amp;&amp; ((SmartLifecycle) bean).isAutoStartup())) &#123;</span><br><span class="line">			<span class="keyword">int</span> phase = getPhase(bean);</span><br><span class="line">			LifecycleGroup group = phases.get(phase);</span><br><span class="line">			<span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">				group = <span class="keyword">new</span> LifecycleGroup(phase, <span class="keyword">this</span>.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);</span><br><span class="line">				phases.put(phase, group);</span><br><span class="line">			&#125;</span><br><span class="line">			group.add(entry.getKey(), bean);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (phases.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		List&lt;Integer&gt; keys = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(phases.keySet());</span><br><span class="line">		Collections.sort(keys);</span><br><span class="line">		<span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">			phases.get(key).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">	Assert.notNull(event, <span class="string">"Event must not be null"</span>);</span><br><span class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(<span class="string">"Publishing event in "</span> + getDisplayName() + <span class="string">": "</span> + event);</span><br><span class="line">	&#125;</span><br><span class="line">	getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以第一句的作用是添加相应监听器，第二句的作用是通知监听器，然后执行相应的时间</p>
<h1><span id="loadbeandefinitions">loadBeanDefinitions</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个里面有个东西需要单独说明一下，即装载bean。</p>
<p><img src="/media/15153073857334.jpg" alt=""></p>
<p><img src="/media/15153073632068.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring IOC源码分析]]></title>
      <url>/2017/01/07/spring/2018-01-07/</url>
      <content type="html"><![CDATA[<h1><span id="what-is-ioc">What is IOC</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 谁控制谁，控制什么：Ioc容器来控制对象的创建,控制了外部资源获取<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为何是反转，哪些方面反转了：因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转,依赖对象的获取被反转了</p>
<p>传统程序设计:<br><img src="/media/15153018943924.jpg" alt=""></p>
<p>IOC容器模型:<br><img src="/media/15153019310645.jpg" alt=""></p>
<h1><span id="ioc-de-zuo-yong">IOC的作用</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IoC是一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>
<h1><span id="can-kao-lian-jie">参考链接：</span></h1><p><a href="http://jinnianshilongnian.iteye.com/category/206533" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/category/206533</a></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo环境搭建]]></title>
      <url>/2017/01/02/dubbo/2018-01-02/</url>
      <content type="html"><![CDATA[<p>#解压dubbo-admin<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将dubbo-admin解压到tomcat的webapps下面</p>
<p>解压命令unzip dubbo-admin.war -d dubbp-admin</p>
<p>#修改属性文件</p>
<blockquote>
<p>1.将用户密码都改成root<br>2.修改相应地址</p>
</blockquote>
<p>截图如下:</p>
<p><img src="/media/15148683955030.jpg" alt=""></p>
<p>#启动tomcat<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接将tomcat启动，启动之后可以查看相应的日志，<br>启动命令：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在相应的bin目录下执行<code>startup.sh</code><br>日志命令:<br><code>tail -f -n 500 /usr/local/dubbo-tomcat/logs/catalina.out</code></p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git基本指令]]></title>
      <url>/2017/01/02/git/2017-12-29/</url>
      <content type="html"><![CDATA[<h1><span id="the-knowledge-of-git">The knowledge of git</span></h1><h2><span id="base-code">base code</span></h2><h3><span id="git-init">git init</span></h3><p>在当前目录生成的一个管理git仓库的文件夹，这里包含所有git操作所需要的东西</p>
<p>1 hooks:这个目录存放一些shell脚本，可以设置特定的git命令后触发相应的脚本；在搭建gitweb系统或其他git托管系统会经常用到hook script。</p>
<p>2 info:包含仓库的一些信息</p>
<p>3 logs:保存所有更新的引用记录</p>
<p>4 objects:该目录存放所有的Git对象，对象的SHA1哈希值的前两位是文件夹名称，后38位作为对象文件名。比如前面log里的HEAD文件里有个哈希值5426426e3ccc9ab4e3330640862a7b96e28828af</p>
<p>5 refs:具体的引用，Reference Specification，这个目录一般包括三个子文件夹，heads、remotes和tags，比如，heads中的master文件标识了项目中的master分支指向的当前commit，其他类似。</p>
<p>6 COMMIT_EDITMSG:保存最新的commit message，Git系统不会用到这个文件，只是给用户一个参考</p>
<p>7 config:这个是GIt仓库的配置文件</p>
<p>8 description:仓库的描述信息，主要给gitweb等git托管系统使用</p>
<p>9 index:这个文件就是我们前面提到的暂存区（stage），是一个二进制文件</p>
<p>10 HEAD:这个文件包含了一个分支（branch）的引用，通过这个文件Git可以得到下一次commit的parent，什么是引用呢，你可以理解为指针，哪儿都可以指，但是不能指向没有的东西哦。详细介绍请看这里：</p>
<p>###git add</p>
<p>git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</p>
<p>git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写）</p>
<p>git add -A ：是上面两个功能的合集（git add –all的缩写）</p>
<h3><span id="git-remote">git remote</span></h3><p>git remote add:命令用于添加远程主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br></pre></td></tr></table></figure>
<h2><span id="src-refspec-master-does-not-match-any">src refspec master does not match any.</span></h2>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[druid分析]]></title>
      <url>/2017/01/02/druid/2017-12-30/</url>
      <content type="html"><![CDATA[<p>The analysis of Druid<br>Instancing DruidDataSource<br>DruidDataSource have two Constructor,and the one without any argument will invoke another by writing a argument, as follows</p>
<p>At first, We find it will invoke <code>super(fairLock)</code>,its default value is false by instancing the constructor without any argument , it wil call the superclass object and invoke the methods of configFromPropety to Set up relevant property values by getting System property values. Its superclass object constructor is shown below:</p>
<p>In superclass object constructor,the instance create Creates an instance of ReentrantLock with the given unfairness policy. after that it will create Condition instance for use with this Lock instance. The returned Condition instance supports the same usages as do the Object monitor methods <code>(wait, notify, and notifyAll)</code> when used with the built-in monitor lock.</p>
]]></content>
      
        <categories>
            
            <category> druid </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo源码分析1-spring方式启动]]></title>
      <url>/2017/01/02/dubbo/2018-01-07/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一下的代码中主要是装载标签元素并进行解析，其中装载是根据namespaceUri找到对应的句柄，然后通过句柄来解析自己定义的元素.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="zhuang-zai-biao-qian-yuan-su">装载标签元素</span></h1><p>Spring为了支持用户自定义类加载到Spring容器，提供了<code>org.springframework.beans.factory.xml.NamespaceHandler</code>接口<code>org.springframework.beans.factory.xml.NamespaceHandlerSupport</code>抽象类，NamespaceHandler#init方法会在对象的构造函数调用之后、属性初始化之前被DefaultNamespaceHandlerResolver调用。dubbo的DubboNamespaceHandler类正是继承了NamespaceHandlerSupport所以在spring加载过程中会执行这个类中的内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过上面发现所有的标签元素都是通过registerBeanDefinitionParser注册，这个方法主要是将所有的标签对应的解析定义注入一个parsers这个Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitionParser</span><span class="params">(String elementName, BeanDefinitionParser parser)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.parsers.put(elementName, parser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#解析标签元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将所有dubbo的标签给装载之后，就是对具体的标签进行解析，首先展示一下解析逻辑,从这里可以看出来，它是根据具体的标签元素找到DubboBeanDefinitionParser这个实例,然后开始进行解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse the elements at the root level in the document:</span></span><br><span class="line"><span class="comment"> * "import", "alias", "bean".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root the DOM root element of the document</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意在这里将上面注册的beanClass给传入进去，所以在解析beanDefinition的时候就可以获取到这个标签的具体类实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parse(element, parserContext, beanClass, required);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo源码分析2-远程接口暴露过程]]></title>
      <url>/2017/01/02/dubbo/ReferenceConfig/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在提供接口服务的过程，都是围绕着一行代码展开，如下:<br><code>&lt;dubbo:reference  interface=&quot;cfs.com.facade.SysUserFacade&quot; id=&quot;sysUserFacade&quot;  /&gt;</code></p>
<h1><span id="huo-qu-xiang-ying-referencebean">获取相应ReferenceBean</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里我们先要获取的是相应的ReferenceFactoryBean具体过程在dubbo源码分析1-spring方式启动中,首先装载所有标签相应的</p>
<p>DubboNamespaceHandler.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据DubboBeanDefinitionParser来解析，在loadBeanDefinitions中将所有的BeanDefinition解析出来生成形影的ReferenceBean</p>
<p>DubboBeanDefinitionParser.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext, Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="diao-yong-referencebean-de-get-fang-fa">调用ReferenceBean的get方法</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于ReferenceBean继承ReferenceConfig，且自身没有覆盖get方法所以调用的是ReferenceConfig中.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (destroyed)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already destroyed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由上可以看出其核心方法是调用init</p>
<blockquote>
<p>1.验证时候初始化，如果已经初始化直接返回<br>2.保证接口名长度不为空或者0<br>3.配置消费者和提供者全局属性<br>4.获取相应的接口全限定类名<br>5.设置基础属性<br>6.将属性添加到context_map这个静态map中去<br>7.创建相应的代理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  initialized = <span class="keyword">true</span>;</span><br><span class="line"> 	<span class="keyword">if</span> (interfaceName == <span class="keyword">null</span> || interfaceName.length() == <span class="number">0</span>) &#123;</span><br><span class="line"> 	    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"&lt;dubbo:reference interface=\"\" /&gt; interface not allow null!"</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="comment">// 获取消费者全局配置</span></span><br><span class="line"> 	checkDefault();</span><br><span class="line">     appendProperties(<span class="keyword">this</span>);</span><br><span class="line">     <span class="keyword">if</span> (getGeneric() == <span class="keyword">null</span> &amp;&amp; getConsumer() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         setGeneric(getConsumer().getGeneric());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">         interfaceClass = GenericService.class;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">	interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread()</span><br><span class="line">	        .getContextClassLoader());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line">         checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">     &#125;</span><br><span class="line">     String resolve = System.getProperty(interfaceName);</span><br><span class="line">     String resolveFile = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (resolve == <span class="keyword">null</span> || resolve.length() == <span class="number">0</span>) &#123;</span><br><span class="line">      resolveFile = System.getProperty(<span class="string">"dubbo.resolve.file"</span>);</span><br><span class="line">      <span class="keyword">if</span> (resolveFile == <span class="keyword">null</span> || resolveFile.length() == <span class="number">0</span>) &#123;</span><br><span class="line">      	File userResolveFile = <span class="keyword">new</span> File(<span class="keyword">new</span> File(System.getProperty(<span class="string">"user.home"</span>)), <span class="string">"dubbo-resolve.properties"</span>);</span><br><span class="line">      	<span class="keyword">if</span> (userResolveFile.exists()) &#123;</span><br><span class="line">      		resolveFile = userResolveFile.getAbsolutePath();</span><br><span class="line">      	&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (resolveFile != <span class="keyword">null</span> &amp;&amp; resolveFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      	Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">      	FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">      	<span class="keyword">try</span> &#123;</span><br><span class="line">      	    fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(resolveFile));</span><br><span class="line">		properties.load(fis);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unload "</span> + resolveFile + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span>(<span class="keyword">null</span> != fis) fis.close();</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                     logger.warn(e.getMessage(), e);</span><br><span class="line">                 &#125;</span><br><span class="line">	&#125;</span><br><span class="line">      	resolve = properties.getProperty(interfaceName);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (resolve != <span class="keyword">null</span> &amp;&amp; resolve.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     	url = resolve;</span><br><span class="line">     	<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">     		<span class="keyword">if</span> (resolveFile != <span class="keyword">null</span> &amp;&amp; resolveFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     			logger.warn(<span class="string">"Using default dubbo resolve file "</span> + resolveFile + <span class="string">" replace "</span> + interfaceName + <span class="string">""</span> + resolve + <span class="string">" to p2p invoke remote service."</span>);</span><br><span class="line">     		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     			logger.warn(<span class="string">"Using -D"</span> + interfaceName + <span class="string">"="</span> + resolve + <span class="string">" to p2p invoke remote service."</span>);</span><br><span class="line">     		&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (application == <span class="keyword">null</span>) &#123;</span><br><span class="line">             application = consumer.getApplication();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">module</span> = consumer.getModule();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">             registries = consumer.getRegistries();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">             monitor = consumer.getMonitor();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">             registries = <span class="keyword">module</span>.getRegistries();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">             monitor = <span class="keyword">module</span>.getMonitor();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (application != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">             registries = application.getRegistries();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">             monitor = application.getMonitor();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     checkApplication();</span><br><span class="line">     checkStubAndMock(interfaceClass);</span><br><span class="line">     Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">     Map&lt;Object, Object&gt; attributes = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">     map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br><span class="line">     map.put(Constants.DUBBO_VERSION_KEY, Version.getVersion());</span><br><span class="line">     map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">     <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (! isGeneric()) &#123;</span><br><span class="line">         String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">         <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             map.put(<span class="string">"revision"</span>, revision);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">         <span class="keyword">if</span>(methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">             logger.warn(<span class="string">"NO method found in service interface "</span> + interfaceClass.getName());</span><br><span class="line">             map.put(<span class="string">"methods"</span>, Constants.ANY_VALUE);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             map.put(<span class="string">"methods"</span>, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), <span class="string">","</span>));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     map.put(Constants.INTERFACE_KEY, interfaceName);</span><br><span class="line">     appendParameters(map, application);</span><br><span class="line">     appendParameters(map, <span class="keyword">module</span>);</span><br><span class="line">     appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br><span class="line">     appendParameters(map, <span class="keyword">this</span>);</span><br><span class="line">     String prifix = StringUtils.getServiceKey(map);</span><br><span class="line">     <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; methods.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (MethodConfig method : methods) &#123;</span><br><span class="line">             appendParameters(map, method, method.getName());</span><br><span class="line">             String retryKey = method.getName() + <span class="string">".retry"</span>;</span><br><span class="line">             <span class="keyword">if</span> (map.containsKey(retryKey)) &#123;</span><br><span class="line">                 String retryValue = map.remove(retryKey);</span><br><span class="line">                 <span class="keyword">if</span> (<span class="string">"false"</span>.equals(retryValue)) &#123;</span><br><span class="line">                     map.put(method.getName() + <span class="string">".retries"</span>, <span class="string">"0"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             appendAttributes(attributes, method, prifix + <span class="string">"."</span> + method.getName());</span><br><span class="line">             checkAndConvertImplicitConfig(method, map, attributes);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//attributes通过系统context进行存储.</span></span><br><span class="line">     StaticContext.getSystemContext().putAll(attributes);</span><br><span class="line">     ref = createProxy(map);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1><span id="createproxy">createProxy</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方式是init中的最后一步，创建相应的url</p>
<blockquote>
<p> 1.先判断是否是本地服务引用injvm<br> 2.判断是否是点对点直连<br> 3.判断是否是通过注册中心连接<br> 4.然后是服务的引用</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo相关问题]]></title>
      <url>/2017/01/02/dubbo/2017-12-29/</url>
      <content type="html"><![CDATA[<h1><span id="the-question-of-dubbo">The question of dubbo</span></h1><h2><span id="q1">Q1</span></h2><p>防火墙问题:<br>关闭命令：  service iptables stop<br>永久关闭防火墙：chkconfig iptables off<br>永久关闭需要两条语句都运行</p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac切换jdk]]></title>
      <url>/2017/01/01/other/2018-01-03/</url>
      <content type="html"><![CDATA[<p>#切换jdk命令</p>
<blockquote>
<p>切换版本：    jenv use java 1.8<br>设置缺少版本： jenv default java 1.8</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven命令使用指南]]></title>
      <url>/2017/01/01/maven/2018-01-03/</url>
      <content type="html"><![CDATA[<p>#基本命令</p>
<blockquote>
<p>编译源代码: mvn compile<br>编译测试代码：mvn test-compile<br>运行测试：mvn test<br>产生site：mvn site<br>打包：mvn package   -Dmaven.test.skip=true(跳过测试)</p>
</blockquote>
<p>#编译jar到本地仓库</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4.jar</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4-sources.jar -Dclassifier=sources</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4-javadoc.jar -Dclassifier=javadoc</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea相关问题]]></title>
      <url>/2017/01/01/other/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="q1">Q1</span></h1><p>源发行版 1.6 需要目标发行版 1.6</p>
<p>setting-&gt;Compiler-&gt;Java Compiler 设置相应Module的target byte code version的合适版本就行来（搜索首选项）</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea上svn相关问题]]></title>
      <url>/2017/01/01/other/2018-01-04/</url>
      <content type="html"><![CDATA[<h1><span id="idea-shang-bu-xian-shi-svn">idea上不显示svn</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntelliJ IDEA打开带SVN信息的项目不显示SVN信息，项目右键SVN以及图标还有Changes都不显示解决方法在VCS菜单中有个开关，叫Enabled Version Control Integration，在打开的窗口的选项中选择Subversion即可</p>
<h1><span id="idea-hu-lue-mou-xie-wen-jian-geng-xin">idea忽略某些文件更新</span></h1>]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven错误记录]]></title>
      <url>/2017/01/01/maven/2018-01-05/</url>
      <content type="html"><![CDATA[<h1><span id="bu-neng-bu-shu">不能部署</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.5: deploy (default-deploy)</span><br></pre></td></tr></table></figure>
<p>这是在发布到私服的过程中，可能</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ofbiz模块加载机制即创建独立模块（脱离热部署)]]></title>
      <url>/2016/07/25/ofbiz/ofbiz13/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般我们在ofbiz下的hot-deploy下直接创建模块组件就可以进行访问，但是我觉得文件过多话，就不方便管理，所以我们可以分离出来单独建立一个文件模块，原理大家可以从启动类开始看，在这里我只说明一下操作步骤,因为好多东西我也没看懂呢。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一步：找到framework\base\config\component-load.xml这个文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;component-loaderxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line">       xsi:noNamespaceSchemaLocation=&quot;http://ofbiz.apache.org/dtds/component-loader.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;load-components parent-directory=&quot;framework&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;load-components parent-directory=&quot;themes&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;load-components parent-directory=&quot;applications&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;load-components parent-directory=&quot;specialpurpose&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;load-components parent-directory=&quot;hot-deploy&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;load-components parent-directory=&quot;wuliys&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/component-loader&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 很显然start类通过该文件属性，找到相应的子目录，如图所示：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当然这里的runtime和tools文件夹并没有加载进来，因为它们一个是运行，一个是工具存放的.而其它模块则加载进来了，文件夹是加载进来了，然后怎么进行具体操作.看第二步.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二步:因为上面的除了最后一个都是系统存在的，所以我就拿自己创建的一个模块做例子讲述.，文件分级如下：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们先看看component-load.xml文件里面是什么(文件路径已经从同级开始往下哈哈)如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xmlversion=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;component-loaderxmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line">       xsi:noNamespaceSchemaLocation=&quot;http://ofbiz.apache.org/dtds/component-loader.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">         &lt;load-componentcomponent-location=&quot;mytest&quot;/&gt;</span><br><span class="line"></span><br><span class="line">         &lt;load-componentcomponent-location=&quot;myparty&quot;/&gt;    </span><br><span class="line"></span><br><span class="line">&lt;/component-loader&gt;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  很显然就是通过load-component这一元素将mytest和myparty这两个文件加给加载进来。至于这两个模块就是我们能够写具体请求应用的模块。至于具体请求可以参考网上的热部署hello,world差不多</p>
]]></content>
      
        <categories>
            
            <category> OFBiz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OFBiz </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
