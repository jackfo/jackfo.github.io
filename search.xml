<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[持续集成5--搭建maven私服(nexus)]]></title>
      <url>/2018/01/04/linux/2018-01-04-4/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-nexus">安装nexus</span></h1>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成3--tomcat部署svnadmin]]></title>
      <url>/2018/01/04/linux/2018-01-04-3/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-tomcat-bu-shu-svnadmin">安装tomcat部署svnadmin</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将svnadmin.war包部署到tomcat的服务器上解压,编辑配置文件</p>
<p>vim /usr/local/svn-tomcat/webapps/svnadmin/WEB-INF/jdbc.properties</p>
<p>#<br>tail -f -n 500 /usr/local/dubbo-tomcat/logs/catalina.out</p>
<p><img src="/media/15150434074438.jpg" alt=""></p>
<p><img src="/media/15150436764591.jpg" alt=""></p>
<p><img src="/media/15150437923463.jpg" alt=""></p>
<p><img src="/media/15150438046816.jpg" alt=""></p>
<p><img src="/media/15150438178537.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成3--安装jsvnadmin管理平台]]></title>
      <url>/2018/01/04/linux/2018-01-04-2/</url>
      <content type="html"><![CDATA[<h1><span id="an-zhuang-mysql">安装mysql</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>
<h1><span id="qi-dong">启动</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<h1><span id="cha-kan">查看</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep mysqld</span><br></pre></td></tr></table></figure>
<h1><span id="she-zhi-kai-ji-qi-dong">设置开机启动</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure>
<h1><span id="she-zhi-mysql-mi-ma">设置mysql密码</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password root</span><br></pre></td></tr></table></figure>
<h1><span id="jin-xing-yuan-cheng-fang-wen-fu-quan">进行远程访问赋权</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;Sql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[持续集成2--linux下安装svn]]></title>
      <url>/2018/01/04/linux/2018-01-04-1/</url>
      <content type="html"><![CDATA[<h1><span id="xia-zai">下载</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mod_dav_svn subversion</span><br></pre></td></tr></table></figure>
<h1><span id="chong-qi-apache-fu-wu">重启Apache服务</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里重启的是持续集成1中的httpd服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启命令: service httpd restart</span><br><span class="line">查看命令: ls /etc/httpd/modules/ | grep svn</span><br><span class="line">查看版本: svn --version</span><br></pre></td></tr></table></figure>
<h1><span id="chuang-jian-svn-ku">创建svn库</span></h1><p>创建文件夹命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /svn/</span><br><span class="line">```编辑subversion.conf文件</span><br></pre></td></tr></table></figure>
<p>vim /etc/httpd/conf.d/subversion.conf</p>
<p><location svn=""><br>DAV svn<br>SVNListParentPath on SVNParentPath /svn<br>AuthType Basic<br>AuthName “Subversion repositories” AuthUserFile /svn/passwd.http AuthzSVNAccessFile /svn/authz Require valid-user<br></location><br>RedirectMatch ^(/svn)$ $1/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建/svn/passwd.http 和 /svn/authz 文件</span><br></pre></td></tr></table></figure></p>
<p>touch /svn/passwd.http<br>touch /svn/authz<br>service httpd restart  重启apache服务<br>```</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 架构介绍]]></title>
      <url>/2018/01/04/zookeeper/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="zookeeper-jie-shao">zookeeper介绍</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。其具体功能如下:</p>
<blockquote>
<ol>
<li>文件系统</li>
<li>通知机制</li>
</ol>
</blockquote>
<h1><span id="zookeeper-dian-xing-de-ying-yong-chang-jing">ZooKeeper典型的应用场景</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 从设计模式角度来看，是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式</p>
<h2><span id="tong-yi-ming-ming-fu-wu-name-service">统一命名服务（Name Service）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分布式应用中，通常需要有一套完整的命名规则，既能够产生唯一的名称又便于人识别和记住,而<code>Name Service</code>已经是 Zookeeper 内置的功能，所以你只要调用<code>Zookeeper</code>的 API就能实现。如调用<code>create</code>接口就可以很容易创建一个目录节点。</p>
<h2><span id="pei-zhi-guan-li-configuration-management">配置管理（Configuration Management）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。像这样的配置信息完全可以交给 Zookeeper 来管理，将配置信息保存在 Zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。<br><img src="/media/15150300003976.jpg" alt=""></p>
<h2><span id="ji-qun-guan-li-group-membership">集群管理（Group Membership）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 能够很容易的实现集群管理的功能，如有多台 Server 组成一个服务集群，那么必须要一个“总管”知道当前集群中每台机器的服务状态，一旦有机器不能提供服务，集群中其它集群必须知道，从而做出调整重新分配服务策略。同样当增加集群的服务能力时，就会增加一台或多台Server，同样也必须让“总管”知道。Zookeeper 不仅能够帮你维护当前的集群中机器的服务状态，而且能够帮你选出一个“总管”，让这个总管来管理集群，这就是 Zookeeper 的另一个功能 Leader Election</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它们的实现方式都是在 Zookeeper 上创建一个 EPHEMERAL 类型的目录节点，然后每个 Server 在它们创建目录节点的父目录节点上调用getChildren(String path,boolean watch) 方法并设置 watch 为 true，由于是 EPHEMERAL 目录节点，当创建它的 Server 死去，这个目录节点也随之被删除，所以 Children 将会变化，这时 getChildren上的 Watch 将会被调用，所以其它 Server 就知道已经有某台 Server 死去了。新增 Server 也是同样的原理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zookeeper 如何实现 Leader Election，也就是选出一个 Master Server。和前面的一样每台 Server 创建一个 EPHEMERAL 目录节点，不同的是它还是一个 SEQUENTIAL 目录节点，所以它是个 <code>EPHEMERAL_SEQUENTIAL</code> 目录节点。之所以它是 <code>EPHEMERAL_SEQUENTIAL</code> 目录节点，是因为我们可以给每台 Server 编号，我们可以选择当前是最小编号的 Server 为 Master，假如这个最小编号的 Server 死去，由于是 EPHEMERAL 节点，死去的 Server 对应的节点也被删除，所以当前的节点列表中又出现一个最小编号的节点，我们就选择这个节点为当前 Master。这样就实现了动态选择 Master，避免了传统意义上单 Master 容易出现单点故障的问题<br><img src="/media/15150303401429.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> InetSocketAddress <span class="title">findLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       InetSocketAddress addr = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">// Find the leader by id</span></span><br><span class="line">       Vote current = self.getCurrentVote();</span><br><span class="line">       <span class="keyword">for</span> (QuorumServer s : self.getView().values()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.id == current.getId()) &#123;</span><br><span class="line">               addr = s.addr;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (addr == <span class="keyword">null</span>) &#123;</span><br><span class="line">           LOG.warn(<span class="string">"Couldn't find the leader with id = "</span></span><br><span class="line">                   + current.getId());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> addr;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="gong-xiang-suo-locks">共享锁（Locks）</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享锁在同一个进程中很容易实现，但是在跨进程或者在不同 Server 之间就不好实现了。Zookeeper 却很容易实现这个功能，实现方式也是需要获得锁的 Server 创建一个 EPHEMERAL_SEQUENTIAL 目录节点，然后调用 getChildren方法获取当前的目录节点列表中最小的目录节点是不是就是自己创建的目录节点，如果正是自己创建的，那么它就获得了这个锁，如果不是那么它就调用 exists(String path, boolean watch) 方法并监控 Zookeeper 上目录节点列表的变化，一直到自己创建的节点是列表中最小编号的目录节点，从而获得锁，释放锁很简单，只要删除前面它自己所创建的目录节点就行了。<br><img src="/media/15150305099219.jpg" alt=""></p>
<h2><span id="dui-lie-guan-li">队列管理</span></h2><p>参考链接:</p>
<p>ZooKeeper学习第一期—Zookeeper简单介绍<br><a href="https://www.cnblogs.com/wuxl360/p/5817471.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuxl360/p/5817471.html</a></p>
<p>Zookeeper的功能以及工作原理<br><a href="https://www.cnblogs.com/felixzh/p/5869212.html" target="_blank" rel="noopener">https://www.cnblogs.com/felixzh/p/5869212.html</a></p>
<p>分布式服务框架Zookeeper(IBM)<br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/</a></p>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql一些常用sql语句]]></title>
      <url>/2018/01/03/mysql/2018-01-03/</url>
      <content type="html"><![CDATA[<h1><span id="e1">E1</span></h1><p>获取当前时间<br><code>select now&amp;#40; &amp;#4</code></p>
<p>#E2<br>获取当前时间戳</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT UNIX_TIMESTAMP</span><br><span class="line">SELECT UNIX_TIMESTAMP*1000 毫秒级</span><br><span class="line">SELECT UNIX_TIMESTAMP*1000*1000 微秒级</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware Fusion实现虚拟机拷贝]]></title>
      <url>/2018/01/01/linux/2018-01-01-2/</url>
      <content type="html"><![CDATA[<p>参考链接:<a href="http://www.linuxidc.com/Linux/2017-06/144720.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2017-06/144720.htm</a></p>
<p>#拷贝<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击需要拷贝的文件,然后进行复制-粘贴,如下:<br><img src="/media/15147860425142.jpg" alt=""></p>
<p>#打开<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开相应的虚拟机<br><img src="/media/15147863090317.jpg" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击已拷贝<br><img src="/media/15147864065101.jpg" alt=""></p>
<p>#修改hostname</p>
<p><code>vi /etc/sysconfig/network</code></p>
<p>将”HOSTNAME=”后的内容改成机器名，比如centos.04，保存退出</p>
<p><code>vi /etc/hosts</code></p>
<p>在最后添加一行 127.0.0.1 centos.04，保存退出</p>
<p>如果要马上生效，可再输入hostname centos.04，否则要重启才能生效</p>
<p><code>shutdown -h now关机</code> 注意最好执行这个命令，下面生成mac地址需要关机</p>
<p>#给新虚拟机的网卡，生成一个新mac地址<br>在设置里面点击网络适配器生成一个新的mac地址<br><img src="/media/15147869521873.jpg" alt=""></p>
<p>#修改网卡信息</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>vi /etc/udev/rules.d/70-persistent-net.rules</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编辑这个文件，它记录了当前机器上的所有网卡信息根据刚才新生成的mac地址，找到对应的行，把网卡名称改成 eth0，其它的全删除</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把uuid随便改一个数字，保证它跟原来的系统不同即可，然后把HWADDR改成新生成的mac地址，保存退出</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机vm-tools安装]]></title>
      <url>/2018/01/01/linux/2018-01-01-1/</url>
      <content type="html"><![CDATA[<h1><span id="xu-ni-ji-vm-tools-an-zhuang">虚拟机vm-tools安装</span></h1><p>##centos下</p>
<p>###点击vm fusion下安装VMware Tools<br><img src="/media/15147837057928.jpg" alt=""></p>
<p>###解压</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在点击上面安装之后会出现一个CD文件，里面存在VmwareTools-10* 的包 这是一个tar.gz的压缩包，现在我们通过<code>tar -zxvf 文件名tar.gz</code>来进行解压（可以自行存放位置）<br><img src="/media/15147840239457.jpg" alt=""></p>
<p>###安装</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转到上面解压文件的目录vmware-tools-distrib 下，运行./vmware-install.pl 在安装的过程中不断点击enter 直到安装完成，之后调用reboot重新启动就完成了</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下安装httpd]]></title>
      <url>/2018/01/01/linux/2018-01-04/</url>
      <content type="html"><![CDATA[<p>下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd httpd-devel</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure>
<p>修改端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">ServerName localhost:80</span><br></pre></td></tr></table></figure>
<p>然后就可以根据ip进行访问</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux修改ip为静态ip]]></title>
      <url>/2018/01/01/linux/2018-01-01-3/</url>
      <content type="html"><![CDATA[<p>#修改网卡信息</p>
<p><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;   #注意：原值为dhcp</span><br><span class="line">HWADDR=&quot;00:0c:29:ba:18:25&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br></pre></td></tr></table></figure>
<p>以下是修改为静态时需要加<br>IPADDR=192.168.1.200<br>GATEWAY=192.168.1.1<br>NETMASK=255.255.255.0</p>
<p>重启网卡<code>service network restart</code></p>
<p>#设置DNS</p>
<p>vim /ect/resolv.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux卸载openJDK安装sun下jdk]]></title>
      <url>/2018/01/01/linux/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="xie-zai-openjdk">卸载openJDK</span></h1><h2><span id="cha-kan-xiang-ying-openjdk-de-xin-xi">查看相应openJDK的信息</span></h2><p><code>rpm -qa | grep java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tzdata-java-2014g-1.el6.noarch</span><br><span class="line">java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</span><br><span class="line">java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el6_5.x86_64</span><br></pre></td></tr></table></figure>
<h2><span id="shan-chu-xiang-ying-de-wen-jian">删除相应的文件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el6_5.x86_64</span><br><span class="line">rpm -e --nodeps tzdata-java-2014g-1.el6.noarch</span><br></pre></td></tr></table></figure>
<h2><span id="an-zhuang-jdk">安装JDK</span></h2><p>找到相应的jdk资源，将其解压到指定目录</p>
<h2><span id="pei-zhi-huan-jing">配置环境</span></h2><p>打开环境变量存储文件<code>vi /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.7</span><br><span class="line">JRE_HOME=/usr/java/jdk1.7/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>
<p>编译环境变量存储文件<code>source /etc/profile</code></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 环境安装]]></title>
      <url>/2018/01/01/zookeeper/2017-12-30/</url>
      <content type="html"><![CDATA[<h1><span id="jie-ya">解压</span></h1><p><code>tar -zvxf  zookeeper-3.4.5.tar.gz -C /usr/local</code></p>
<p>#配置环境变量<br><code>vim /etc/profile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME =/usr/local/zookeeper-3.4.5</span><br><span class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p><code>source /etc/profile</code></p>
<p>#修改配置文件</p>
<p>相对路径:/ZOOKEEPER_HOME/conf/zoo.cfg</p>
<p>修改</p>
<blockquote>
<p>1.datadir=/ZOOKEEPER_HOME/data</p>
<p>2.server0=ip地址<br>。。。。。。</p>
</blockquote>
<p>ZOOKEEPER_HOME下面创建data文件并创建脚本文件myid</p>
<p>#启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper 源码分析一 zookeeper启动]]></title>
      <url>/2018/01/01/zookeeper/2018-01-04/</url>
      <content type="html"><![CDATA[<h1><span id="zookeeper-qi-dong-lei">zookeeper启动类</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zookeeper的启动方式是调用目录下的zkServer.sh start 由此我们应该到这个文件下找相应的启动入口，最终我找到的<code>org.apache.zookeeper.server.quorum.QuorumPeerMain</code></p>
<p>#zookeeper的启动流程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QuorumPeerMain main = <span class="keyword">new</span> QuorumPeerMain();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            main.initializeAndRun(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Invalid arguments, exiting abnormally"</span>, e);</span><br><span class="line">            LOG.info(USAGE);</span><br><span class="line">            System.err.println(USAGE);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConfigException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Invalid config, exiting abnormally"</span>, e);</span><br><span class="line">            System.err.println(<span class="string">"Invalid config, exiting abnormally"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Unexpected exception, exiting abnormally"</span>, e);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">"Exiting normally"</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> zookeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Working principle of the Netty]]></title>
      <url>/2017/12/20/netty/netty3/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Netty </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Huffman Coding Greedy Algorithm]]></title>
      <url>/2017/12/17/arithmetic/huffmancoding/</url>
      <content type="html"><![CDATA[<h1><span id="what-is-huffman-coding">What is Huffman Coding</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Huffman coding is Data Compression Algorithm,Based on lengths of assigned codes based on frequencies, Variable Length Codes are known as Prefix Codes</p>
<h2><span id="the-goal">The Goal</span></h2><p>Try to reduce the total number of bits used without losing any information</p>
<h2><span id="the-process-of-huffman-coding">The process of Huffman coding</span></h2><blockquote>
<ol>
<li>Scan text to be compressed and tally         occurrence of all characters.</li>
<li>Sort or prioritize characters based on     number of occurrences in text.</li>
<li>Build Huffman code tree based on             prioritized list.</li>
<li>Perform a traversal of tree to determine     all code words.</li>
<li>Scan text again and create new file         using the Huffman codes.</li>
</ol>
</blockquote>
<h2><span id="the-schematic-diagram">The Schematic diagram</span></h2><p><img src="/media/15135245970872.jpg" alt=""></p>
<p><img src="/media/15135246224737.jpg" alt=""></p>
<h2><span id="code-process">Code process</span></h2><p><img src="/media/15135250930243.jpg" alt=""></p>
<p>#The code of Huffman<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now, we specific display Huffman code. By code, we analysis of its process step by step.</p>
<p>##The structure of Node<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In its structure, We define the frequency to statistic the number of occurrences of the characters.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String chars = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> frequence = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Node parent;</span><br><span class="line">    <span class="keyword">private</span> Node leftNode;</span><br><span class="line">    <span class="keyword">private</span> Node rightNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frequence - node.frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChars</span><span class="params">(String chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chars = chars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrequence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrequence</span><span class="params">(<span class="keyword">int</span> frequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frequence = frequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Node parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeftNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeftNode</span><span class="params">(Node leftNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRightNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRightNode</span><span class="params">(Node rightNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="statistic-frequency-of-every-character">statistic frequency of every character</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, Our main purpose is to statistic frequency of every character. so we structure a HashMap to store data, when we get data from the HashMap by key, we add one to the number of it and store into The value of the current mapping as new value</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title">statistics</span><span class="params">(<span class="keyword">char</span>[] charArray)</span> </span>&#123;</span><br><span class="line">       Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c : charArray) &#123;</span><br><span class="line">           Character character = <span class="keyword">new</span> Character(c);</span><br><span class="line">           <span class="keyword">if</span> (map.containsKey(character)) &#123;</span><br><span class="line">               map.put(character, map.get(character) + <span class="number">1</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               map.put(character, <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="build-a-tree">build a tree</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PriorityQueue will Retrieves and removes the head of this queue, or returns null if this queue is empty. PriorityQueue maintain a heap what you can poll the smallest element every time actually. so we will obtain the two minimum elements and build Node, By this way, we will get a complete binary tree.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The idea of algorithm: transfer statistical information to Node and stored in a priority queue. each time it pop-up two minimum frequency nodes the queue to build a new parent node. The frequency of characters is the sum of two pop-up Node.he first pop-up as the left child node, the back one as the right child node, and the newly built parent node inside the queue. Repeat the above action N-1 times. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tree <span class="title">buildTree</span><span class="params">(Map&lt;Character, Integer&gt; statistics,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  List&lt;Node&gt; leafs)</span> </span>&#123;</span><br><span class="line">        Character[] keys = statistics.keySet().toArray(<span class="keyword">new</span> Character[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Node&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Character character : keys) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setChars(character.toString());</span><br><span class="line">            node.setFrequence(statistics.get(character));</span><br><span class="line">            priorityQueue.add(node);</span><br><span class="line">            leafs.add(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = priorityQueue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Node node1 = priorityQueue.poll();</span><br><span class="line">            Node node2 = priorityQueue.poll();</span><br><span class="line"></span><br><span class="line">            Node sumNode = <span class="keyword">new</span> Node();</span><br><span class="line">            sumNode.setChars(node1.getChars()+node2.getChars());</span><br><span class="line">            sumNode.setFrequence(node1.getFrequence()+node2.getFrequence());</span><br><span class="line"></span><br><span class="line">            sumNode.setLeftNode(node1);</span><br><span class="line">            sumNode.setRightNode(node2);</span><br><span class="line"></span><br><span class="line">            node1.setParent(sumNode);</span><br><span class="line">            node2.setParent(sumNode);</span><br><span class="line"></span><br><span class="line">            priorityQueue.add(sumNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Tree tree = <span class="keyword">new</span> Tree();</span><br><span class="line">        tree.setRoot(priorityQueue.poll());</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="encode">encode</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, we will invoke <code>buildTree</code> to let the Node produce associated. searching up from the leaf node of current character, if the character is the parent node of the left node, add 0 before the coded character , otherwise if it is right node, add 1, until the root node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String originalStr,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;Character, Integer&gt; statistics)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (originalStr == <span class="keyword">null</span> || originalStr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span>[] charArray = originalStr.toCharArray();</span><br><span class="line">		List&lt;Node&gt; leafNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">		buildTree(statistics, leafNodes);</span><br><span class="line">		Map&lt;Character, String&gt; encodInfo = buildEncodingInfo(leafNodes);</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c : charArray) &#123;</span><br><span class="line">			Character character = <span class="keyword">new</span> Character(c);</span><br><span class="line">			buffer.append(encodInfo.get(character));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="decode">decode</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Huffman coding algorithm can ensure any binary code is not going to be another code prefix, decoding is simple, each in turn to take out the binary, search down from the root, 1 to the right, 0 to the left, to the leaf node (hit), return a root node continue to repeat the action</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String binaryStr, Map&lt;Character, Integer&gt; statistics)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (binaryStr == <span class="keyword">null</span> || binaryStr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] binaryCharArray = binaryStr.toCharArray();</span><br><span class="line">    LinkedList&lt;Character&gt; binaryList = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">int</span> size = binaryCharArray.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        binaryList.addLast(<span class="keyword">new</span> Character(binaryCharArray[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Node&gt; leafNodes = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">    Tree tree = buildTree(statistics, leafNodes);</span><br><span class="line"></span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (binaryList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Node node = tree.getRoot();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            Character c = binaryList.removeFirst();</span><br><span class="line">            <span class="keyword">if</span> (c.charValue() == <span class="string">'0'</span>) &#123;</span><br><span class="line">                node = node.getLeftNode();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.getRightNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!node.isLeaf());</span><br><span class="line"></span><br><span class="line">        buffer.append(node.getChars());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="the-test-result">The Test Result</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String oriStr = <span class="string">"Huffman codes compress data very effectively"</span>;</span><br><span class="line"></span><br><span class="line">       Map&lt;Character, Integer&gt; statistics = statistics(oriStr.toCharArray());</span><br><span class="line">       String encodedBinariStr = encode(oriStr, statistics);</span><br><span class="line">       String decodedStr = decode(encodedBinariStr, statistics);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"Original sstring: "</span> + oriStr+<span class="string">"\n"</span>);</span><br><span class="line">       System.out.println(<span class="string">"Huffman encoed binary string: "</span> + encodedBinariStr+<span class="string">"\n"</span>);</span><br><span class="line">       System.out.println(<span class="string">"decoded string from binariy string: "</span> + decodedStr);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Original sstring: Huffman codes compress data very effectively</span><br><span class="line"></span><br><span class="line">Huffman encoed binary string: 11111011010101001011100100011011001111000010111011011001011110000101110011011100111011001100101111101100000011000011111101010011000001110101001010111000001111111111101011101000000</span><br><span class="line"></span><br><span class="line">decoded string from binariy string: Huffman codes compress data very effectively</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EightQueen]]></title>
      <url>/2017/12/17/arithmetic/2017-12-18/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The N queens puzzle is the problem of placing N chess queens on an N×N chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal.For example, below is one of the solution for famous 8 Queen problem.<br><img src="/media/15135270924160.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Backtracking Algorithm for N-Queen is already discussed here. In backtracking solution we backtrack when we hit a dead end. In Branch and Bound solution, after building a partial solution, we figure out that there is no point going any deeper as we are going to hit a dead end.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Let’s begin by describing backtracking solution. “The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes, then we backtrack and return false.”</p>
<p><img src="/media/15135271584568.jpg" alt=""></p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.For the 1st Queen, there are total 8 possibilities as we can place 1st Queen in any row of first column. Let’s place Queen 1 on row 3.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.After placing 1st Queen, there are 7 possibilities left for the 2nd Queen. But wait, we don’t really have 7 possibilities. We cannot place Queen 2 on rows 2, 3 or 4 as those cells are under attack from Queen 1. So, Queen 2 has only 8 – 3 = 5 valid positions left.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.After picking a position for Queen 2, Queen 3 has even fewer options as most of the cells in its column are under attack from the first 2 Queens.</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We need to figure out an efficient way of keeping track of which cells are under attack. In previous solution we kept an 8­-by­-8 Boolean matrix and update it each time we placed a queen, but that required linear time to update as we need to check for safe cells.</p>
<p>Basically, we have to ensure 4 things:</p>
<blockquote>
<ol>
<li>No two queens share a column.</li>
<li>No two queens share a row.</li>
<li>No two queens share a top-right to left-bottom diagonal.</li>
<li>No two queens share a top-left to bottom-right diagonal</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Number 1 is automatic because of the way we store the solution. For number 2, 3 and 4, we can perform updates in O(1) time. The idea is to keep three Boolean arrays that tell us which rows and which diagonals are occupied.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lets do some pre-processing first. Let’s create two N x N matrix one for / diagonal and other one for \ diagonal. Let’s call them slashCode and backslashCode respectively. The trick is to fill them in such a way that two queens sharing a same /­diagonal will have the same value in matrix slashCode, and if they share same \­diagonal, they will have the same value in backslashCode matrix.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For an N x N matrix, fill slashCode and backslashCode matrix using below formula –</p>
<pre><code>cols[N] != cols[N-1]

cols[N] != cols[N-1]-1

cols[N]!=cols[N-1]+1
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">//累计方案总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXQUEEN = <span class="number">8</span>;<span class="comment">//皇后个数，同时也是棋盘行列总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] cols = <span class="keyword">new</span> <span class="keyword">int</span>[MAXQUEEN]; <span class="comment">//定义cols数组，表示8列棋子摆放情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queen8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//核心函数</span></span><br><span class="line">      getArrangement(<span class="number">0</span>);</span><br><span class="line">      System.out.print(<span class="string">"/n"</span>);</span><br><span class="line">      System.out.println(MAXQUEEN+<span class="string">"皇后问题有"</span>+num+<span class="string">"种摆放方法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">getArrangement</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="comment">//遍历该列所有不合法的行，并用rows数组记录，不合法即rows[i]=true</span></span><br><span class="line">     <span class="keyword">boolean</span>[] rows = <span class="keyword">new</span> <span class="keyword">boolean</span>[MAXQUEEN];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        rows[cols[i]]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> d = n-i;</span><br><span class="line">        <span class="keyword">if</span>(cols[i]-d &gt;= <span class="number">0</span>)rows[cols[i]-d]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(cols[i]+d &lt;= MAXQUEEN-<span class="number">1</span>)rows[cols[i]+d]=<span class="keyword">true</span>; </span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXQUEEN;i++)&#123;</span><br><span class="line">       <span class="comment">//判断该行是否合法  </span></span><br><span class="line">       <span class="keyword">if</span>(rows[i])<span class="keyword">continue</span>;</span><br><span class="line">       <span class="comment">//设置当前列合法棋子所在行数</span></span><br><span class="line">       cols[n] = i;</span><br><span class="line">       <span class="comment">//当前列不为最后一列时</span></span><br><span class="line">       <span class="keyword">if</span>(n&lt;MAXQUEEN-<span class="number">1</span>)&#123;</span><br><span class="line">         getArrangement(n+<span class="number">1</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累计方案个数</span></span><br><span class="line">         num++;</span><br><span class="line">         <span class="comment">//打印棋盘信息</span></span><br><span class="line">         printChessBoard();</span><br><span class="line">       &#125; </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printChessBoard</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       System.out.print(<span class="string">"第"</span>+num+<span class="string">"种走法 /n"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXQUEEN;i++)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;MAXQUEEN;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i==cols[j])&#123;</span><br><span class="line">             System.out.print(<span class="string">"0 "</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span></span><br><span class="line">             System.out.print(<span class="string">"+ "</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print(<span class="string">"/n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Queen8 queen = <span class="keyword">new</span> Queen8();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第1种走法 </span><br><span class="line">0 + + + + + + + </span><br><span class="line">+ + + + + + 0 + </span><br><span class="line">+ + + + 0 + + + </span><br><span class="line">+ + + + + + + 0 </span><br><span class="line">+ 0 + + + + + + </span><br><span class="line">+ + + 0 + + + + </span><br><span class="line">+ + + + + 0 + + </span><br><span class="line">+ + 0 + + + + + </span><br><span class="line">第2种走法 </span><br><span class="line">0 + + + + + + + </span><br><span class="line">+ + + + + + 0 + </span><br><span class="line">+ + + 0 + + + + </span><br><span class="line">+ + + + + 0 + + </span><br><span class="line">+ + + + + + + 0 </span><br><span class="line">+ 0 + + + + + + </span><br><span class="line">+ + + + 0 + + + </span><br><span class="line">+ + 0 + + + + + </span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PriorityQueue]]></title>
      <url>/2017/12/12/Jdk/PriorityQueue/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-priorityqueue">The introduce of PriorityQueue</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An unbounded priority queue based on a priority heap. The elements of the priority queue are ordered according to their natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements. A priority queue relying on natural ordering also does not permit insertion of non-comparable objects </p>
<p>#The family of PriorityQueue<br><img src="/media/15134842324567.jpg" alt=""></p>
<p>#The structure of PriorityQueue</p>
<p><img src="/media/15134842759960.jpg" alt=""></p>
<p>#The method of PriorityQueue</p>
]]></content>
      
        <categories>
            
            <category> jdk </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A example of Netty]]></title>
      <url>/2017/12/12/netty/netty1/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-netty">The introduce of Netty</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; we often use an HTTP client library to retrieve information from a web server and to invoke a remote procedure call via web services. Netty is an NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients. It greatly simplifies and streamlines network programming such as TCP and UDP socket server development.</p>
<h1><span id="a-example-of-netty">A example of Netty</span></h1><h2><span id="the-main-class">The Main class</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this part, we introduce a simple process for a netty service. At first, we create multithreaded event loop that handles I/O operation and add them into corresponding server and add corresponding channel to transmit message. In this channel, we will create corresponding handle to receive the message, In this process, some handle can encode or decode the message. In the end, it will wait the message from client. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscardServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//bossGroup will accept an incoming connection</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="comment">//workerGroup handles the traffic of the accepted connection once the bossGroup accepts the connection</span></span><br><span class="line">        <span class="comment">//and registers the accepted the connection to the worker</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//ServerBootstrap is a helper class that sets up a server. you can set up the server using channel</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//we specify to use the NioServerSocketChannel class which is used to a new channel to accept incoming connection</span></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    <span class="comment">//the handler specified here will always be evaluated by a newly channel</span></span><br><span class="line">                    <span class="comment">//The ChannelInitializer's purpose is to help user configure a new channel and add some handler which can implement network application</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DiscardServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">//you can set some socket option by this way</span></span><br><span class="line">                    <span class="comment">//option() is for the NioServerSocketChannel that accepts incoming connections.</span></span><br><span class="line">                    <span class="comment">//childOption() is for the Channels accepted by the parent ServerChannel, which is NioServerSocketChannel in this case.</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind and start to accept incoming connections.</span></span><br><span class="line">            ChannelFuture f = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"before closeFuture.."</span>);</span><br><span class="line">            <span class="comment">// Wait until the server socket is closed.</span></span><br><span class="line">            <span class="comment">// In this example, this does not happen, but you can do that to gracefully</span></span><br><span class="line">            <span class="comment">// shut down your server.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">            System.out.println(<span class="string">"after closeFuture.."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            port = <span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> DiscardServer(port).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">## The corresponding handle</span><br><span class="line"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; In <span class="keyword">this</span> handle,  we override the channelRead method from the <span class="class"><span class="keyword">interface</span> <span class="title">of</span> <span class="title">ChannelInboundHandler</span> <span class="title">to</span> <span class="title">receive</span> <span class="title">the</span> <span class="title">message</span> <span class="title">and</span> <span class="title">do</span> <span class="title">some</span> <span class="title">operation</span>.</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">```<span class="title">java</span></span></span><br><span class="line"><span class="class">/***</span></span><br><span class="line"><span class="class"> *</span></span><br><span class="line"><span class="class"> * <span class="title">ChannelInboundHandlerAdapter</span> <span class="title">is</span> <span class="title">a</span> <span class="title">implementation</span> <span class="title">for</span> <span class="title">ChannelHandlerAdapter</span> (<span class="title">abstract</span> <span class="title">class</span>) <span class="title">and</span> <span class="title">ChannelInboundHandler</span>(<span class="title">interface</span>)</span></span><br><span class="line"><span class="class"> * <span class="title">ChannelInboundHandler</span> <span class="title">provides</span> <span class="title">various</span> <span class="title">event</span> <span class="title">handler</span> <span class="title">methods</span> <span class="title">that</span> <span class="title">you</span> <span class="title">can</span> <span class="title">override</span></span></span><br><span class="line"><span class="class"> * <span class="title">For</span> <span class="title">now</span>, <span class="title">it</span> <span class="title">is</span> <span class="title">just</span> <span class="title">enough</span> <span class="title">to</span> <span class="title">extend</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="title">rather</span> <span class="title">than</span> <span class="title">to</span> <span class="title">implement</span> <span class="title">the</span> <span class="title">handler</span> <span class="title">interface</span> <span class="title">by</span> <span class="title">yourself</span>.</span></span><br><span class="line"><span class="class"> *</span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DiscardServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * we override the channelRead method from the interface of ChannelInboundHandler</span></span><br><span class="line"><span class="comment">     * Invoked when the current channel has read a message from the peer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx this variable provide various operations that enable you to trigger various I/O operations and event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg receive the message from channel</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">char</span> temp ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctx.write(<span class="string">"you message:"</span>);</span><br><span class="line">            <span class="keyword">while</span> (in.isReadable()) &#123;</span><br><span class="line">                temp = (<span class="keyword">char</span>)in.readByte();</span><br><span class="line">                System.out.print(temp);</span><br><span class="line"></span><br><span class="line">                ctx.write(temp);</span><br><span class="line">                System.out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The exceptionCaught() event handler method s called with a Throwable</span></span><br><span class="line"><span class="comment">     * when an exception was raised by Netty due to an I/O error or by a handler implementation due to the exception thrown while processing events</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Close the connection when an exception is raised.</span></span><br><span class="line">        System.out.println(<span class="string">"channelRead..."</span>);</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##The result of this example<br><img src="/media/15130934221050.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Netty </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO Selector]]></title>
      <url>/2017/12/11/NIO/nio4/</url>
      <content type="html"><![CDATA[<p>#The Selector, SelectableChannel, and SelectionKey Classes</p>
<h2><span id="selector">Selector</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Selector class manages information about a set of registered channel and their readies state. Channels are registered with selectors, and a selector can be asked to update readies state of channels. When doing so, the invoking thread can optionally indicate that it would prefer to be suspended until one of the registered channel is ready.</p>
<p>##</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QuickSort]]></title>
      <url>/2017/12/11/arithmetic/quickSort/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.</p>
<blockquote>
<p>1.Always pick first element as pivot.<br>2.Always pick last element as pivot (implemented below)<br>3.Pick a random element as pivot.<br>4.Pick median as pivot.</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time.</p>
<h1><span id="pseudo-code-for-recursive-quicksort-function">Pseudo Code for recursive QuickSort function :</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* low  --&gt; Starting index,  high  --&gt; Ending index */</span><br><span class="line">quickSort(arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    if (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        /* pi is partitioning index, arr[p] is now</span><br><span class="line">           at right place */</span><br><span class="line">        pi = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr, low, pi - 1);  // Before pi</span><br><span class="line">        quickSort(arr, pi + 1, high); // After pi</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/media/15135258671875.jpg" alt=""></p>
<h1><span id="partition-algorithm">Partition Algorithm</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There can be many ways to do partition, following pseudo code adopts the method given in CLRS book. The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* low  --&gt; Starting index,  high  --&gt; Ending index */</span><br><span class="line">quickSort(arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    if (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        /* pi is partitioning index, arr[p] is now</span><br><span class="line">           at right place */</span><br><span class="line">        pi = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">        quickSort(arr, low, pi - 1);  // Before pi</span><br><span class="line">        quickSort(arr, pi + 1, high); // After pi</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="pseudo-code-for-partition">Pseudo code for partition()</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* This function takes last element as pivot, places</span><br><span class="line">   the pivot element at its correct position in sorted</span><br><span class="line">    array, and places all smaller (smaller than pivot)</span><br><span class="line">   to left of pivot and all greater elements to right</span><br><span class="line">   of pivot */</span><br><span class="line">partition (arr[], low, high)</span><br><span class="line">&#123;</span><br><span class="line">    // pivot (Element to be placed at right position)</span><br><span class="line">    pivot = arr[high];  </span><br><span class="line"> </span><br><span class="line">    i = (low - 1)  // Index of smaller element</span><br><span class="line"></span><br><span class="line">    for (j = low; j &lt;= high- 1; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        // If current element is smaller than or</span><br><span class="line">        // equal to pivot</span><br><span class="line">        if (arr[j] &lt;= pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;    // increment index of smaller element</span><br><span class="line">            swap arr[i] and arr[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap arr[i + 1] and arr[high])</span><br><span class="line">    return (i + 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="illustration-of-partition">Illustration of partition()</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">arr[] = &#123;10, 80, 30, 90, 40, 50, 70&#125;</span><br><span class="line">Indexes:  0   1   2   3   4   5   6 </span><br><span class="line"></span><br><span class="line">low = 0, high =  6, pivot = arr[h] = 70</span><br><span class="line">Initialize index of smaller element, i = -1</span><br><span class="line"></span><br><span class="line">Traverse elements from j = low to high-1</span><br><span class="line">j = 0 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 0 </span><br><span class="line">arr[] = &#123;10, 80, 30, 90, 40, 50, 70&#125; // No change as i and j </span><br><span class="line">                                     // are same</span><br><span class="line"></span><br><span class="line">j = 1 : Since arr[j] &gt; pivot, do nothing</span><br><span class="line">// No change in i and arr[]</span><br><span class="line"></span><br><span class="line">j = 2 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 1</span><br><span class="line">arr[] = &#123;10, 30, 80, 90, 40, 50, 70&#125; // We swap 80 and 30 </span><br><span class="line"></span><br><span class="line">j = 3 : Since arr[j] &gt; pivot, do nothing</span><br><span class="line">// No change in i and arr[]</span><br><span class="line"></span><br><span class="line">j = 4 : Since arr[j] &lt;= pivot, do i++ and swap(arr[i], arr[j])</span><br><span class="line">i = 2</span><br><span class="line">arr[] = &#123;10, 30, 40, 90, 80, 50, 70&#125; // 80 and 40 Swapped</span><br><span class="line">j = 5 : Since arr[j] &lt;= pivot, do i++ and swap arr[i] with arr[j] </span><br><span class="line">i = 3 </span><br><span class="line">arr[] = &#123;10, 30, 40, 50, 80, 90, 70&#125; // 90 and 50 Swapped </span><br><span class="line"></span><br><span class="line">We come out of loop because j is now equal to high-1.</span><br><span class="line">Finally we place pivot at correct position by swapping</span><br><span class="line">arr[i+1] and arr[high] (or pivot) </span><br><span class="line">arr[] = &#123;10, 30, 40, 50, 70, 90, 80&#125; // 80 and 70 Swapped </span><br><span class="line"></span><br><span class="line">Now 70 is at its correct place. All elements smaller than</span><br><span class="line">70 are before it and all elements greater than 70 are after</span><br><span class="line">it.</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java program for implementation of QuickSort</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/* This function takes last element as pivot,</span></span><br><span class="line"><span class="comment">       places the pivot element at its correct</span></span><br><span class="line"><span class="comment">       position in sorted array, and places all</span></span><br><span class="line"><span class="comment">       smaller (smaller than pivot) to left of</span></span><br><span class="line"><span class="comment">       pivot and all greater elements to right</span></span><br><span class="line"><span class="comment">       of pivot */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[high]; </span><br><span class="line">        <span class="keyword">int</span> i = (low-<span class="number">1</span>); <span class="comment">// index of smaller element</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=low; j&lt;high; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// If current element is smaller than or</span></span><br><span class="line">            <span class="comment">// equal to pivot</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt;= pivot)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// swap arr[i] and arr[j]</span></span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// swap arr[i+1] and arr[high] (or pivot)</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i+<span class="number">1</span>];</span><br><span class="line">        arr[i+<span class="number">1</span>] = arr[high];</span><br><span class="line">        arr[high] = temp;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* The main function that implements QuickSort()</span></span><br><span class="line"><span class="comment">      arr[] --&gt; Array to be sorted,</span></span><br><span class="line"><span class="comment">      low  --&gt; Starting index,</span></span><br><span class="line"><span class="comment">      high  --&gt; Ending index */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* pi is partitioning index, arr[pi] is </span></span><br><span class="line"><span class="comment">              now at right place */</span></span><br><span class="line">            <span class="keyword">int</span> pi = partition(arr, low, high);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Recursively sort elements before</span></span><br><span class="line">            <span class="comment">// partition and after partition</span></span><br><span class="line">            sort(arr, low, pi-<span class="number">1</span>);</span><br><span class="line">            sort(arr, pi+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* A utility function to print array of size n */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Driver program</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"> </span><br><span class="line">        QuickSort ob = <span class="keyword">new</span> QuickSort();</span><br><span class="line">        ob.sort(arr, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"sorted array"</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorted array:</span><br><span class="line">1 5 7 8 9 10</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux基本指令]]></title>
      <url>/2017/12/11/linux/2018-01-01/</url>
      <content type="html"><![CDATA[<h1><span id="jie-ya">解压</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf 文件名</span><br></pre></td></tr></table></figure>
<h1><span id="yi-dong">移动</span></h1><p>文件移动命令mv<br>    命令格式：mv [-fiv] source destination<br>    参数说明：<br>    -f:force，强制直接移动而不询问<br>    -i:若目标文件(destination)已经存在，就会询问是否覆盖<br>    -u:若目标文件已经存在，且源文件比较新，才会更新<br>    如将/test1目录下的file1复制到/test3 目录，并将文件名改为file2,可输入以下命令：<br>    mv /test1/file1 /test3/file2</p>
<h1><span id="chong-ming-ming">重命名</span></h1><h1><span id="guan-ji">关机</span></h1><p>poweroff 立刻关机<br>shutdown -h now 立刻关机<br>shutdown -h 10 10分钟后自动关机</p>
<h1><span id="guan-bi-fang-huo-qiang">关闭防火墙</span></h1><p>关闭命令：  service iptables stop<br>永久关闭防火墙：chkconfig iptables off<br>永久关闭需要两条语句都运行</p>
<h1><span id="guan-bi-duan-kou">关闭端口</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO channel]]></title>
      <url>/2017/12/11/NIO/nio3/</url>
      <content type="html"><![CDATA[<h1><span id="java-nio-channel">java NIO channel</span></h1><p>&emsp;&emsp; When it comes to NIO, the first New concept we approach is channel, we operate data by using it instead of stream in traditional IO.</p>
<h1><span id="the-introduce-of-channel">The introduce of channel</span></h1><h2><span id="what-is-channel">What is channel?</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channels is the second invocation of java NIO, they used to transmit data to the corresponding entity in both sides of the channel. Channels are gateways through which the native I/O services of the operating system can be accessed with a minimum of overhead, and buffers are the internal endpoints used by channels to send and receive data.</p>
<h2><span id="the-feature-of-channel">The feature of channel</span></h2><blockquote>
<p>1.channel both can read data also can write data<br>2.channel can read or write data from asynchronous<br>3.channel must have a buffer to transmit data</p>
</blockquote>
<h2><span id="the-family-of-channel">The family of channel</span></h2><p>java.nio.channels.Channel 接口：</p>
<blockquote>
<pre><code>|--FileChannel
|--SocketChannel
|--ServerSocketChannel
|--DatagramChannel
</code></pre></blockquote>
<p><img src="/media/15129757112556.jpg" alt=""></p>
<h1><span id="the-use-of-channel">The use of channel</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the above, we know about what is channel roughly. Now, we tell channel by using it.</p>
<h2><span id="copy-file-by-channel">Copy file by channel</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//Getting channel</span></span><br><span class="line">		FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">		FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>);</span><br><span class="line">			fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"2.txt"</span>);</span><br><span class="line">			</span><br><span class="line">			inChannel = fis.getChannel();</span><br><span class="line">			outChannel = fos.getChannel();</span><br><span class="line">			<span class="comment">//allocate specified size buffer</span></span><br><span class="line">			ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//Getting data from channel, and storage it in buffer </span></span><br><span class="line">			<span class="keyword">while</span>(inChannel.read(buf) != -<span class="number">1</span>)&#123;</span><br><span class="line">				buf.flip(); <span class="comment">//Flips this buffer</span></span><br><span class="line">				<span class="comment">//write the data in the buffer into the channel</span></span><br><span class="line">				outChannel.write(buf);</span><br><span class="line">				<span class="comment">//clear buffer, The position is set to zero, the limit is set to the capacity</span></span><br><span class="line">				buf.clear(); </span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//handle corresponding exception</span></span><br><span class="line">		&#125;</span><br><span class="line">				</span><br><span class="line">	&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; above the code, we get corresponding stream from File stream, then we write data to FileOutputStream. Now, we detail some of these method. `FileChannelImpl.open` will create corresponding instance.</span><br><span class="line"></span><br><span class="line"># A set of method of channel</span><br><span class="line">## getChannel()</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `getChannel`method will Returns the unique FileChannel object associated with <span class="keyword">this</span> file input stream.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The initial &#123;<span class="doctag">@link</span> java.nio.channels.FileChannel#position()</span></span><br><span class="line"><span class="comment">     * position&#125; of the returned channel will be equal to the</span></span><br><span class="line"><span class="comment">     * number of bytes read from the file so far.  Reading bytes from this</span></span><br><span class="line"><span class="comment">     * stream will increment the channel's position.  Changing the channel's</span></span><br><span class="line"><span class="comment">     * position, either explicitly or by reading, will change this stream's</span></span><br><span class="line"><span class="comment">     * file position.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the file channel associated with this file input stream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileChannel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                channel = FileChannelImpl.open(fd, path, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> channel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="read-bytebuffer-dst">read(ByteBuffer dst)</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <code>read</code> is abstract method, it will read a sequence of bytes from this channel into the given buffer. Bytes are read starting at this channel’s current file position, and then file position is updated with the number of bytes actually read.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public int read(ByteBuffer dst) throws IOException &#123;</span><br><span class="line">       ensureOpen();</span><br><span class="line">       if (!readable)</span><br><span class="line">           throw new NonReadableChannelException();</span><br><span class="line">       synchronized (positionLock) &#123;</span><br><span class="line">           int n = 0;</span><br><span class="line">           int ti = -1;</span><br><span class="line">           try &#123;</span><br><span class="line">               begin();</span><br><span class="line">               ti = threads.add();</span><br><span class="line">               if (!isOpen())</span><br><span class="line">                   return 0;</span><br><span class="line">               do &#123;</span><br><span class="line">                   n = IOUtil.read(fd, dst, -1, nd);</span><br><span class="line">              &#125; while ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen());</span><br><span class="line">               return IOStatus.normalize(n);</span><br><span class="line">           &#125; finally &#123;</span><br><span class="line">               threads.remove(ti);</span><br><span class="line">               end(n &gt; 0);</span><br><span class="line">               assert IOStatus.check(n);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="write-bytebuffer-src">write(ByteBuffer src)</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Writes a sequence of bytes to this channel from given buffer. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      ensureOpen();</span><br><span class="line">      <span class="keyword">if</span> (!writable)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> NonWritableChannelException();</span><br><span class="line">      <span class="keyword">synchronized</span> (positionLock) &#123;</span><br><span class="line">          <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">int</span> ti = -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              begin();</span><br><span class="line">              ti = threads.add();</span><br><span class="line">              <span class="keyword">if</span> (!isOpen())</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">do</span> &#123;</span><br><span class="line">                  n = IOUtil.write(fd, src, -<span class="number">1</span>, nd);</span><br><span class="line">              &#125; <span class="keyword">while</span> ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen());</span><br><span class="line">              <span class="keyword">return</span> IOStatus.normalize(n);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              threads.remove(ti);</span><br><span class="line">              end(n &gt; <span class="number">0</span>);</span><br><span class="line">              <span class="keyword">assert</span> IOStatus.check(n);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java NIO buffer]]></title>
      <url>/2017/12/10/NIO/nio2/</url>
      <content type="html"><![CDATA[<h1><span id="java-nio-buffer">java NIO buffer</span></h1><p>&emsp;&emsp; A buffer Object is a container of a fixed amount of data, it acts as a block or staging area, where data can be stored and later retrieved.<strong>Buffers work hand in glove with channels</strong>, Channels are portals through which i/o transfers take place, and buffers are the sources or targets of those data transfers.</p>
<h2><span id="the-family-of-buffer-in-java-nio">The family of buffer in java nio</span></h2><p><img src="/media/15129174785464.jpg" alt=""></p>
<p>&emsp;&emsp; From the system diagram, we can find each of the basic data types has their own corresponding buffer class. as follows:</p>
<hr>
<blockquote>
<p>ByteBuffer<br>shortBuffer<br>CharBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer<br>MappedByteBuffer</p>
</blockquote>
<h2><span id="attributes">Attributes</span></h2><p>&emsp;&emsp; Buffer is mainly has four attributes</p>
<p><strong>Capacity:</strong>  The maximum number of data elements the buffer can hold. The capacity is set when the buffer is created and can never be changed.</p>
<p><strong>Limit:</strong>  The first element of the buffer that should not be read or written. In other words, the count of live elements in the buffer.</p>
<p><strong>Position:</strong>The index of next element to be read or written. The position is updated automatically by <code>get()</code> and <code>put()</code> methods.</p>
<p><strong>Mark:</strong> A remembered position,<code>Mark()</code> and reset() are used together. when we use <code>Mark()</code>, we will record the position so that calling <code>reset()</code> sets <code>position = mark</code></p>
<p>The following relationship between these four attributes always holds:</p>
<p style="text-align: center">0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</p>

<p><img src="/media/15129175076144.jpg" alt=""></p>
<h2><span id="buffer-interface">Buffer interface</span></h2><p><img src="/media/15129175281981.jpg" alt=""></p>
<h2><span id="the-usage-of-buffer">The Usage of Buffer</span></h2><p>&emsp;&emsp; Now, i show how to use it and explain the source code through it’s the implementation class — ByteBuffer</p>
<h3><span id="the-constructor-of-it">The constructor of it</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer(int mark, int pos, int lim, int cap, byte[] hb, int offset)</span><br><span class="line"> &#123;</span><br><span class="line">     super(mark, pos, lim, cap);</span><br><span class="line">     this.hb = hb;</span><br><span class="line">     this.offset = offset;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">     // Creates a new buffer with the given mark, position, limit, and capacity</span><br><span class="line"> ByteBuffer(int mark, int pos, int lim, int cap) &#123;         this(mark, pos, lim, cap, null, 0);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> &emsp;&emsp;&emsp;  we can find the core of it invoke the superclass, at first we see the parent class constructor. it easy to find the superclass is <code>Buffer</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Buffer(<span class="keyword">int</span> mark, <span class="keyword">int</span> pos, <span class="keyword">int</span> lim, <span class="keyword">int</span> cap) &#123;      </span><br><span class="line">        <span class="keyword">if</span> (cap &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Negative capacity: "</span> + cap);</span><br><span class="line">        <span class="keyword">this</span>.capacity = cap;</span><br><span class="line">        limit(lim);</span><br><span class="line">        position(pos);</span><br><span class="line">        <span class="keyword">if</span> (mark &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mark &gt; pos)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"mark &gt; position: ("</span></span><br><span class="line">                                                   + mark + <span class="string">" &gt; "</span> + pos + <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">this</span>.mark = mark;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this buffer's limit.  If the position is larger than the new limit</span></span><br><span class="line"><span class="comment">     * then it is set to the new limit.  If the mark is defined and larger than</span></span><br><span class="line"><span class="comment">     * the new limit then it is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  newLimit</span></span><br><span class="line"><span class="comment">     *         The new limit value; must be non-negative</span></span><br><span class="line"><span class="comment">     *         and no larger than this buffer's capacity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the preconditions on &lt;tt&gt;newLimit&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(<span class="keyword">int</span> newLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((newLimit &gt; capacity) || (newLimit &lt; <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        limit = newLimit;</span><br><span class="line">        <span class="keyword">if</span> (position &gt; limit) position = limit;</span><br><span class="line">        <span class="keyword">if</span> (mark &gt; limit) mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this buffer's position.  If the mark is defined and larger than the</span></span><br><span class="line"><span class="comment">     * new position then it is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  newPosition</span></span><br><span class="line"><span class="comment">     *         The new position value; must be non-negative</span></span><br><span class="line"><span class="comment">     *         and no larger than the current limit</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the preconditions on &lt;tt&gt;newPosition&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((newPosition &gt; limit) || (newPosition &lt; <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        position = newPosition;</span><br><span class="line">        <span class="keyword">if</span> (mark &gt; position) mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this constructor, Main purpose is to give the corresponding handle to set the appropriate attribute values through the way of refs, these attributes was introduced in the above. Each method of them has corresponding judgment whether the property value whether meet the conditions. if not, it will throws corresponding exception.</p>
<h3><span id="allocate-a-specify-memory-space">allocate a specify memory space</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//allocate a specify memory space</span></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">0</span><br><span class="line">1024</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the beginning of allocate a memory space to buffer, we can find the property value of <code>position</code> is 0, property values of <code>limit</code> and <code>capacity</code> is the value of the incoming.</p>
<h3><span id="buffer-after-five-put-s">Buffer after five put( )s</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"Hello"</span>;</span><br><span class="line">      <span class="comment">//put data in the buffer</span></span><br><span class="line">buf.put(str.getBytes());</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">5</span><br><span class="line">1024</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Follow the above code, I convert a string into a byte array and store it the <code>buf</code> instance. From the result, we can find the <code>position</code> has some change, limit and capacity don’t have any change. The model is shown.<br><img src="/media/15129175579354.jpg" alt=""></p>
<h3><span id="switch-to-read-data-mode">Switch to Read data mode</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Continuing to follow the above code, we begin to read the data which we put in the above. At first we switch to read data mode by calling the <code>flip()</code> method. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf.flip();</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">5</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Flips this buffer. The <code>limit</code> is set to the current <code>position</code> and then the <code>position</code> is set to zero. If the mark is defined then it is discarded.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; After invoking the <code>flip()</code>, we begin to read the data in the buffer. </p>
<h3><span id="read-data-from-buffer">Read data from buffer</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line">buf.get(dst);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(dst, <span class="number">0</span>, dst.length));</span><br><span class="line">System.out.println(buf.position());</span><br><span class="line">System.out.println(buf.limit());</span><br><span class="line">System.out.println(buf.capacity());</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  From the code, we can find we build a byte array to read data from buffer. after reading it, The property value of position changed. The principle of it is after we invoke the <code>get()</code> method It can read the Reads the byte at this buffer’s current position, and then increments the position. The process of <code>get()</code> method is in its implementation class.</p>
<h3><span id="rewinds-this-buffer">Rewinds this buffer</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      position = <span class="number">0</span>;</span><br><span class="line">      mark = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The position is set to zero and the mark is discarded. Invoking this method before a sequence of channel-write or get operations, assuming that the limit has already been set appropriately.</p>
<h3><span id="clears-this-buffer">Clears this buffer</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The position is set to zero, the limit is set to the capacity, and the mark is discarded.This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="hasremaining">hasRemaining()</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tells whether there are any elements between the current position and the limit. if true, there is at least one element remaining in this buffer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final boolean hasRemaining() &#123;</span><br><span class="line">      return position &lt; limit;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="the-compare-buffers">The Compare Buffers</span></h2><h3><span id="direct-byte-buffers">Direct byte buffers</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Direct byte buffers are usually the best choice for I/O operations. By design, they support the most efficient I/O mechanism available to the JVM.Direct buffers are optimal for I/O, but they may be more expensive to create than non direct byte buffers. The memory used by direct buffers is allocated by calling through to native, operating system-specific code, by passing the standard JVM heap. Setting up and tearing down direct buffers could be significantly more expensive than heap-resident buffers, depending on the host operating system and JVM implementation. The memory-storage areas of direct buffers are not subject to garbage collection because they are outside the standard JVM heap.      </p><p style="text-align: right;">—reference O’reilly java NIO </p><br><img src="/media/15129175838229.jpg" alt=""><p></p>
<h4><span id="the-method-of-creation">The Method of creation</span></h4><p><code>static ByteBuffer allocateDirect(int capacity)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new direct byte buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment"> * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment"> * initialized to zero.  Whether or not it has a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #hasArray backing array&#125; is unspecified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment"> *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(int cap) &#123;                   // package-private</span><br><span class="line"></span><br><span class="line">    super(-1, 0, cap, cap);</span><br><span class="line">    boolean pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    int ps = Bits.pageSize();</span><br><span class="line">    long size = Math.max(1L, (long)cap + (pa ? ps : 0));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    long base = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; catch (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        throw x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (byte) 0);</span><br><span class="line">    if (pa &amp;&amp; (base % ps != 0)) &#123;</span><br><span class="line">        // Round up to page boundary</span><br><span class="line">        address = base + ps - (base &amp; (ps - 1));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(this, new Deallocator(base, size, cap));</span><br><span class="line">    att = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="non-direct-byte-buffers">Non direct byte buffers</span></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Non direct byte buffers can be passed to channels, but doing so may incur a performance penalty. It’s usually not possible for a non direct buffer to be the target of a native I/O operation. If you pass a non direct ByteBuffer object to a channel for write, the channel may implicitly do the following on each call:</p>
<blockquote>
<ol>
<li>Create a temporary direct ByteBuffer object.</li>
<li>Copy the content of the non direct buffer to the temporary buffer.</li>
<li>Perform the low-level I/O operation using the temporary buffer.</li>
<li>The temporary buffer object goes out of scope and is eventually garbage collected. </li>
</ol>
</blockquote>
<p style="text-align: right;">—reference O‘reilly java NIO </p>


<p><img src="/media/15129176007588.jpg" alt=""></p>
<h4><span id="the-method-of-creation">The Method of creation</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Allocates a new byte buffer.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment">  * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment">  * initialized to zero.  It will have a &#123;<span class="doctag">@link</span> #array backing array&#125;,</span></span><br><span class="line"><span class="comment">  * and its &#123;<span class="doctag">@link</span> #arrayOffset array offset&#125; will be zero.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment">  *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">  *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(capacity, capacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HeapByteBuffer(int cap, int lim) &#123;           </span><br><span class="line"></span><br><span class="line">    super(-1, 0, lim, cap, new byte[cap], 0);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeapByteBuffer(byte[] buf, int off, int len) &#123;</span><br><span class="line"></span><br><span class="line">    super(-1, off, off + len, buf.length, buf, 0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected HeapByteBuffer(byte[] buf,</span><br><span class="line">                               int mark, int pos, int lim, int cap,</span><br><span class="line">                               int off) &#123;</span><br><span class="line">    super(mark, pos, lim, cap, buf, off);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We can see it invoke superclass’s constructor, so its data will store in the Heap.</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The introduce of NIO]]></title>
      <url>/2017/12/09/NIO/nio1/</url>
      <content type="html"><![CDATA[<h1><span id="the-introduce-of-nio">The introduce of NIO</span></h1><h2><span id="what-is-nio">What is NIO？</span></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  java.nio (non-blocking I/O) is a collection of Java programming language APIs that offer features for intensive I/O operations. It was introduced with the J2SE 1.4 release of Java by Sun Microsystems to complement an existing standard I/O   </p>
<p style="text-align: right;">—reference wiki</p>

<h2><span id="the-compare-between-nio-and-io">The compare between NIO and IO</span></h2><table>
<thead>
<tr>
<th>IO</th>
<th>NIO</th>
</tr>
</thead>
<tbody>
<tr>
<td>Stream Oriented</td>
<td>Buffer Oriented</td>
</tr>
<tr>
<td>Blocking IO</td>
<td>Non Blocking IO</td>
</tr>
<tr>
<td></td>
<td>Selectors</td>
</tr>
</tbody>
</table>
<h2><span id="the-function-of-nio">The function of NIO</span></h2><p>&emsp;&emsp; When it comes to NIO, we should what is IO. In the traditional IO, we read or store data in the form of stream, so it is easy to cause obstruction that we difficult calls in multiple threads.But in NIO,The problem has a good way to solve it, the way is that we convey information by channel. in the channel, we can construct the corresponding buffer to transfer data. so we can say it is base on <strong>Buffer Oriented</strong>.</p>
]]></content>
      
        <categories>
            
            <category> NIO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring IOC源码分析]]></title>
      <url>/2017/01/07/spring/2018-01-07/</url>
      <content type="html"><![CDATA[<h1><span id="what-is-ioc">What is IOC</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 谁控制谁，控制什么：Ioc容器来控制对象的创建,控制了外部资源获取<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为何是反转，哪些方面反转了：因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转,依赖对象的获取被反转了</p>
<p>传统程序设计:<br><img src="/media/15153018943924.jpg" alt=""></p>
<p>IOC容器模型:<br><img src="/media/15153019310645.jpg" alt=""></p>
<h1><span id="ioc-de-zuo-yong">IOC的作用</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IoC是一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>
<h1><span id="can-kao-lian-jie">参考链接：</span></h1><p><a href="http://jinnianshilongnian.iteye.com/category/206533" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/category/206533</a></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring ClassPathXmlApplicationContext代码解读]]></title>
      <url>/2017/01/07/spring/2018-01-07-1/</url>
      <content type="html"><![CDATA[<p><img src="/media/15153047375512.jpg" alt=""></p>
<h1><span id="shi-li-hua-classpathxmlapplicationcontext">实例化ClassPathXmlApplicationContext</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">				<span class="keyword">new</span> String[] &#123; <span class="string">"spring-context.xml"</span> &#125;);</span><br></pre></td></tr></table></figure>
<h2><span id="diao-yong-fu-ji-gou-zao-qi">调用父级构造器</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>(configLocations, refresh, <span class="keyword">null</span>);</span><br><span class="line">。。。。。。</span><br><span class="line"><span class="keyword">super</span>(parent);</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实例化的过程中不断调用父类构造器直到找到<code>AbstractApplicationContext</code>,调用this方法实例化<code>PathMatchingResourcePatternResolver</code>并注入作为句柄。并且该实例的<code>resourceLoader</code>句柄的值就是当前<code>ClassPathXmlApplicationContext</code>实例。这个时候<code>ClassPathXmlApplicationContext</code>中传入的父级上下文为空，所以父级上下文始终为空。</p>
<h2><span id="she-zhi-pei-zhi-wen-jian-lu-jing">设置配置文件路径</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setConfigLocations(configLocations);</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个代码中,主要做的事情是设置配置文件的路径。如上文中的<code>spring-context.xml</code>，最终将其存入configLocations这个String数组中。</p>
<h2><span id="refresh-fang-fa">refresh方法</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">	  refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体代码过程如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这里会重新设置容器启动时间和启动标志字段*/</span>  </span><br><span class="line">prepareRefresh();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通知子类刷新beanFactory，具体实现在AbstractRefreshableApplicationContext中， 注这里的默认实例</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">1</span>.如果当前Context持有beanFactory，则先destoryBeans，再关闭beanFactory </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">2</span>.createBeanFactory：用父容器创建一个DefaultListableBeanFactory，（这里如果父容器为ConfigurableApplicationContext，  则返回该context持有的beanFacotry，否则直接返回父BeanFactory。ps：这里可能就是context和beanFactory的区分点） </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">3</span>.customizeBeanFactory：根据参数设置是否允许子类定制DefaultListableBeanFactory。 </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">4</span>.loadBeanDefinitions：加载BeanDefinitions，具体实现在AbstractXmlApplicationContext中。（TODO：后面会详细扩展讲解） 并返回子类的beanFactory </span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 1.设置ClassLoader </p>
<p> 2.addPropertyEditorRegistrar，设置用户定义的propertyEditor注册器 </p>
<p> 3.addBeanPostProcessor，设置ApplicationContextAwareProcessor， 处理ApplicationContextAware实现接口的Bean。 </p>
<p> 4.ignoreDependencyInterface，设置不解析某些接口的依赖关系 </p>
<p> 5.registerResolvableDependency,设置特殊接口和bean的绑定关系 </p>
</blockquote>
<p> /<em>* 提供接口给子类修改beanFactory。 </em>/<br>                postProcessBeanFactory(beanFactory);  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 调用注册的BeanFactoryPostProcessor，按照实现的排序接口PriorityOrdered&gt;Ordered&gt;无接口 */</span>  </span><br><span class="line"></span><br><span class="line">     invokeBeanFactoryPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** 按照排序接口，依次注册BeanPostProcessor，后面会按照这个顺序调用 */</span>  </span><br><span class="line">     registerBeanPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 初始化messageSource,（MessageSource接口用于支持国际化）如果context中尤定义id为messageSource </span></span><br><span class="line"><span class="comment">   * 的MessageSource接口的bean（潜规则），则采用它来解析Message资源，否则采用父容器messageSource，这里会创建一个DelegatingMessageSource， </span></span><br><span class="line"><span class="comment">   * 避免为空的情况导致调用失败。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">     initMessageSource();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 初始化并注册ApplicationEventMulticaster，容器事情广播器，同样采用MessageSource类似的潜规则， </span></span><br><span class="line"><span class="comment">   * 如果容器中有名为applicationEventMulticaster且实现了ApplicationEventMulticaster接口的bean，则注册它， </span></span><br><span class="line"><span class="comment">   * 否则创建SimpleApplicationEventMulticaster，将它当作默认的广播器。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">     initApplicationEventMulticaster();  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** 给子类保留的接口，通知子类刷新 */</span>  </span><br><span class="line">      onRefresh();  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/** 获取容器中定义的所有ApplicationListener，容器事件监听器，并注册 */</span>  </span><br><span class="line">      registerListeners();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 1.清除用于类型匹配的classLoader  </span></span><br><span class="line"><span class="comment">      * 2.冻结bean definitions中设置，不能再修改bean的配置 </span></span><br><span class="line"><span class="comment">      * 3.实例化非延迟加载的单例bean，包括由FactoryBean实例化的bean（TODO：需要进一步深挖） </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">      finishBeanFactoryInitialization(beanFactory);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** 广播ContextRefreshedEvent容器刷新事件。 */</span>  </span><br><span class="line">       finishRefresh(); </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用ClassPathXmlApplicationContext的start方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		getLifecycleProcessor().start();</span><br><span class="line">		publishEvent(<span class="keyword">new</span> ContextStartedEvent(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面展示它的具体实现方法.getLifecycleProcessor获取的默认的实例是，在其中会调用如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	startBeans(<span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">this</span>.running = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBeans</span><span class="params">(<span class="keyword">boolean</span> autoStartupOnly)</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Lifecycle&gt; lifecycleBeans = getLifecycleBeans();</span><br><span class="line">	Map&lt;Integer, LifecycleGroup&gt; phases = <span class="keyword">new</span> HashMap&lt;Integer, LifecycleGroup&gt;();</span><br><span class="line">	<span class="keyword">for</span> (Map.Entry&lt;String, ? extends Lifecycle&gt; entry : lifecycleBeans.entrySet()) &#123;</span><br><span class="line">		Lifecycle bean = entry.getValue();</span><br><span class="line">		<span class="keyword">if</span> (!autoStartupOnly || (bean <span class="keyword">instanceof</span> SmartLifecycle &amp;&amp; ((SmartLifecycle) bean).isAutoStartup())) &#123;</span><br><span class="line">			<span class="keyword">int</span> phase = getPhase(bean);</span><br><span class="line">			LifecycleGroup group = phases.get(phase);</span><br><span class="line">			<span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">				group = <span class="keyword">new</span> LifecycleGroup(phase, <span class="keyword">this</span>.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);</span><br><span class="line">				phases.put(phase, group);</span><br><span class="line">			&#125;</span><br><span class="line">			group.add(entry.getKey(), bean);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (phases.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		List&lt;Integer&gt; keys = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(phases.keySet());</span><br><span class="line">		Collections.sort(keys);</span><br><span class="line">		<span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">			phases.get(key).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">	Assert.notNull(event, <span class="string">"Event must not be null"</span>);</span><br><span class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">		logger.trace(<span class="string">"Publishing event in "</span> + getDisplayName() + <span class="string">": "</span> + event);</span><br><span class="line">	&#125;</span><br><span class="line">	getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以第一句的作用是添加相应监听器，第二句的作用是通知监听器，然后执行相应的时间</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git基本指令]]></title>
      <url>/2017/01/02/git/2017-12-29/</url>
      <content type="html"><![CDATA[<h1><span id="the-knowledge-of-git">The knowledge of git</span></h1><h2><span id="base-code">base code</span></h2><h3><span id="git-init">git init</span></h3><p>在当前目录生成的一个管理git仓库的文件夹，这里包含所有git操作所需要的东西</p>
<p>1 hooks:这个目录存放一些shell脚本，可以设置特定的git命令后触发相应的脚本；在搭建gitweb系统或其他git托管系统会经常用到hook script。</p>
<p>2 info:包含仓库的一些信息</p>
<p>3 logs:保存所有更新的引用记录</p>
<p>4 objects:该目录存放所有的Git对象，对象的SHA1哈希值的前两位是文件夹名称，后38位作为对象文件名。比如前面log里的HEAD文件里有个哈希值5426426e3ccc9ab4e3330640862a7b96e28828af</p>
<p>5 refs:具体的引用，Reference Specification，这个目录一般包括三个子文件夹，heads、remotes和tags，比如，heads中的master文件标识了项目中的master分支指向的当前commit，其他类似。</p>
<p>6 COMMIT_EDITMSG:保存最新的commit message，Git系统不会用到这个文件，只是给用户一个参考</p>
<p>7 config:这个是GIt仓库的配置文件</p>
<p>8 description:仓库的描述信息，主要给gitweb等git托管系统使用</p>
<p>9 index:这个文件就是我们前面提到的暂存区（stage），是一个二进制文件</p>
<p>10 HEAD:这个文件包含了一个分支（branch）的引用，通过这个文件Git可以得到下一次commit的parent，什么是引用呢，你可以理解为指针，哪儿都可以指，但是不能指向没有的东西哦。详细介绍请看这里：</p>
<p>###git add</p>
<p>git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</p>
<p>git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写）</p>
<p>git add -A ：是上面两个功能的合集（git add –all的缩写）</p>
<h3><span id="git-remote">git remote</span></h3><p>git remote add:命令用于添加远程主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br></pre></td></tr></table></figure>
<h2><span id="src-refspec-master-does-not-match-any">src refspec master does not match any.</span></h2>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo相关问题]]></title>
      <url>/2017/01/02/dubbo/2017-12-29/</url>
      <content type="html"><![CDATA[<h1><span id="the-question-of-dubbo">The question of dubbo</span></h1><h2><span id="q1">Q1</span></h2><p>防火墙问题:<br>关闭命令：  service iptables stop<br>永久关闭防火墙：chkconfig iptables off<br>永久关闭需要两条语句都运行</p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo环境搭建]]></title>
      <url>/2017/01/02/dubbo/2018-01-02/</url>
      <content type="html"><![CDATA[<p>#解压dubbo-admin<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将dubbo-admin解压到tomcat的webapps下面</p>
<p>解压命令unzip dubbo-admin.war -d dubbp-admin</p>
<p>#修改属性文件</p>
<blockquote>
<p>1.将用户密码都改成root<br>2.修改相应地址</p>
</blockquote>
<p>截图如下:</p>
<p><img src="/media/15148683955030.jpg" alt=""></p>
<p>#启动tomcat<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接将tomcat启动，启动之后可以查看相应的日志，<br>启动命令：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在相应的bin目录下执行<code>startup.sh</code><br>日志命令:<br><code>tail -f -n 500 /usr/local/dubbo-tomcat/logs/catalina.out</code></p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo源码分析1-spring方式启动]]></title>
      <url>/2017/01/02/dubbo/2018-01-07/</url>
      <content type="html"><![CDATA[<h1><span id="zhuang-zai-biao-qian-yuan-su">装载标签元素</span></h1><p>Spring为了支持用户自定义类加载到Spring容器，提供了<code>org.springframework.beans.factory.xml.NamespaceHandler</code>接口<code>org.springframework.beans.factory.xml.NamespaceHandlerSupport</code>抽象类，NamespaceHandler#init方法会在对象的构造函数调用之后、属性初始化之前被DefaultNamespaceHandlerResolver调用。dubbo的DubboNamespaceHandler类正是继承了NamespaceHandlerSupport所以在spring加载过程中会执行这个类中的内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过上面发现所有的标签元素都是通过registerBeanDefinitionParser注册，这个方法主要是将所有的标签对应的解析定义注入一个parsers这个Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitionParser</span><span class="params">(String elementName, BeanDefinitionParser parser)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.parsers.put(elementName, parser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#解析标签元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将所有dubbo的标签给装载之后，就是对具体的标签进行解析，首先展示一下解析逻辑,从这里可以看出来，它是根据具体的标签元素找到DubboBeanDefinitionParser这个实例,然后开始进行解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse the elements at the root level in the document:</span></span><br><span class="line"><span class="comment"> * "import", "alias", "bean".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root the DOM root element of the document</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">		NodeList nl = root.getChildNodes();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">			Node node = nl.item(i);</span><br><span class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">				Element ele = (Element) node;</span><br><span class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">					parseDefaultElement(ele, delegate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					delegate.parseCustomElement(ele);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		delegate.parseCustomElement(root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">	String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">		error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意在这里将上面注册的beanClass给传入进去，所以在解析beanDefinition的时候就可以获取到这个标签的具体类实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parse(element, parserContext, beanClass, required);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ReferenceConfig</p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[druid分析]]></title>
      <url>/2017/01/02/druid/2017-12-30/</url>
      <content type="html"><![CDATA[<p>The analysis of Druid<br>Instancing DruidDataSource<br>DruidDataSource have two Constructor,and the one without any argument will invoke another by writing a argument, as follows</p>
<p>At first, We find it will invoke <code>super(fairLock)</code>,its default value is false by instancing the constructor without any argument , it wil call the superclass object and invoke the methods of configFromPropety to Set up relevant property values by getting System property values. Its superclass object constructor is shown below:</p>
<p>In superclass object constructor,the instance create Creates an instance of ReentrantLock with the given unfairness policy. after that it will create Condition instance for use with this Lock instance. The returned Condition instance supports the same usages as do the Object monitor methods <code>(wait, notify, and notifyAll)</code> when used with the built-in monitor lock.</p>
]]></content>
      
        <categories>
            
            <category> druid </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea上svn相关问题]]></title>
      <url>/2017/01/01/other/2018-01-04/</url>
      <content type="html"><![CDATA[<h1><span id="idea-shang-bu-xian-shi-svn">idea上不显示svn</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntelliJ IDEA打开带SVN信息的项目不显示SVN信息，项目右键SVN以及图标还有Changes都不显示解决方法在VCS菜单中有个开关，叫Enabled Version Control Integration，在打开的窗口的选项中选择Subversion即可</p>
<h1><span id="idea-hu-lue-mou-xie-wen-jian-geng-xin">idea忽略某些文件更新</span></h1>]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven命令使用指南]]></title>
      <url>/2017/01/01/maven/2018-01-03/</url>
      <content type="html"><![CDATA[<p>#基本命令</p>
<blockquote>
<p>编译源代码: mvn compile<br>编译测试代码：mvn test-compile<br>运行测试：mvn test<br>产生site：mvn site<br>打包：mvn package   -Dmaven.test.skip=true(跳过测试)</p>
</blockquote>
<p>#编译jar到本地仓库</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4.jar</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4-sources.jar -Dclassifier=sources</p>
<p>mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4-1.7 -Dpackaging=jar -Dfile=dubbo-2.8.4-javadoc.jar -Dclassifier=javadoc</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven错误记录]]></title>
      <url>/2017/01/01/maven/2018-01-05/</url>
      <content type="html"><![CDATA[<h1><span id="bu-neng-bu-shu">不能部署</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.5: deploy (default-deploy)</span><br></pre></td></tr></table></figure>
<p>这是在发布到私服的过程中，可能</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea相关问题]]></title>
      <url>/2017/01/01/other/2018-01-02/</url>
      <content type="html"><![CDATA[<h1><span id="q1">Q1</span></h1><p>源发行版 1.6 需要目标发行版 1.6</p>
<p>setting-&gt;Compiler-&gt;Java Compiler 设置相应Module的target byte code version的合适版本就行来（搜索首选项）</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac切换jdk]]></title>
      <url>/2017/01/01/other/2018-01-03/</url>
      <content type="html"><![CDATA[<p>#切换jdk命令</p>
<blockquote>
<p>切换版本：    jenv use java 1.8<br>设置缺少版本： jenv default java 1.8</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
